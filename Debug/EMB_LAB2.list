
EMB_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  0800660c  0800660c  0001660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a4  080095a4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080095a4  080095a4  000195a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095ac  080095ac  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095ac  080095ac  000195ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b0  080095b0  000195b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080095b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          0000022c  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000024c  2000024c  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e8b1  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cc7  00000000  00000000  0003e901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  000425c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a8  00000000  00000000  00043af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250f1  00000000  00000000  00044ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c591  00000000  00000000  00069f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3962  00000000  00000000  00086522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00159e84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058a4  00000000  00000000  00159ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080065f4 	.word	0x080065f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080065f4 	.word	0x080065f4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b96e 	b.w	8000ad8 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	4604      	mov	r4, r0
 800081c:	468c      	mov	ip, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	f040 8083 	bne.w	800092a <__udivmoddi4+0x116>
 8000824:	428a      	cmp	r2, r1
 8000826:	4617      	mov	r7, r2
 8000828:	d947      	bls.n	80008ba <__udivmoddi4+0xa6>
 800082a:	fab2 f282 	clz	r2, r2
 800082e:	b142      	cbz	r2, 8000842 <__udivmoddi4+0x2e>
 8000830:	f1c2 0020 	rsb	r0, r2, #32
 8000834:	fa24 f000 	lsr.w	r0, r4, r0
 8000838:	4091      	lsls	r1, r2
 800083a:	4097      	lsls	r7, r2
 800083c:	ea40 0c01 	orr.w	ip, r0, r1
 8000840:	4094      	lsls	r4, r2
 8000842:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000846:	0c23      	lsrs	r3, r4, #16
 8000848:	fbbc f6f8 	udiv	r6, ip, r8
 800084c:	fa1f fe87 	uxth.w	lr, r7
 8000850:	fb08 c116 	mls	r1, r8, r6, ip
 8000854:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000858:	fb06 f10e 	mul.w	r1, r6, lr
 800085c:	4299      	cmp	r1, r3
 800085e:	d909      	bls.n	8000874 <__udivmoddi4+0x60>
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	f106 30ff 	add.w	r0, r6, #4294967295
 8000866:	f080 8119 	bcs.w	8000a9c <__udivmoddi4+0x288>
 800086a:	4299      	cmp	r1, r3
 800086c:	f240 8116 	bls.w	8000a9c <__udivmoddi4+0x288>
 8000870:	3e02      	subs	r6, #2
 8000872:	443b      	add	r3, r7
 8000874:	1a5b      	subs	r3, r3, r1
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb3 f0f8 	udiv	r0, r3, r8
 800087c:	fb08 3310 	mls	r3, r8, r0, r3
 8000880:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000884:	fb00 fe0e 	mul.w	lr, r0, lr
 8000888:	45a6      	cmp	lr, r4
 800088a:	d909      	bls.n	80008a0 <__udivmoddi4+0x8c>
 800088c:	193c      	adds	r4, r7, r4
 800088e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000892:	f080 8105 	bcs.w	8000aa0 <__udivmoddi4+0x28c>
 8000896:	45a6      	cmp	lr, r4
 8000898:	f240 8102 	bls.w	8000aa0 <__udivmoddi4+0x28c>
 800089c:	3802      	subs	r0, #2
 800089e:	443c      	add	r4, r7
 80008a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008a4:	eba4 040e 	sub.w	r4, r4, lr
 80008a8:	2600      	movs	r6, #0
 80008aa:	b11d      	cbz	r5, 80008b4 <__udivmoddi4+0xa0>
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	2300      	movs	r3, #0
 80008b0:	e9c5 4300 	strd	r4, r3, [r5]
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xaa>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f282 	clz	r2, r2
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d150      	bne.n	8000968 <__udivmoddi4+0x154>
 80008c6:	1bcb      	subs	r3, r1, r7
 80008c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008cc:	fa1f f887 	uxth.w	r8, r7
 80008d0:	2601      	movs	r6, #1
 80008d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80008d6:	0c21      	lsrs	r1, r4, #16
 80008d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80008dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e0:	fb08 f30c 	mul.w	r3, r8, ip
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d907      	bls.n	80008f8 <__udivmoddi4+0xe4>
 80008e8:	1879      	adds	r1, r7, r1
 80008ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008ee:	d202      	bcs.n	80008f6 <__udivmoddi4+0xe2>
 80008f0:	428b      	cmp	r3, r1
 80008f2:	f200 80e9 	bhi.w	8000ac8 <__udivmoddi4+0x2b4>
 80008f6:	4684      	mov	ip, r0
 80008f8:	1ac9      	subs	r1, r1, r3
 80008fa:	b2a3      	uxth	r3, r4
 80008fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000900:	fb0e 1110 	mls	r1, lr, r0, r1
 8000904:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000908:	fb08 f800 	mul.w	r8, r8, r0
 800090c:	45a0      	cmp	r8, r4
 800090e:	d907      	bls.n	8000920 <__udivmoddi4+0x10c>
 8000910:	193c      	adds	r4, r7, r4
 8000912:	f100 33ff 	add.w	r3, r0, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x10a>
 8000918:	45a0      	cmp	r8, r4
 800091a:	f200 80d9 	bhi.w	8000ad0 <__udivmoddi4+0x2bc>
 800091e:	4618      	mov	r0, r3
 8000920:	eba4 0408 	sub.w	r4, r4, r8
 8000924:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000928:	e7bf      	b.n	80008aa <__udivmoddi4+0x96>
 800092a:	428b      	cmp	r3, r1
 800092c:	d909      	bls.n	8000942 <__udivmoddi4+0x12e>
 800092e:	2d00      	cmp	r5, #0
 8000930:	f000 80b1 	beq.w	8000a96 <__udivmoddi4+0x282>
 8000934:	2600      	movs	r6, #0
 8000936:	e9c5 0100 	strd	r0, r1, [r5]
 800093a:	4630      	mov	r0, r6
 800093c:	4631      	mov	r1, r6
 800093e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000942:	fab3 f683 	clz	r6, r3
 8000946:	2e00      	cmp	r6, #0
 8000948:	d14a      	bne.n	80009e0 <__udivmoddi4+0x1cc>
 800094a:	428b      	cmp	r3, r1
 800094c:	d302      	bcc.n	8000954 <__udivmoddi4+0x140>
 800094e:	4282      	cmp	r2, r0
 8000950:	f200 80b8 	bhi.w	8000ac4 <__udivmoddi4+0x2b0>
 8000954:	1a84      	subs	r4, r0, r2
 8000956:	eb61 0103 	sbc.w	r1, r1, r3
 800095a:	2001      	movs	r0, #1
 800095c:	468c      	mov	ip, r1
 800095e:	2d00      	cmp	r5, #0
 8000960:	d0a8      	beq.n	80008b4 <__udivmoddi4+0xa0>
 8000962:	e9c5 4c00 	strd	r4, ip, [r5]
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000968:	f1c2 0320 	rsb	r3, r2, #32
 800096c:	fa20 f603 	lsr.w	r6, r0, r3
 8000970:	4097      	lsls	r7, r2
 8000972:	fa01 f002 	lsl.w	r0, r1, r2
 8000976:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800097a:	40d9      	lsrs	r1, r3
 800097c:	4330      	orrs	r0, r6
 800097e:	0c03      	lsrs	r3, r0, #16
 8000980:	fbb1 f6fe 	udiv	r6, r1, lr
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	fb0e 1116 	mls	r1, lr, r6, r1
 800098c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000990:	fb06 f108 	mul.w	r1, r6, r8
 8000994:	4299      	cmp	r1, r3
 8000996:	fa04 f402 	lsl.w	r4, r4, r2
 800099a:	d909      	bls.n	80009b0 <__udivmoddi4+0x19c>
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	f106 3cff 	add.w	ip, r6, #4294967295
 80009a2:	f080 808d 	bcs.w	8000ac0 <__udivmoddi4+0x2ac>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 808a 	bls.w	8000ac0 <__udivmoddi4+0x2ac>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	443b      	add	r3, r7
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b281      	uxth	r1, r0
 80009b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80009b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80009bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c0:	fb00 f308 	mul.w	r3, r0, r8
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x1c4>
 80009c8:	1879      	adds	r1, r7, r1
 80009ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80009ce:	d273      	bcs.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d971      	bls.n	8000ab8 <__udivmoddi4+0x2a4>
 80009d4:	3802      	subs	r0, #2
 80009d6:	4439      	add	r1, r7
 80009d8:	1acb      	subs	r3, r1, r3
 80009da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80009de:	e778      	b.n	80008d2 <__udivmoddi4+0xbe>
 80009e0:	f1c6 0c20 	rsb	ip, r6, #32
 80009e4:	fa03 f406 	lsl.w	r4, r3, r6
 80009e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80009ec:	431c      	orrs	r4, r3
 80009ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80009f2:	fa01 f306 	lsl.w	r3, r1, r6
 80009f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80009fe:	431f      	orrs	r7, r3
 8000a00:	0c3b      	lsrs	r3, r7, #16
 8000a02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a06:	fa1f f884 	uxth.w	r8, r4
 8000a0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a0e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a12:	fb09 fa08 	mul.w	sl, r9, r8
 8000a16:	458a      	cmp	sl, r1
 8000a18:	fa02 f206 	lsl.w	r2, r2, r6
 8000a1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x220>
 8000a22:	1861      	adds	r1, r4, r1
 8000a24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a28:	d248      	bcs.n	8000abc <__udivmoddi4+0x2a8>
 8000a2a:	458a      	cmp	sl, r1
 8000a2c:	d946      	bls.n	8000abc <__udivmoddi4+0x2a8>
 8000a2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a32:	4421      	add	r1, r4
 8000a34:	eba1 010a 	sub.w	r1, r1, sl
 8000a38:	b2bf      	uxth	r7, r7
 8000a3a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a3e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a42:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000a46:	fb00 f808 	mul.w	r8, r0, r8
 8000a4a:	45b8      	cmp	r8, r7
 8000a4c:	d907      	bls.n	8000a5e <__udivmoddi4+0x24a>
 8000a4e:	19e7      	adds	r7, r4, r7
 8000a50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a54:	d22e      	bcs.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a56:	45b8      	cmp	r8, r7
 8000a58:	d92c      	bls.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	4427      	add	r7, r4
 8000a5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a62:	eba7 0708 	sub.w	r7, r7, r8
 8000a66:	fba0 8902 	umull	r8, r9, r0, r2
 8000a6a:	454f      	cmp	r7, r9
 8000a6c:	46c6      	mov	lr, r8
 8000a6e:	4649      	mov	r1, r9
 8000a70:	d31a      	bcc.n	8000aa8 <__udivmoddi4+0x294>
 8000a72:	d017      	beq.n	8000aa4 <__udivmoddi4+0x290>
 8000a74:	b15d      	cbz	r5, 8000a8e <__udivmoddi4+0x27a>
 8000a76:	ebb3 020e 	subs.w	r2, r3, lr
 8000a7a:	eb67 0701 	sbc.w	r7, r7, r1
 8000a7e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a82:	40f2      	lsrs	r2, r6
 8000a84:	ea4c 0202 	orr.w	r2, ip, r2
 8000a88:	40f7      	lsrs	r7, r6
 8000a8a:	e9c5 2700 	strd	r2, r7, [r5]
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e70b      	b.n	80008b4 <__udivmoddi4+0xa0>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e9      	b.n	8000874 <__udivmoddi4+0x60>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6fd      	b.n	80008a0 <__udivmoddi4+0x8c>
 8000aa4:	4543      	cmp	r3, r8
 8000aa6:	d2e5      	bcs.n	8000a74 <__udivmoddi4+0x260>
 8000aa8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000aac:	eb69 0104 	sbc.w	r1, r9, r4
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7df      	b.n	8000a74 <__udivmoddi4+0x260>
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e7d2      	b.n	8000a5e <__udivmoddi4+0x24a>
 8000ab8:	4660      	mov	r0, ip
 8000aba:	e78d      	b.n	80009d8 <__udivmoddi4+0x1c4>
 8000abc:	4681      	mov	r9, r0
 8000abe:	e7b9      	b.n	8000a34 <__udivmoddi4+0x220>
 8000ac0:	4666      	mov	r6, ip
 8000ac2:	e775      	b.n	80009b0 <__udivmoddi4+0x19c>
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	e74a      	b.n	800095e <__udivmoddi4+0x14a>
 8000ac8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000acc:	4439      	add	r1, r7
 8000ace:	e713      	b.n	80008f8 <__udivmoddi4+0xe4>
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	443c      	add	r4, r7
 8000ad4:	e724      	b.n	8000920 <__udivmoddi4+0x10c>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2108      	movs	r1, #8
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <button_init+0x14>)
 8000ae6:	f002 fc21 	bl	800332c <HAL_GPIO_WritePin>
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <button_Scan>:

void button_Scan(){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2108      	movs	r1, #8
 8000afe:	482f      	ldr	r0, [pc, #188]	; (8000bbc <button_Scan+0xc8>)
 8000b00:	f002 fc14 	bl	800332c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000b04:	2201      	movs	r2, #1
 8000b06:	2108      	movs	r1, #8
 8000b08:	482c      	ldr	r0, [pc, #176]	; (8000bbc <button_Scan+0xc8>)
 8000b0a:	f002 fc0f 	bl	800332c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000b0e:	230a      	movs	r3, #10
 8000b10:	2202      	movs	r2, #2
 8000b12:	492b      	ldr	r1, [pc, #172]	; (8000bc0 <button_Scan+0xcc>)
 8000b14:	482b      	ldr	r0, [pc, #172]	; (8000bc4 <button_Scan+0xd0>)
 8000b16:	f003 fbba 	bl	800428e <HAL_SPI_Receive>
	  int button_index = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b22:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	e03f      	b.n	8000baa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db06      	blt.n	8000b3e <button_Scan+0x4a>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	dc03      	bgt.n	8000b3e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e018      	b.n	8000b70 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	dd07      	ble.n	8000b54 <button_Scan+0x60>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b07      	cmp	r3, #7
 8000b48:	dc04      	bgt.n	8000b54 <button_Scan+0x60>
			  button_index = 7 - i;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f1c3 0307 	rsb	r3, r3, #7
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	e00d      	b.n	8000b70 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	dd06      	ble.n	8000b68 <button_Scan+0x74>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0b      	cmp	r3, #11
 8000b5e:	dc03      	bgt.n	8000b68 <button_Scan+0x74>
			  button_index = i + 4;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3304      	adds	r3, #4
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e003      	b.n	8000b70 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f1c3 0317 	rsb	r3, r3, #23
 8000b6e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <button_Scan+0xcc>)
 8000b72:	881a      	ldrh	r2, [r3, #0]
 8000b74:	897b      	ldrh	r3, [r7, #10]
 8000b76:	4013      	ands	r3, r2
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <button_Scan+0x96>
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <button_Scan+0xd4>)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2100      	movs	r1, #0
 8000b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b88:	e009      	b.n	8000b9e <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <button_Scan+0xd4>)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b92:	3301      	adds	r3, #1
 8000b94:	b299      	uxth	r1, r3
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <button_Scan+0xd4>)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000b9e:	897b      	ldrh	r3, [r7, #10]
 8000ba0:	085b      	lsrs	r3, r3, #1
 8000ba2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	ddbc      	ble.n	8000b2a <button_Scan+0x36>
	  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40020c00 	.word	0x40020c00
 8000bc0:	2000003c 	.word	0x2000003c
 8000bc4:	20000164 	.word	0x20000164
 8000bc8:	20000064 	.word	0x20000064

08000bcc <drawTrafficLight>:
 */

#include "global.h"

void drawTrafficLight(int verti_Red, int verti_Green, int verti_Yellow, int hori_Red, int hori_Green, int hori_Yellow)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]
    lcd_Clear(WHITE);
 8000bda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000bde:	f000 ff63 	bl	8001aa8 <lcd_Clear>

    lcd_DrawCircle(120, 100, RED, 15, verti_Red);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	230f      	movs	r3, #15
 8000be8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bec:	2164      	movs	r1, #100	; 0x64
 8000bee:	2078      	movs	r0, #120	; 0x78
 8000bf0:	f001 fb25 	bl	800223e <lcd_DrawCircle>
    lcd_DrawCircle(50, 100, GREEN, 15, verti_Green);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bfe:	2164      	movs	r1, #100	; 0x64
 8000c00:	2032      	movs	r0, #50	; 0x32
 8000c02:	f001 fb1c 	bl	800223e <lcd_DrawCircle>
    lcd_DrawCircle(190, 100, YELLOW, 15, verti_Yellow);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c10:	2164      	movs	r1, #100	; 0x64
 8000c12:	20be      	movs	r0, #190	; 0xbe
 8000c14:	f001 fb13 	bl	800223e <lcd_DrawCircle>

    lcd_DrawCircle(50, 210, RED, 15, hori_Red);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c22:	21d2      	movs	r1, #210	; 0xd2
 8000c24:	2032      	movs	r0, #50	; 0x32
 8000c26:	f001 fb0a 	bl	800223e <lcd_DrawCircle>
    lcd_DrawCircle(50, 140, GREEN, 15, hori_Green);
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	230f      	movs	r3, #15
 8000c30:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000c34:	218c      	movs	r1, #140	; 0x8c
 8000c36:	2032      	movs	r0, #50	; 0x32
 8000c38:	f001 fb01 	bl	800223e <lcd_DrawCircle>
    lcd_DrawCircle(50, 280, YELLOW, 15, hori_Yellow);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	230f      	movs	r3, #15
 8000c42:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c46:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000c4a:	2032      	movs	r0, #50	; 0x32
 8000c4c:	f001 faf7 	bl	800223e <lcd_DrawCircle>
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <RedGreenLed>:

void RedGreenLed()	{	drawTrafficLight(1, 0, 0, 0, 1, 0);	}
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2301      	movs	r3, #1
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff ffad 	bl	8000bcc <drawTrafficLight>
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <RedYellowLed>:

void RedYellowLed()	{	drawTrafficLight(1, 0, 0, 0, 0, 1);	}
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	2301      	movs	r3, #1
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2300      	movs	r3, #0
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f7ff ff9d 	bl	8000bcc <drawTrafficLight>
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <GreenRedLed>:

void GreenRedLed()	{	drawTrafficLight(0, 1, 0, 1, 0, 0);	}
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2101      	movs	r1, #1
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff8d 	bl	8000bcc <drawTrafficLight>
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <YellowRedLed>:

void YellowRedLed()	{	drawTrafficLight(0, 0, 1, 1, 0, 0);	}
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2201      	movs	r2, #1
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ff7d 	bl	8000bcc <drawTrafficLight>
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <ManRedLed>:

void ManRedLed()	{	drawTrafficLight(1, 0, 0, 1, 0, 0);	}
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	2300      	movs	r3, #0
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff ff6d 	bl	8000bcc <drawTrafficLight>
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <ManGreenLed>:

void ManGreenLed()	{	drawTrafficLight(0, 1, 0, 0, 1, 0);	}
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	2300      	movs	r3, #0
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	2301      	movs	r3, #1
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2300      	movs	r3, #0
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff ff5d 	bl	8000bcc <drawTrafficLight>
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <ManYellowLed>:

void ManYellowLed(){drawTrafficLight(0, 0, 1, 0, 0, 1);}
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	2301      	movs	r3, #1
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff ff4d 	bl	8000bcc <drawTrafficLight>
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <increase>:

void increase()
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	timer++;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <increase+0x28>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3301      	adds	r3, #1
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <increase+0x28>)
 8000d44:	6013      	str	r3, [r2, #0]
	if(timer > 99)
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <increase+0x28>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b63      	cmp	r3, #99	; 0x63
 8000d4c:	dd02      	ble.n	8000d54 <increase+0x1c>
		timer = 1;
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <increase+0x28>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000048 	.word	0x20000048

08000d64 <balance>:

void balance(int newtimeRed, int newtimeGreen, int newtimeYellow)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
	if(newtimeRed > timeRed)
 8000d70:	4bac      	ldr	r3, [pc, #688]	; (8001024 <balance+0x2c0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dd53      	ble.n	8000e22 <balance+0xbe>
	{
		timeYellow	= round( ( (float)(timeYellow * 1.0f) * (float)( (newtimeRed * 1.0f) / (timeRed * 1.0f) ) ) );
 8000d7a:	4bab      	ldr	r3, [pc, #684]	; (8001028 <balance+0x2c4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	ee07 3a90 	vmov	s15, r3
 8000d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000d90:	4ba4      	ldr	r3, [pc, #656]	; (8001024 <balance+0x2c0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d9c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da4:	ee17 0a90 	vmov	r0, s15
 8000da8:	f7ff fc9c 	bl	80006e4 <__aeabi_f2d>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	ec43 2b10 	vmov	d0, r2, r3
 8000db4:	f005 fbd8 	bl	8006568 <round>
 8000db8:	ec53 2b10 	vmov	r2, r3, d0
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f7ff fce8 	bl	8000794 <__aeabi_d2iz>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a98      	ldr	r2, [pc, #608]	; (8001028 <balance+0x2c4>)
 8000dc8:	6013      	str	r3, [r2, #0]
		timeGreen	= round( ( (float)(timeGreen * 1.0f) * (float)( (newtimeRed * 1.0f) / (timeRed * 1.0f) ) ) );
 8000dca:	4b98      	ldr	r3, [pc, #608]	; (800102c <balance+0x2c8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	ee07 3a90 	vmov	s15, r3
 8000dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000de0:	4b90      	ldr	r3, [pc, #576]	; (8001024 <balance+0x2c0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dec:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000df4:	ee17 0a90 	vmov	r0, s15
 8000df8:	f7ff fc74 	bl	80006e4 <__aeabi_f2d>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	ec43 2b10 	vmov	d0, r2, r3
 8000e04:	f005 fbb0 	bl	8006568 <round>
 8000e08:	ec53 2b10 	vmov	r2, r3, d0
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f7ff fcc0 	bl	8000794 <__aeabi_d2iz>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4a85      	ldr	r2, [pc, #532]	; (800102c <balance+0x2c8>)
 8000e18:	6013      	str	r3, [r2, #0]
		timeRed		= newtimeRed;
 8000e1a:	4a82      	ldr	r2, [pc, #520]	; (8001024 <balance+0x2c0>)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6013      	str	r3, [r2, #0]
	{
		timeRed		= round( (float)(newtimeYellow * 1.0f) / (2 * 1.0f) ) * (float)(5 * 1.0f);
		timeGreen	= round( (float)(newtimeYellow * 1.0f) / (2 * 1.0f) ) * (float)(3 * 1.0f);
		timeYellow	= newtimeYellow;
	}
}
 8000e20:	e1a4      	b.n	800116c <balance+0x408>
	else if(newtimeGreen > timeGreen)
 8000e22:	4b82      	ldr	r3, [pc, #520]	; (800102c <balance+0x2c8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	dd53      	ble.n	8000ed4 <balance+0x170>
		timeRed		= round( ( (float)(timeRed * 1.0f) * (float)( (newtimeGreen * 1.0f) / (timeGreen * 1.0f) ) ) );
 8000e2c:	4b7d      	ldr	r3, [pc, #500]	; (8001024 <balance+0x2c0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	ee07 3a90 	vmov	s15, r3
 8000e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000e42:	4b7a      	ldr	r3, [pc, #488]	; (800102c <balance+0x2c8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	ee07 3a90 	vmov	s15, r3
 8000e4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e4e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e56:	ee17 0a90 	vmov	r0, s15
 8000e5a:	f7ff fc43 	bl	80006e4 <__aeabi_f2d>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	ec43 2b10 	vmov	d0, r2, r3
 8000e66:	f005 fb7f 	bl	8006568 <round>
 8000e6a:	ec53 2b10 	vmov	r2, r3, d0
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fc8f 	bl	8000794 <__aeabi_d2iz>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <balance+0x2c0>)
 8000e7a:	6013      	str	r3, [r2, #0]
		timeYellow	= round( ( (float)(timeYellow * 1.0f) * (float)( (newtimeGreen * 1.0f) / (timeGreen * 1.0f) ) ) );
 8000e7c:	4b6a      	ldr	r3, [pc, #424]	; (8001028 <balance+0x2c4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	ee07 3a90 	vmov	s15, r3
 8000e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000e92:	4b66      	ldr	r3, [pc, #408]	; (800102c <balance+0x2c8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e9e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea6:	ee17 0a90 	vmov	r0, s15
 8000eaa:	f7ff fc1b 	bl	80006e4 <__aeabi_f2d>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	ec43 2b10 	vmov	d0, r2, r3
 8000eb6:	f005 fb57 	bl	8006568 <round>
 8000eba:	ec53 2b10 	vmov	r2, r3, d0
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fc67 	bl	8000794 <__aeabi_d2iz>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a57      	ldr	r2, [pc, #348]	; (8001028 <balance+0x2c4>)
 8000eca:	6013      	str	r3, [r2, #0]
		timeGreen	= newtimeGreen;
 8000ecc:	4a57      	ldr	r2, [pc, #348]	; (800102c <balance+0x2c8>)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	e14b      	b.n	800116c <balance+0x408>
	else if(newtimeYellow > timeYellow)
 8000ed4:	4b54      	ldr	r3, [pc, #336]	; (8001028 <balance+0x2c4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dd53      	ble.n	8000f86 <balance+0x222>
		timeRed		= round( ( (float)(timeRed * 1.0f) * (float)( (newtimeYellow * 1.0f) / (timeYellow * 1.0f) ) ) ) ;
 8000ede:	4b51      	ldr	r3, [pc, #324]	; (8001024 <balance+0x2c0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	ee07 3a90 	vmov	s15, r3
 8000ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000ef4:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <balance+0x2c4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f00:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f08:	ee17 0a90 	vmov	r0, s15
 8000f0c:	f7ff fbea 	bl	80006e4 <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	ec43 2b10 	vmov	d0, r2, r3
 8000f18:	f005 fb26 	bl	8006568 <round>
 8000f1c:	ec53 2b10 	vmov	r2, r3, d0
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f7ff fc36 	bl	8000794 <__aeabi_d2iz>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <balance+0x2c0>)
 8000f2c:	6013      	str	r3, [r2, #0]
		timeGreen	= round( ( (float)(timeGreen * 1.0f) * (float)( (newtimeYellow * 1.0f) / (timeYellow * 1.0f) ) ) );
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <balance+0x2c8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <balance+0x2c4>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f50:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f58:	ee17 0a90 	vmov	r0, s15
 8000f5c:	f7ff fbc2 	bl	80006e4 <__aeabi_f2d>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	ec43 2b10 	vmov	d0, r2, r3
 8000f68:	f005 fafe 	bl	8006568 <round>
 8000f6c:	ec53 2b10 	vmov	r2, r3, d0
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fc0e 	bl	8000794 <__aeabi_d2iz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a2c      	ldr	r2, [pc, #176]	; (800102c <balance+0x2c8>)
 8000f7c:	6013      	str	r3, [r2, #0]
		timeYellow	= newtimeYellow;
 8000f7e:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <balance+0x2c4>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	e0f2      	b.n	800116c <balance+0x408>
	else if(newtimeRed < timeRed)
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <balance+0x2c0>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	da51      	bge.n	8001034 <balance+0x2d0>
		timeYellow	= round( (float)(newtimeRed * 1.0f) / (5 * 1.0f) ) * (float)(2 * 1.0f);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fa2:	ee16 0a90 	vmov	r0, s13
 8000fa6:	f7ff fb9d 	bl	80006e4 <__aeabi_f2d>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	ec43 2b10 	vmov	d0, r2, r3
 8000fb2:	f005 fad9 	bl	8006568 <round>
 8000fb6:	ec51 0b10 	vmov	r0, r1, d0
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	f7ff fa33 	bl	8000428 <__adddf3>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fbe3 	bl	8000794 <__aeabi_d2iz>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <balance+0x2c4>)
 8000fd2:	6013      	str	r3, [r2, #0]
		timeGreen	= round( (float)(newtimeRed * 1.0f) / (5 * 1.0f) ) * (float)(3 * 1.0f);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fde:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000fe2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fe6:	ee16 0a90 	vmov	r0, s13
 8000fea:	f7ff fb7b 	bl	80006e4 <__aeabi_f2d>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	ec43 2b10 	vmov	d0, r2, r3
 8000ff6:	f005 fab7 	bl	8006568 <round>
 8000ffa:	ec51 0b10 	vmov	r0, r1, d0
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <balance+0x2cc>)
 8001004:	f7ff f8e0 	bl	80001c8 <__aeabi_dmul>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fbc0 	bl	8000794 <__aeabi_d2iz>
 8001014:	4603      	mov	r3, r0
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <balance+0x2c8>)
 8001018:	6013      	str	r3, [r2, #0]
		timeRed		= newtimeRed;
 800101a:	4a02      	ldr	r2, [pc, #8]	; (8001024 <balance+0x2c0>)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	e0a4      	b.n	800116c <balance+0x408>
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000
 8001028:	20000004 	.word	0x20000004
 800102c:	20000008 	.word	0x20000008
 8001030:	40080000 	.word	0x40080000
	else if(newtimeGreen < timeGreen)
 8001034:	4b4f      	ldr	r3, [pc, #316]	; (8001174 <balance+0x410>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	429a      	cmp	r2, r3
 800103c:	da48      	bge.n	80010d0 <balance+0x36c>
		timeRed		= round( (float)(newtimeGreen * 1.0f) / (3 * 1.0f) ) * (float)(5 * 1.0f);
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001048:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800104c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001050:	ee16 0a90 	vmov	r0, s13
 8001054:	f7ff fb46 	bl	80006e4 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	ec43 2b10 	vmov	d0, r2, r3
 8001060:	f005 fa82 	bl	8006568 <round>
 8001064:	ec51 0b10 	vmov	r0, r1, d0
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b42      	ldr	r3, [pc, #264]	; (8001178 <balance+0x414>)
 800106e:	f7ff f8ab 	bl	80001c8 <__aeabi_dmul>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fb8b 	bl	8000794 <__aeabi_d2iz>
 800107e:	4603      	mov	r3, r0
 8001080:	4a3e      	ldr	r2, [pc, #248]	; (800117c <balance+0x418>)
 8001082:	6013      	str	r3, [r2, #0]
		timeYellow	= round( (float)(newtimeGreen * 1.0f) / (3 * 1.0f) ) * (float)(2 * 1.0f);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001092:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001096:	ee16 0a90 	vmov	r0, s13
 800109a:	f7ff fb23 	bl	80006e4 <__aeabi_f2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	ec43 2b10 	vmov	d0, r2, r3
 80010a6:	f005 fa5f 	bl	8006568 <round>
 80010aa:	ec51 0b10 	vmov	r0, r1, d0
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	f7ff f9b9 	bl	8000428 <__adddf3>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fb69 	bl	8000794 <__aeabi_d2iz>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a2e      	ldr	r2, [pc, #184]	; (8001180 <balance+0x41c>)
 80010c6:	6013      	str	r3, [r2, #0]
		timeGreen	= newtimeGreen;
 80010c8:	4a2a      	ldr	r2, [pc, #168]	; (8001174 <balance+0x410>)
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	6013      	str	r3, [r2, #0]
}
 80010ce:	e04d      	b.n	800116c <balance+0x408>
	else if(newtimeYellow < timeYellow)
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <balance+0x41c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	da48      	bge.n	800116c <balance+0x408>
		timeRed		= round( (float)(newtimeYellow * 1.0f) / (2 * 1.0f) ) * (float)(5 * 1.0f);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80010e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ec:	ee16 0a90 	vmov	r0, s13
 80010f0:	f7ff faf8 	bl	80006e4 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	ec43 2b10 	vmov	d0, r2, r3
 80010fc:	f005 fa34 	bl	8006568 <round>
 8001100:	ec51 0b10 	vmov	r0, r1, d0
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <balance+0x414>)
 800110a:	f7ff f85d 	bl	80001c8 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	f7ff fb3d 	bl	8000794 <__aeabi_d2iz>
 800111a:	4603      	mov	r3, r0
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <balance+0x418>)
 800111e:	6013      	str	r3, [r2, #0]
		timeGreen	= round( (float)(newtimeYellow * 1.0f) / (2 * 1.0f) ) * (float)(3 * 1.0f);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800112e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001132:	ee16 0a90 	vmov	r0, s13
 8001136:	f7ff fad5 	bl	80006e4 <__aeabi_f2d>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	ec43 2b10 	vmov	d0, r2, r3
 8001142:	f005 fa11 	bl	8006568 <round>
 8001146:	ec51 0b10 	vmov	r0, r1, d0
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <balance+0x420>)
 8001150:	f7ff f83a 	bl	80001c8 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fb1a 	bl	8000794 <__aeabi_d2iz>
 8001160:	4603      	mov	r3, r0
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <balance+0x410>)
 8001164:	6013      	str	r3, [r2, #0]
		timeYellow	= newtimeYellow;
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <balance+0x41c>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000008 	.word	0x20000008
 8001178:	40140000 	.word	0x40140000
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004
 8001184:	40080000 	.word	0x40080000

08001188 <Blink>:

void Blink()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af02      	add	r7, sp, #8
    switch (mode)
 800118e:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <Blink+0x80>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b07      	cmp	r3, #7
 8001194:	d013      	beq.n	80011be <Blink+0x36>
 8001196:	2b07      	cmp	r3, #7
 8001198:	dc2b      	bgt.n	80011f2 <Blink+0x6a>
 800119a:	2b05      	cmp	r3, #5
 800119c:	d002      	beq.n	80011a4 <Blink+0x1c>
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d01a      	beq.n	80011d8 <Blink+0x50>
        case ManYellow:
            drawTrafficLight(0, 0, blinkstate, 0, 0, blinkstate);
            break;

        default:
            break;
 80011a2:	e026      	b.n	80011f2 <Blink+0x6a>
            drawTrafficLight(blinkstate, 0, 0, blinkstate, 0, 0);
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <Blink+0x84>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <Blink+0x84>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	f7ff fd08 	bl	8000bcc <drawTrafficLight>
            break;
 80011bc:	e01a      	b.n	80011f4 <Blink+0x6c>
            drawTrafficLight(0, blinkstate, 0, 0, blinkstate, 0);
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <Blink+0x84>)
 80011c0:	6819      	ldr	r1, [r3, #0]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <Blink+0x84>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2200      	movs	r2, #0
 80011c8:	9201      	str	r2, [sp, #4]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2300      	movs	r3, #0
 80011ce:	2200      	movs	r2, #0
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fcfb 	bl	8000bcc <drawTrafficLight>
            break;
 80011d6:	e00d      	b.n	80011f4 <Blink+0x6c>
            drawTrafficLight(0, 0, blinkstate, 0, 0, blinkstate);
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <Blink+0x84>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <Blink+0x84>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff fcee 	bl	8000bcc <drawTrafficLight>
            break;
 80011f0:	e000      	b.n	80011f4 <Blink+0x6c>
            break;
 80011f2:	bf00      	nop
    }
    blinkstate ^= 1;
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <Blink+0x84>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f083 0301 	eor.w	r3, r3, #1
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <Blink+0x84>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000044 	.word	0x20000044
 800120c:	2000004c 	.word	0x2000004c

08001210 <switchManualMode>:

void switchManualMode(int LEDmode, void (*LEDdisplayfunc)())
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	setTimer1(500);
 800121a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121e:	f001 f9f9 	bl	8002614 <setTimer1>
	mode = LEDmode;
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <switchManualMode+0x2c>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6013      	str	r3, [r2, #0]
	blinkstate = 0;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <switchManualMode+0x30>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	LEDdisplayfunc();
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	4798      	blx	r3
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000044 	.word	0x20000044
 8001240:	2000004c 	.word	0x2000004c

08001244 <displayTime>:

void displayTime()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(20, 30, timer, 2, WHITE, BLACK, 16);
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <displayTime+0x2c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	2310      	movs	r3, #16
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	2300      	movs	r3, #0
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2302      	movs	r3, #2
 8001260:	211e      	movs	r1, #30
 8001262:	2014      	movs	r0, #20
 8001264:	f000 fd5e 	bl	8001d24 <lcd_ShowIntNum>
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000048 	.word	0x20000048

08001274 <fsm_mode>:

void fsm_mode()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	switch(mode)
 8001278:	4ba3      	ldr	r3, [pc, #652]	; (8001508 <fsm_mode+0x294>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b07      	cmp	r3, #7
 800127e:	f200 8130 	bhi.w	80014e2 <fsm_mode+0x26e>
 8001282:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <fsm_mode+0x14>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	080012a9 	.word	0x080012a9
 800128c:	080012c5 	.word	0x080012c5
 8001290:	08001309 	.word	0x08001309
 8001294:	08001349 	.word	0x08001349
 8001298:	0800138d 	.word	0x0800138d
 800129c:	080013d5 	.word	0x080013d5
 80012a0:	0800147d 	.word	0x0800147d
 80012a4:	08001429 	.word	0x08001429
	{
		case ModeInit:
			setTimer1(500);
 80012a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ac:	f001 f9b2 	bl	8002614 <setTimer1>
			timer = timeRed;
 80012b0:	4b96      	ldr	r3, [pc, #600]	; (800150c <fsm_mode+0x298>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a96      	ldr	r2, [pc, #600]	; (8001510 <fsm_mode+0x29c>)
 80012b6:	6013      	str	r3, [r2, #0]
			mode = RedGreen;
 80012b8:	4b93      	ldr	r3, [pc, #588]	; (8001508 <fsm_mode+0x294>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
			RedGreenLed();
 80012be:	f7ff fccb 	bl	8000c58 <RedGreenLed>
			break;
 80012c2:	e11d      	b.n	8001500 <fsm_mode+0x28c>
		case RedGreen:
			if(flag_timer1 == 1)
 80012c4:	4b93      	ldr	r3, [pc, #588]	; (8001514 <fsm_mode+0x2a0>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d113      	bne.n	80012f4 <fsm_mode+0x80>
			{
				setTimer1(500);
 80012cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d0:	f001 f9a0 	bl	8002614 <setTimer1>
				timer--;
 80012d4:	4b8e      	ldr	r3, [pc, #568]	; (8001510 <fsm_mode+0x29c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3b01      	subs	r3, #1
 80012da:	4a8d      	ldr	r2, [pc, #564]	; (8001510 <fsm_mode+0x29c>)
 80012dc:	6013      	str	r3, [r2, #0]
				if(timer <= timeYellow)
 80012de:	4b8c      	ldr	r3, [pc, #560]	; (8001510 <fsm_mode+0x29c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b8d      	ldr	r3, [pc, #564]	; (8001518 <fsm_mode+0x2a4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dc04      	bgt.n	80012f4 <fsm_mode+0x80>
				{
					mode = RedYellow;
 80012ea:	4b87      	ldr	r3, [pc, #540]	; (8001508 <fsm_mode+0x294>)
 80012ec:	2202      	movs	r2, #2
 80012ee:	601a      	str	r2, [r3, #0]
					RedYellowLed();
 80012f0:	f7ff fcc2 	bl	8000c78 <RedYellowLed>
				}
			}
			if(button_count[0] != 0)
 80012f4:	4b89      	ldr	r3, [pc, #548]	; (800151c <fsm_mode+0x2a8>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80f4 	beq.w	80014e6 <fsm_mode+0x272>
				switchManualMode(ManRed, ManRedLed);
 80012fe:	4988      	ldr	r1, [pc, #544]	; (8001520 <fsm_mode+0x2ac>)
 8001300:	2005      	movs	r0, #5
 8001302:	f7ff ff85 	bl	8001210 <switchManualMode>
			break;
 8001306:	e0ee      	b.n	80014e6 <fsm_mode+0x272>
		case RedYellow:
			if(flag_timer1 == 1)
 8001308:	4b82      	ldr	r3, [pc, #520]	; (8001514 <fsm_mode+0x2a0>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d111      	bne.n	8001334 <fsm_mode+0xc0>
			{
				setTimer1(500);
 8001310:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001314:	f001 f97e 	bl	8002614 <setTimer1>
				timer--;
 8001318:	4b7d      	ldr	r3, [pc, #500]	; (8001510 <fsm_mode+0x29c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a7c      	ldr	r2, [pc, #496]	; (8001510 <fsm_mode+0x29c>)
 8001320:	6013      	str	r3, [r2, #0]
				if(timer <= 0)
 8001322:	4b7b      	ldr	r3, [pc, #492]	; (8001510 <fsm_mode+0x29c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	dc04      	bgt.n	8001334 <fsm_mode+0xc0>
				{
					mode = GreenRed;
 800132a:	4b77      	ldr	r3, [pc, #476]	; (8001508 <fsm_mode+0x294>)
 800132c:	2203      	movs	r2, #3
 800132e:	601a      	str	r2, [r3, #0]
					GreenRedLed();
 8001330:	f7ff fcb2 	bl	8000c98 <GreenRedLed>
				}
			}
			if(button_count[0] != 0)
 8001334:	4b79      	ldr	r3, [pc, #484]	; (800151c <fsm_mode+0x2a8>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80d6 	beq.w	80014ea <fsm_mode+0x276>
				switchManualMode(ManRed, ManRedLed);
 800133e:	4978      	ldr	r1, [pc, #480]	; (8001520 <fsm_mode+0x2ac>)
 8001340:	2005      	movs	r0, #5
 8001342:	f7ff ff65 	bl	8001210 <switchManualMode>
			break;
 8001346:	e0d0      	b.n	80014ea <fsm_mode+0x276>
		case GreenRed:
			if(flag_timer1 == 1)
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <fsm_mode+0x2a0>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d113      	bne.n	8001378 <fsm_mode+0x104>
			{
				setTimer1(500);
 8001350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001354:	f001 f95e 	bl	8002614 <setTimer1>
				timer--;
 8001358:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <fsm_mode+0x29c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3b01      	subs	r3, #1
 800135e:	4a6c      	ldr	r2, [pc, #432]	; (8001510 <fsm_mode+0x29c>)
 8001360:	6013      	str	r3, [r2, #0]
				if(timer <= timeYellow)
 8001362:	4b6b      	ldr	r3, [pc, #428]	; (8001510 <fsm_mode+0x29c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <fsm_mode+0x2a4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	dc04      	bgt.n	8001378 <fsm_mode+0x104>
				{
					mode = YellowRed;
 800136e:	4b66      	ldr	r3, [pc, #408]	; (8001508 <fsm_mode+0x294>)
 8001370:	2204      	movs	r2, #4
 8001372:	601a      	str	r2, [r3, #0]
					YellowRedLed();
 8001374:	f7ff fca0 	bl	8000cb8 <YellowRedLed>
				}
			}
			if(button_count[0] != 0)
 8001378:	4b68      	ldr	r3, [pc, #416]	; (800151c <fsm_mode+0x2a8>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80b6 	beq.w	80014ee <fsm_mode+0x27a>
				switchManualMode(ManRed, ManRedLed);
 8001382:	4967      	ldr	r1, [pc, #412]	; (8001520 <fsm_mode+0x2ac>)
 8001384:	2005      	movs	r0, #5
 8001386:	f7ff ff43 	bl	8001210 <switchManualMode>
			break;
 800138a:	e0b0      	b.n	80014ee <fsm_mode+0x27a>
		case YellowRed:
			if(flag_timer1 == 1)
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <fsm_mode+0x2a0>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d115      	bne.n	80013c0 <fsm_mode+0x14c>
			{
				setTimer1(500);
 8001394:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001398:	f001 f93c 	bl	8002614 <setTimer1>
				timer--;
 800139c:	4b5c      	ldr	r3, [pc, #368]	; (8001510 <fsm_mode+0x29c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <fsm_mode+0x29c>)
 80013a4:	6013      	str	r3, [r2, #0]
				if(timer <= 0)
 80013a6:	4b5a      	ldr	r3, [pc, #360]	; (8001510 <fsm_mode+0x29c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dc08      	bgt.n	80013c0 <fsm_mode+0x14c>
				{
					mode = RedGreen;
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <fsm_mode+0x294>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	601a      	str	r2, [r3, #0]
					timer = timeRed;
 80013b4:	4b55      	ldr	r3, [pc, #340]	; (800150c <fsm_mode+0x298>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a55      	ldr	r2, [pc, #340]	; (8001510 <fsm_mode+0x29c>)
 80013ba:	6013      	str	r3, [r2, #0]
					RedGreenLed();
 80013bc:	f7ff fc4c 	bl	8000c58 <RedGreenLed>
				}
			}
			if(button_count[0] != 0)
 80013c0:	4b56      	ldr	r3, [pc, #344]	; (800151c <fsm_mode+0x2a8>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8094 	beq.w	80014f2 <fsm_mode+0x27e>
				switchManualMode(ManRed, ManRedLed);
 80013ca:	4955      	ldr	r1, [pc, #340]	; (8001520 <fsm_mode+0x2ac>)
 80013cc:	2005      	movs	r0, #5
 80013ce:	f7ff ff1f 	bl	8001210 <switchManualMode>
			break;
 80013d2:	e08e      	b.n	80014f2 <fsm_mode+0x27e>
		case ManRed:
			timer = timeRed;
 80013d4:	4b4d      	ldr	r3, [pc, #308]	; (800150c <fsm_mode+0x298>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a4d      	ldr	r2, [pc, #308]	; (8001510 <fsm_mode+0x29c>)
 80013da:	6013      	str	r3, [r2, #0]
			if(flag_timer1 == 1)
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <fsm_mode+0x2a0>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d105      	bne.n	80013f0 <fsm_mode+0x17c>
			{
				setTimer1(500);
 80013e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013e8:	f001 f914 	bl	8002614 <setTimer1>
				Blink();
 80013ec:	f7ff fecc 	bl	8001188 <Blink>
			}
			if(button_count[0] != 0)
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <fsm_mode+0x2a8>)
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <fsm_mode+0x18c>
				switchManualMode(ManGreen, ManGreenLed);
 80013f8:	494a      	ldr	r1, [pc, #296]	; (8001524 <fsm_mode+0x2b0>)
 80013fa:	2007      	movs	r0, #7
 80013fc:	f7ff ff08 	bl	8001210 <switchManualMode>
			if(button_count[1] != 0)
 8001400:	4b46      	ldr	r3, [pc, #280]	; (800151c <fsm_mode+0x2a8>)
 8001402:	885b      	ldrh	r3, [r3, #2]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <fsm_mode+0x198>
				increase();
 8001408:	f7ff fc96 	bl	8000d38 <increase>
			if(button_count[2] != 0)
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <fsm_mode+0x2a8>)
 800140e:	889b      	ldrh	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d070      	beq.n	80014f6 <fsm_mode+0x282>
				balance(timer, timeGreen, timeYellow);
 8001414:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <fsm_mode+0x29c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a43      	ldr	r2, [pc, #268]	; (8001528 <fsm_mode+0x2b4>)
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	4a3e      	ldr	r2, [pc, #248]	; (8001518 <fsm_mode+0x2a4>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fc9f 	bl	8000d64 <balance>
			break;
 8001426:	e066      	b.n	80014f6 <fsm_mode+0x282>
		case ManGreen:
			timer = timeGreen;
 8001428:	4b3f      	ldr	r3, [pc, #252]	; (8001528 <fsm_mode+0x2b4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a38      	ldr	r2, [pc, #224]	; (8001510 <fsm_mode+0x29c>)
 800142e:	6013      	str	r3, [r2, #0]
			if(flag_timer1 == 1)
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <fsm_mode+0x2a0>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <fsm_mode+0x1d0>
			{
				setTimer1(500);
 8001438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143c:	f001 f8ea 	bl	8002614 <setTimer1>
				Blink();
 8001440:	f7ff fea2 	bl	8001188 <Blink>
			}
			if(button_count[0] != 0)
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <fsm_mode+0x2a8>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <fsm_mode+0x1e0>
				switchManualMode(ManYellow, ManYellowLed);
 800144c:	4937      	ldr	r1, [pc, #220]	; (800152c <fsm_mode+0x2b8>)
 800144e:	2006      	movs	r0, #6
 8001450:	f7ff fede 	bl	8001210 <switchManualMode>
			if(button_count[1] != 0)
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <fsm_mode+0x2a8>)
 8001456:	885b      	ldrh	r3, [r3, #2]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <fsm_mode+0x1ec>
				increase();
 800145c:	f7ff fc6c 	bl	8000d38 <increase>
			if(button_count[2] != 0)
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <fsm_mode+0x2a8>)
 8001462:	889b      	ldrh	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d048      	beq.n	80014fa <fsm_mode+0x286>
				balance(timeRed, timer, timeYellow);
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <fsm_mode+0x298>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <fsm_mode+0x29c>)
 800146e:	6811      	ldr	r1, [r2, #0]
 8001470:	4a29      	ldr	r2, [pc, #164]	; (8001518 <fsm_mode+0x2a4>)
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc75 	bl	8000d64 <balance>
			break;
 800147a:	e03e      	b.n	80014fa <fsm_mode+0x286>
		case ManYellow:
			timer = timeYellow;
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <fsm_mode+0x2a4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a23      	ldr	r2, [pc, #140]	; (8001510 <fsm_mode+0x29c>)
 8001482:	6013      	str	r3, [r2, #0]
			if(flag_timer1 == 1)
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <fsm_mode+0x2a0>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <fsm_mode+0x224>
			{
				setTimer1(500);
 800148c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001490:	f001 f8c0 	bl	8002614 <setTimer1>
				Blink();
 8001494:	f7ff fe78 	bl	8001188 <Blink>
			}
			if(button_count[0] != 0)
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <fsm_mode+0x2a8>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <fsm_mode+0x246>
			{
				setTimer1(500);
 80014a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a4:	f001 f8b6 	bl	8002614 <setTimer1>
				mode = RedGreen;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <fsm_mode+0x294>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
				timer = timeRed;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <fsm_mode+0x298>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <fsm_mode+0x29c>)
 80014b4:	6013      	str	r3, [r2, #0]
				RedGreenLed();
 80014b6:	f7ff fbcf 	bl	8000c58 <RedGreenLed>
			}
			if(button_count[1] != 0)
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <fsm_mode+0x2a8>)
 80014bc:	885b      	ldrh	r3, [r3, #2]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <fsm_mode+0x252>
				increase();
 80014c2:	f7ff fc39 	bl	8000d38 <increase>
			if(button_count[2] != 0)
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <fsm_mode+0x2a8>)
 80014c8:	889b      	ldrh	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d017      	beq.n	80014fe <fsm_mode+0x28a>
				balance(timeRed, timeGreen, timer);
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <fsm_mode+0x298>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <fsm_mode+0x2b4>)
 80014d4:	6811      	ldr	r1, [r2, #0]
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <fsm_mode+0x29c>)
 80014d8:	6812      	ldr	r2, [r2, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fc42 	bl	8000d64 <balance>
			break;
 80014e0:	e00d      	b.n	80014fe <fsm_mode+0x28a>

		default:
			break;
 80014e2:	bf00      	nop
 80014e4:	e00c      	b.n	8001500 <fsm_mode+0x28c>
			break;
 80014e6:	bf00      	nop
 80014e8:	e00a      	b.n	8001500 <fsm_mode+0x28c>
			break;
 80014ea:	bf00      	nop
 80014ec:	e008      	b.n	8001500 <fsm_mode+0x28c>
			break;
 80014ee:	bf00      	nop
 80014f0:	e006      	b.n	8001500 <fsm_mode+0x28c>
			break;
 80014f2:	bf00      	nop
 80014f4:	e004      	b.n	8001500 <fsm_mode+0x28c>
			break;
 80014f6:	bf00      	nop
 80014f8:	e002      	b.n	8001500 <fsm_mode+0x28c>
			break;
 80014fa:	bf00      	nop
 80014fc:	e000      	b.n	8001500 <fsm_mode+0x28c>
			break;
 80014fe:	bf00      	nop
	}
	displayTime();
 8001500:	f7ff fea0 	bl	8001244 <displayTime>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000044 	.word	0x20000044
 800150c:	20000000 	.word	0x20000000
 8001510:	20000048 	.word	0x20000048
 8001514:	20000056 	.word	0x20000056
 8001518:	20000004 	.word	0x20000004
 800151c:	20000064 	.word	0x20000064
 8001520:	08000cd9 	.word	0x08000cd9
 8001524:	08000cf9 	.word	0x08000cf9
 8001528:	20000008 	.word	0x20000008
 800152c:	08000d19 	.word	0x08000d19

08001530 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <MX_FSMC_Init+0xec>)
 800155e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001562:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MX_FSMC_Init+0xec>)
 8001566:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <MX_FSMC_Init+0xf0>)
 8001568:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <MX_FSMC_Init+0xec>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <MX_FSMC_Init+0xec>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_FSMC_Init+0xec>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_FSMC_Init+0xec>)
 800157e:	2210      	movs	r2, #16
 8001580:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_FSMC_Init+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_FSMC_Init+0xec>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <MX_FSMC_Init+0xec>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_FSMC_Init+0xec>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_FSMC_Init+0xec>)
 800159c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_FSMC_Init+0xec>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_FSMC_Init+0xec>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_FSMC_Init+0xec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_FSMC_Init+0xec>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_FSMC_Init+0xec>)
 80015be:	2200      	movs	r2, #0
 80015c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80015c2:	230f      	movs	r3, #15
 80015c4:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80015c6:	230f      	movs	r3, #15
 80015c8:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80015ca:	233c      	movs	r3, #60	; 0x3c
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80015d2:	2310      	movs	r3, #16
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80015d6:	2311      	movs	r3, #17
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80015de:	2308      	movs	r3, #8
 80015e0:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80015e2:	230f      	movs	r3, #15
 80015e4:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80015e6:	2309      	movs	r3, #9
 80015e8:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80015ee:	2310      	movs	r3, #16
 80015f0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80015f2:	2311      	movs	r3, #17
 80015f4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80015fa:	463a      	mov	r2, r7
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_FSMC_Init+0xec>)
 8001604:	f003 fa26 	bl	8004a54 <HAL_SRAM_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800160e:	f000 fff1 	bl	80025f4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001612:	bf00      	nop
 8001614:	3738      	adds	r7, #56	; 0x38
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000084 	.word	0x20000084
 8001620:	a0000104 	.word	0xa0000104

08001624 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_FSMC_MspInit+0x88>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d131      	bne.n	80016a4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <HAL_FSMC_MspInit+0x88>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_FSMC_MspInit+0x8c>)
 800164c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <HAL_FSMC_MspInit+0x8c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6393      	str	r3, [r2, #56]	; 0x38
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_FSMC_MspInit+0x8c>)
 8001658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001662:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001666:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001674:	230c      	movs	r3, #12
 8001676:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4619      	mov	r1, r3
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <HAL_FSMC_MspInit+0x90>)
 800167e:	f001 fcb9 	bl	8002ff4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001682:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001686:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001694:	230c      	movs	r3, #12
 8001696:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <HAL_FSMC_MspInit+0x94>)
 800169e:	f001 fca9 	bl	8002ff4 <HAL_GPIO_Init>
 80016a2:	e000      	b.n	80016a6 <HAL_FSMC_MspInit+0x82>
    return;
 80016a4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000040 	.word	0x20000040
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40020c00 	.word	0x40020c00

080016bc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016c4:	f7ff ffae 	bl	8001624 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a67      	ldr	r2, [pc, #412]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a60      	ldr	r2, [pc, #384]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b5a      	ldr	r3, [pc, #360]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a59      	ldr	r2, [pc, #356]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b57      	ldr	r3, [pc, #348]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b53      	ldr	r3, [pc, #332]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a52      	ldr	r2, [pc, #328]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001760:	f043 0308 	orr.w	r3, r3, #8
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b50      	ldr	r3, [pc, #320]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a4b      	ldr	r2, [pc, #300]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 800177c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	603b      	str	r3, [r7, #0]
 8001792:	4b45      	ldr	r3, [pc, #276]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a44      	ldr	r2, [pc, #272]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <MX_GPIO_Init+0x1d8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2170      	movs	r1, #112	; 0x70
 80017ae:	483f      	ldr	r0, [pc, #252]	; (80018ac <MX_GPIO_Init+0x1dc>)
 80017b0:	f001 fdbc 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ba:	483d      	ldr	r0, [pc, #244]	; (80018b0 <MX_GPIO_Init+0x1e0>)
 80017bc:	f001 fdb6 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2140      	movs	r1, #64	; 0x40
 80017c4:	483b      	ldr	r0, [pc, #236]	; (80018b4 <MX_GPIO_Init+0x1e4>)
 80017c6:	f001 fdb1 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	4839      	ldr	r0, [pc, #228]	; (80018b8 <MX_GPIO_Init+0x1e8>)
 80017d2:	f001 fdab 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2108      	movs	r1, #8
 80017da:	4838      	ldr	r0, [pc, #224]	; (80018bc <MX_GPIO_Init+0x1ec>)
 80017dc:	f001 fda6 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80017e0:	2370      	movs	r3, #112	; 0x70
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	482d      	ldr	r0, [pc, #180]	; (80018ac <MX_GPIO_Init+0x1dc>)
 80017f8:	f001 fbfc 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80017fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	4826      	ldr	r0, [pc, #152]	; (80018b0 <MX_GPIO_Init+0x1e0>)
 8001816:	f001 fbed 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800181a:	23c0      	movs	r3, #192	; 0xc0
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 031c 	add.w	r3, r7, #28
 800182a:	4619      	mov	r1, r3
 800182c:	4822      	ldr	r0, [pc, #136]	; (80018b8 <MX_GPIO_Init+0x1e8>)
 800182e:	f001 fbe1 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001832:	2330      	movs	r3, #48	; 0x30
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	481a      	ldr	r0, [pc, #104]	; (80018b0 <MX_GPIO_Init+0x1e0>)
 8001846:	f001 fbd5 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800184a:	2340      	movs	r3, #64	; 0x40
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4814      	ldr	r0, [pc, #80]	; (80018b4 <MX_GPIO_Init+0x1e4>)
 8001862:	f001 fbc7 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	480e      	ldr	r0, [pc, #56]	; (80018b8 <MX_GPIO_Init+0x1e8>)
 8001880:	f001 fbb8 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001884:	2308      	movs	r3, #8
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <MX_GPIO_Init+0x1ec>)
 800189c:	f001 fbaa 	bl	8002ff4 <HAL_GPIO_Init>

}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40020800 	.word	0x40020800
 80018b4:	40021800 	.word	0x40021800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020c00 	.word	0x40020c00

080018c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C1_Init+0x50>)
 80018c6:	4a13      	ldr	r2, [pc, #76]	; (8001914 <MX_I2C1_Init+0x54>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_I2C1_Init+0x50>)
 80018cc:	4a12      	ldr	r2, [pc, #72]	; (8001918 <MX_I2C1_Init+0x58>)
 80018ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_I2C1_Init+0x50>)
 80018de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_I2C1_Init+0x50>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_I2C1_Init+0x50>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_I2C1_Init+0x50>)
 80018fe:	f001 fd49 	bl	8003394 <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 fe74 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200000d4 	.word	0x200000d4
 8001914:	40005400 	.word	0x40005400
 8001918:	000186a0 	.word	0x000186a0

0800191c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_I2C_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	2312      	movs	r3, #18
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800196a:	2304      	movs	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <HAL_I2C_MspInit+0x8c>)
 8001976:	f001 fb3d 	bl	8002ff4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 8001984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_I2C_MspInit+0x88>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <LCD_WR_REG+0x1c>)
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	8013      	strh	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	600ffffe 	.word	0x600ffffe

080019cc <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <LCD_WR_DATA+0x1c>)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	8053      	strh	r3, [r2, #2]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	600ffffe 	.word	0x600ffffe

080019ec <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <LCD_RD_DATA+0x20>)
 80019f4:	885b      	ldrh	r3, [r3, #2]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	80fb      	strh	r3, [r7, #6]
	return ram;
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	b29b      	uxth	r3, r3
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	600ffffe 	.word	0x600ffffe

08001a10 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	80fb      	strh	r3, [r7, #6]
 8001a22:	4603      	mov	r3, r0
 8001a24:	80bb      	strh	r3, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001a2e:	202a      	movs	r0, #42	; 0x2a
 8001a30:	f7ff ffbc 	bl	80019ac <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ffc6 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffc0 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001a4c:	887b      	ldrh	r3, [r7, #2]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ffba 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ffb4 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001a64:	202b      	movs	r0, #43	; 0x2b
 8001a66:	f7ff ffa1 	bl	80019ac <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ffab 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001a76:	88bb      	ldrh	r3, [r7, #4]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ffa5 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001a82:	883b      	ldrh	r3, [r7, #0]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff9f 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001a8e:	883b      	ldrh	r3, [r7, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff99 	bl	80019cc <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001a9a:	202c      	movs	r0, #44	; 0x2c
 8001a9c:	f7ff ff86 	bl	80019ac <LCD_WR_REG>
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd90      	pop	{r4, r7, pc}

08001aa8 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <lcd_Clear+0x70>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <lcd_Clear+0x70>)
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff ff9b 	bl	8001a10 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	81fb      	strh	r3, [r7, #14]
 8001ade:	e011      	b.n	8001b04 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	81bb      	strh	r3, [r7, #12]
 8001ae4:	e006      	b.n	8001af4 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff6f 	bl	80019cc <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001aee:	89bb      	ldrh	r3, [r7, #12]
 8001af0:	3301      	adds	r3, #1
 8001af2:	81bb      	strh	r3, [r7, #12]
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <lcd_Clear+0x70>)
 8001af6:	885b      	ldrh	r3, [r3, #2]
 8001af8:	89ba      	ldrh	r2, [r7, #12]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d3f3      	bcc.n	8001ae6 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	3301      	adds	r3, #1
 8001b02:	81fb      	strh	r3, [r7, #14]
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <lcd_Clear+0x70>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	89fa      	ldrh	r2, [r7, #14]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3e8      	bcc.n	8001ae0 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000128 	.word	0x20000128

08001b1c <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
 8001b26:	460b      	mov	r3, r1
 8001b28:	80bb      	strh	r3, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001b2e:	88bb      	ldrh	r3, [r7, #4]
 8001b30:	88fa      	ldrh	r2, [r7, #6]
 8001b32:	88b9      	ldrh	r1, [r7, #4]
 8001b34:	88f8      	ldrh	r0, [r7, #6]
 8001b36:	f7ff ff6b 	bl	8001a10 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff45 	bl	80019cc <LCD_WR_DATA>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	70fb      	strb	r3, [r7, #3]
 8001b66:	4613      	mov	r3, r2
 8001b68:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001b72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b76:	085b      	lsrs	r3, r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	08db      	lsrs	r3, r3, #3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf14      	ite	ne
 8001b8e:	2301      	movne	r3, #1
 8001b90:	2300      	moveq	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	fb12 f303 	smulbb	r3, r2, r3
 8001ba2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	3b20      	subs	r3, #32
 8001ba8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29c      	uxth	r4, r3
 8001bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	88bb      	ldrh	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	88b9      	ldrh	r1, [r7, #4]
 8001bca:	88f8      	ldrh	r0, [r7, #6]
 8001bcc:	4622      	mov	r2, r4
 8001bce:	f7ff ff1f 	bl	8001a10 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	827b      	strh	r3, [r7, #18]
 8001bd6:	e07a      	b.n	8001cce <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001bd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d028      	beq.n	8001c32 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001be0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	d108      	bne.n	8001bfa <lcd_ShowChar+0xae>
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	8a7b      	ldrh	r3, [r7, #18]
 8001bec:	493c      	ldr	r1, [pc, #240]	; (8001ce0 <lcd_ShowChar+0x194>)
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	440a      	add	r2, r1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	75fb      	strb	r3, [r7, #23]
 8001bf8:	e01b      	b.n	8001c32 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bfe:	2b18      	cmp	r3, #24
 8001c00:	d10b      	bne.n	8001c1a <lcd_ShowChar+0xce>
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	8a79      	ldrh	r1, [r7, #18]
 8001c06:	4837      	ldr	r0, [pc, #220]	; (8001ce4 <lcd_ShowChar+0x198>)
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	4403      	add	r3, r0
 8001c12:	440b      	add	r3, r1
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	75fb      	strb	r3, [r7, #23]
 8001c18:	e00b      	b.n	8001c32 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d15a      	bne.n	8001cd8 <lcd_ShowChar+0x18c>
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	8a7b      	ldrh	r3, [r7, #18]
 8001c26:	4930      	ldr	r1, [pc, #192]	; (8001ce8 <lcd_ShowChar+0x19c>)
 8001c28:	0192      	lsls	r2, r2, #6
 8001c2a:	440a      	add	r2, r1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	75bb      	strb	r3, [r7, #22]
 8001c36:	e044      	b.n	8001cc2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001c38:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d120      	bne.n	8001c82 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001c40:	7dfa      	ldrb	r2, [r7, #23]
 8001c42:	7dbb      	ldrb	r3, [r7, #22]
 8001c44:	fa42 f303 	asr.w	r3, r2, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <lcd_ShowChar+0x10e>
 8001c50:	883b      	ldrh	r3, [r7, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff feba 	bl	80019cc <LCD_WR_DATA>
 8001c58:	e003      	b.n	8001c62 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001c5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff feb5 	bl	80019cc <LCD_WR_DATA>
				m++;
 8001c62:	7d7b      	ldrb	r3, [r7, #21]
 8001c64:	3301      	adds	r3, #1
 8001c66:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001c68:	7d7b      	ldrb	r3, [r7, #21]
 8001c6a:	7bfa      	ldrb	r2, [r7, #15]
 8001c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c70:	fb02 f201 	mul.w	r2, r2, r1
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d11f      	bne.n	8001cbc <lcd_ShowChar+0x170>
				{
					m=0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	757b      	strb	r3, [r7, #21]
					break;
 8001c80:	e022      	b.n	8001cc8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001c82:	7dfa      	ldrb	r2, [r7, #23]
 8001c84:	7dbb      	ldrb	r3, [r7, #22]
 8001c86:	fa42 f303 	asr.w	r3, r2, r3
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <lcd_ShowChar+0x152>
 8001c92:	883a      	ldrh	r2, [r7, #0]
 8001c94:	88b9      	ldrh	r1, [r7, #4]
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff3f 	bl	8001b1c <lcd_DrawPoint>
				x++;
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001ca4:	88fa      	ldrh	r2, [r7, #6]
 8001ca6:	8a3b      	ldrh	r3, [r7, #16]
 8001ca8:	1ad2      	subs	r2, r2, r3
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d105      	bne.n	8001cbc <lcd_ShowChar+0x170>
				{
					x=x0;
 8001cb0:	8a3b      	ldrh	r3, [r7, #16]
 8001cb2:	80fb      	strh	r3, [r7, #6]
					y++;
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	80bb      	strh	r3, [r7, #4]
					break;
 8001cba:	e005      	b.n	8001cc8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001cbc:	7dbb      	ldrb	r3, [r7, #22]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	75bb      	strb	r3, [r7, #22]
 8001cc2:	7dbb      	ldrb	r3, [r7, #22]
 8001cc4:	2b07      	cmp	r3, #7
 8001cc6:	d9b7      	bls.n	8001c38 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001cc8:	8a7b      	ldrh	r3, [r7, #18]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	827b      	strh	r3, [r7, #18]
 8001cce:	8a7a      	ldrh	r2, [r7, #18]
 8001cd0:	89bb      	ldrh	r3, [r7, #12]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d380      	bcc.n	8001bd8 <lcd_ShowChar+0x8c>
 8001cd6:	e000      	b.n	8001cda <lcd_ShowChar+0x18e>
		else return;
 8001cd8:	bf00      	nop
				}
			}
		}
	}
}
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	0800660c 	.word	0x0800660c
 8001ce4:	08006bfc 	.word	0x08006bfc
 8001ce8:	08007dcc 	.word	0x08007dcc

08001cec <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460a      	mov	r2, r1
 8001cf6:	71fb      	strb	r3, [r7, #7]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001d00:	e004      	b.n	8001d0c <mypow+0x20>
 8001d02:	79fa      	ldrb	r2, [r7, #7]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	fb02 f303 	mul.w	r3, r2, r3
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	1e5a      	subs	r2, r3, #1
 8001d10:	71ba      	strb	r2, [r7, #6]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f5      	bne.n	8001d02 <mypow+0x16>
	return result;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b089      	sub	sp, #36	; 0x24
 8001d28:	af04      	add	r7, sp, #16
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	80fb      	strh	r3, [r7, #6]
 8001d36:	4603      	mov	r3, r0
 8001d38:	80bb      	strh	r3, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	807b      	strh	r3, [r7, #2]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001d46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e059      	b.n	8001e08 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001d54:	887c      	ldrh	r4, [r7, #2]
 8001d56:	787a      	ldrb	r2, [r7, #1]
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	200a      	movs	r0, #10
 8001d66:	f7ff ffc1 	bl	8001cec <mypow>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <lcd_ShowIntNum+0xf8>)
 8001d72:	fba3 2301 	umull	r2, r3, r3, r1
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	1aca      	subs	r2, r1, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d121      	bne.n	8001dd0 <lcd_ShowIntNum+0xac>
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	787b      	ldrb	r3, [r7, #1]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	429a      	cmp	r2, r3
 8001d94:	da1c      	bge.n	8001dd0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001d96:	7b3b      	ldrb	r3, [r7, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d117      	bne.n	8001dcc <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	7b7b      	ldrb	r3, [r7, #13]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	fb12 f303 	smulbb	r3, r2, r3
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	4413      	add	r3, r2
 8001dae:	b298      	uxth	r0, r3
 8001db0:	8c3a      	ldrh	r2, [r7, #32]
 8001db2:	88b9      	ldrh	r1, [r7, #4]
 8001db4:	2300      	movs	r3, #0
 8001db6:	9302      	str	r3, [sp, #8]
 8001db8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f7ff fec1 	bl	8001b4c <lcd_ShowChar>
				continue;
 8001dca:	e01a      	b.n	8001e02 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	fb12 f303 	smulbb	r3, r2, r3
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4413      	add	r3, r2
 8001de2:	b298      	uxth	r0, r3
 8001de4:	7b3b      	ldrb	r3, [r7, #12]
 8001de6:	3330      	adds	r3, #48	; 0x30
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	8c3c      	ldrh	r4, [r7, #32]
 8001dec:	88b9      	ldrh	r1, [r7, #4]
 8001dee:	2300      	movs	r3, #0
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	4623      	mov	r3, r4
 8001dfe:	f7ff fea5 	bl	8001b4c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	3301      	adds	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	787b      	ldrb	r3, [r7, #1]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d3a1      	bcc.n	8001d54 <lcd_ShowIntNum+0x30>
	}
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	cccccccd 	.word	0xcccccccd

08001e20 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <lcd_SetDir+0x44>)
 8001e3c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e40:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <lcd_SetDir+0x44>)
 8001e44:	22f0      	movs	r2, #240	; 0xf0
 8001e46:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001e48:	e006      	b.n	8001e58 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <lcd_SetDir+0x44>)
 8001e4c:	22f0      	movs	r2, #240	; 0xf0
 8001e4e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <lcd_SetDir+0x44>)
 8001e52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e56:	805a      	strh	r2, [r3, #2]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	20000128 	.word	0x20000128

08001e68 <lcd_init>:


void lcd_init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e72:	48aa      	ldr	r0, [pc, #680]	; (800211c <lcd_init+0x2b4>)
 8001e74:	f001 fa5a 	bl	800332c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e7c:	f000 fef2 	bl	8002c64 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e86:	48a5      	ldr	r0, [pc, #660]	; (800211c <lcd_init+0x2b4>)
 8001e88:	f001 fa50 	bl	800332c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001e8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e90:	f000 fee8 	bl	8002c64 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7ff ffc3 	bl	8001e20 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001e9a:	20d3      	movs	r0, #211	; 0xd3
 8001e9c:	f7ff fd86 	bl	80019ac <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001ea0:	f7ff fda4 	bl	80019ec <LCD_RD_DATA>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b9d      	ldr	r3, [pc, #628]	; (8002120 <lcd_init+0x2b8>)
 8001eaa:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001eac:	f7ff fd9e 	bl	80019ec <LCD_RD_DATA>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b9a      	ldr	r3, [pc, #616]	; (8002120 <lcd_init+0x2b8>)
 8001eb6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001eb8:	f7ff fd98 	bl	80019ec <LCD_RD_DATA>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b97      	ldr	r3, [pc, #604]	; (8002120 <lcd_init+0x2b8>)
 8001ec2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001ec4:	4b96      	ldr	r3, [pc, #600]	; (8002120 <lcd_init+0x2b8>)
 8001ec6:	889b      	ldrh	r3, [r3, #4]
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	4b94      	ldr	r3, [pc, #592]	; (8002120 <lcd_init+0x2b8>)
 8001ece:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001ed0:	f7ff fd8c 	bl	80019ec <LCD_RD_DATA>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b91      	ldr	r3, [pc, #580]	; (8002120 <lcd_init+0x2b8>)
 8001eda:	889b      	ldrh	r3, [r3, #4]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	4b8f      	ldr	r3, [pc, #572]	; (8002120 <lcd_init+0x2b8>)
 8001ee2:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001ee4:	20cf      	movs	r0, #207	; 0xcf
 8001ee6:	f7ff fd61 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fd6e 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001ef0:	20c1      	movs	r0, #193	; 0xc1
 8001ef2:	f7ff fd6b 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001ef6:	2030      	movs	r0, #48	; 0x30
 8001ef8:	f7ff fd68 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001efc:	20ed      	movs	r0, #237	; 0xed
 8001efe:	f7ff fd55 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001f02:	2064      	movs	r0, #100	; 0x64
 8001f04:	f7ff fd62 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f7ff fd5f 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001f0e:	2012      	movs	r0, #18
 8001f10:	f7ff fd5c 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001f14:	2081      	movs	r0, #129	; 0x81
 8001f16:	f7ff fd59 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001f1a:	20e8      	movs	r0, #232	; 0xe8
 8001f1c:	f7ff fd46 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001f20:	2085      	movs	r0, #133	; 0x85
 8001f22:	f7ff fd53 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f26:	2010      	movs	r0, #16
 8001f28:	f7ff fd50 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001f2c:	207a      	movs	r0, #122	; 0x7a
 8001f2e:	f7ff fd4d 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001f32:	20cb      	movs	r0, #203	; 0xcb
 8001f34:	f7ff fd3a 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001f38:	2039      	movs	r0, #57	; 0x39
 8001f3a:	f7ff fd47 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001f3e:	202c      	movs	r0, #44	; 0x2c
 8001f40:	f7ff fd44 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff fd41 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001f4a:	2034      	movs	r0, #52	; 0x34
 8001f4c:	f7ff fd3e 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7ff fd3b 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001f56:	20f7      	movs	r0, #247	; 0xf7
 8001f58:	f7ff fd28 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001f5c:	2020      	movs	r0, #32
 8001f5e:	f7ff fd35 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001f62:	20ea      	movs	r0, #234	; 0xea
 8001f64:	f7ff fd22 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fd2f 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fd2c 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001f74:	20c0      	movs	r0, #192	; 0xc0
 8001f76:	f7ff fd19 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001f7a:	201b      	movs	r0, #27
 8001f7c:	f7ff fd26 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001f80:	20c1      	movs	r0, #193	; 0xc1
 8001f82:	f7ff fd13 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7ff fd20 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001f8c:	20c5      	movs	r0, #197	; 0xc5
 8001f8e:	f7ff fd0d 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001f92:	2030      	movs	r0, #48	; 0x30
 8001f94:	f7ff fd1a 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001f98:	2030      	movs	r0, #48	; 0x30
 8001f9a:	f7ff fd17 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001f9e:	20c7      	movs	r0, #199	; 0xc7
 8001fa0:	f7ff fd04 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001fa4:	20b7      	movs	r0, #183	; 0xb7
 8001fa6:	f7ff fd11 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001faa:	2036      	movs	r0, #54	; 0x36
 8001fac:	f7ff fcfe 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001fb0:	2008      	movs	r0, #8
 8001fb2:	f7ff fd0b 	bl	80019cc <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001fb6:	203a      	movs	r0, #58	; 0x3a
 8001fb8:	f7ff fcf8 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001fbc:	2055      	movs	r0, #85	; 0x55
 8001fbe:	f7ff fd05 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001fc2:	20b1      	movs	r0, #177	; 0xb1
 8001fc4:	f7ff fcf2 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fcff 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001fce:	201a      	movs	r0, #26
 8001fd0:	f7ff fcfc 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001fd4:	20b6      	movs	r0, #182	; 0xb6
 8001fd6:	f7ff fce9 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001fda:	200a      	movs	r0, #10
 8001fdc:	f7ff fcf6 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001fe0:	20a2      	movs	r0, #162	; 0xa2
 8001fe2:	f7ff fcf3 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001fe6:	20f2      	movs	r0, #242	; 0xf2
 8001fe8:	f7ff fce0 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fced 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001ff2:	2026      	movs	r0, #38	; 0x26
 8001ff4:	f7ff fcda 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fce7 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001ffe:	20e0      	movs	r0, #224	; 0xe0
 8002000:	f7ff fcd4 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002004:	200f      	movs	r0, #15
 8002006:	f7ff fce1 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800200a:	202a      	movs	r0, #42	; 0x2a
 800200c:	f7ff fcde 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002010:	2028      	movs	r0, #40	; 0x28
 8002012:	f7ff fcdb 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002016:	2008      	movs	r0, #8
 8002018:	f7ff fcd8 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800201c:	200e      	movs	r0, #14
 800201e:	f7ff fcd5 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002022:	2008      	movs	r0, #8
 8002024:	f7ff fcd2 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002028:	2054      	movs	r0, #84	; 0x54
 800202a:	f7ff fccf 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800202e:	20a9      	movs	r0, #169	; 0xa9
 8002030:	f7ff fccc 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002034:	2043      	movs	r0, #67	; 0x43
 8002036:	f7ff fcc9 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800203a:	200a      	movs	r0, #10
 800203c:	f7ff fcc6 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002040:	200f      	movs	r0, #15
 8002042:	f7ff fcc3 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff fcc0 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff fcbd 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f7ff fcba 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff fcb7 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800205e:	20e1      	movs	r0, #225	; 0xe1
 8002060:	f7ff fca4 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff fcb1 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800206a:	2015      	movs	r0, #21
 800206c:	f7ff fcae 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002070:	2017      	movs	r0, #23
 8002072:	f7ff fcab 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002076:	2007      	movs	r0, #7
 8002078:	f7ff fca8 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800207c:	2011      	movs	r0, #17
 800207e:	f7ff fca5 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002082:	2006      	movs	r0, #6
 8002084:	f7ff fca2 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002088:	202b      	movs	r0, #43	; 0x2b
 800208a:	f7ff fc9f 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800208e:	2056      	movs	r0, #86	; 0x56
 8002090:	f7ff fc9c 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002094:	203c      	movs	r0, #60	; 0x3c
 8002096:	f7ff fc99 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800209a:	2005      	movs	r0, #5
 800209c:	f7ff fc96 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80020a0:	2010      	movs	r0, #16
 80020a2:	f7ff fc93 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020a6:	200f      	movs	r0, #15
 80020a8:	f7ff fc90 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020ac:	203f      	movs	r0, #63	; 0x3f
 80020ae:	f7ff fc8d 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80020b2:	203f      	movs	r0, #63	; 0x3f
 80020b4:	f7ff fc8a 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80020b8:	200f      	movs	r0, #15
 80020ba:	f7ff fc87 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80020be:	202b      	movs	r0, #43	; 0x2b
 80020c0:	f7ff fc74 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fc81 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7ff fc7e 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7ff fc7b 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80020d6:	203f      	movs	r0, #63	; 0x3f
 80020d8:	f7ff fc78 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80020dc:	202a      	movs	r0, #42	; 0x2a
 80020de:	f7ff fc65 	bl	80019ac <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f7ff fc72 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff fc6f 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff fc6c 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80020f4:	20ef      	movs	r0, #239	; 0xef
 80020f6:	f7ff fc69 	bl	80019cc <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80020fa:	2011      	movs	r0, #17
 80020fc:	f7ff fc56 	bl	80019ac <LCD_WR_REG>
	HAL_Delay(120);
 8002100:	2078      	movs	r0, #120	; 0x78
 8002102:	f000 fdaf 	bl	8002c64 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002106:	2029      	movs	r0, #41	; 0x29
 8002108:	f7ff fc50 	bl	80019ac <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002112:	4804      	ldr	r0, [pc, #16]	; (8002124 <lcd_init+0x2bc>)
 8002114:	f001 f90a 	bl	800332c <HAL_GPIO_WritePin>
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40020800 	.word	0x40020800
 8002120:	20000128 	.word	0x20000128
 8002124:	40020000 	.word	0x40020000

08002128 <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
 8002134:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	b29a      	uxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	b29b      	uxth	r3, r3
 800213e:	4413      	add	r3, r2
 8002140:	b298      	uxth	r0, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	b29a      	uxth	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4413      	add	r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	8b3a      	ldrh	r2, [r7, #24]
 8002150:	4619      	mov	r1, r3
 8002152:	f7ff fce3 	bl	8001b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	b29a      	uxth	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	b29b      	uxth	r3, r3
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	b298      	uxth	r0, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	b29a      	uxth	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b29b      	uxth	r3, r3
 800216a:	4413      	add	r3, r2
 800216c:	b29b      	uxth	r3, r3
 800216e:	8b3a      	ldrh	r2, [r7, #24]
 8002170:	4619      	mov	r1, r3
 8002172:	f7ff fcd3 	bl	8001b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	b29b      	uxth	r3, r3
 800217e:	4413      	add	r3, r2
 8002180:	b298      	uxth	r0, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	b29a      	uxth	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b29b      	uxth	r3, r3
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	8b3a      	ldrh	r2, [r7, #24]
 8002190:	4619      	mov	r1, r3
 8002192:	f7ff fcc3 	bl	8001b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	b29b      	uxth	r3, r3
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	b298      	uxth	r0, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	8b3a      	ldrh	r2, [r7, #24]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7ff fcb3 	bl	8001b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4413      	add	r3, r2
 80021c0:	b298      	uxth	r0, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	4413      	add	r3, r2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	8b3a      	ldrh	r2, [r7, #24]
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7ff fca3 	bl	8001b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	b298      	uxth	r0, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	8b3a      	ldrh	r2, [r7, #24]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f7ff fc93 	bl	8001b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4413      	add	r3, r2
 8002200:	b298      	uxth	r0, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	b29a      	uxth	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	b29b      	uxth	r3, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	b29b      	uxth	r3, r3
 800220e:	8b3a      	ldrh	r2, [r7, #24]
 8002210:	4619      	mov	r1, r3
 8002212:	f7ff fc83 	bl	8001b1c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	b29a      	uxth	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b298      	uxth	r0, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	b29a      	uxth	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	b29b      	uxth	r3, r3
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	b29b      	uxth	r3, r3
 800222e:	8b3a      	ldrh	r2, [r7, #24]
 8002230:	4619      	mov	r1, r3
 8002232:	f7ff fc73 	bl	8001b1c <lcd_DrawPoint>
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b08a      	sub	sp, #40	; 0x28
 8002242:	af02      	add	r7, sp, #8
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	f1c3 0303 	rsb	r3, r3, #3
 800225e:	613b      	str	r3, [r7, #16]


	if (fill)
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	2b00      	cmp	r3, #0
 8002264:	d04f      	beq.n	8002306 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002266:	e029      	b.n	80022bc <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e00a      	b.n	8002284 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff ff55 	bl	8002128 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	429a      	cmp	r2, r3
 800228a:	ddf0      	ble.n	800226e <lcd_DrawCircle+0x30>

			if (d < 0) {
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	da06      	bge.n	80022a0 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	009a      	lsls	r2, r3, #2
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	3306      	adds	r3, #6
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e00a      	b.n	80022b6 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	009a      	lsls	r2, r3, #2
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	330a      	adds	r3, #10
 80022ae:	613b      	str	r3, [r7, #16]
				y--;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	ddd1      	ble.n	8002268 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80022c4:	e023      	b.n	800230e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff ff29 	bl	8002128 <_draw_circle_8>
			if (d < 0) {
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da06      	bge.n	80022ea <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	3306      	adds	r3, #6
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	e00a      	b.n	8002300 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	009a      	lsls	r2, r3, #2
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	330a      	adds	r3, #10
 80022f8:	613b      	str	r3, [r7, #16]
				y--;
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	61bb      	str	r3, [r7, #24]
			x++;
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	3301      	adds	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	429a      	cmp	r2, r3
 800230c:	dddb      	ble.n	80022c6 <lcd_DrawCircle+0x88>
}
 800230e:	bf00      	nop
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800231c:	2201      	movs	r2, #1
 800231e:	2140      	movs	r1, #64	; 0x40
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <led7_init+0x14>)
 8002322:	f001 f803 	bl	800332c <HAL_GPIO_WritePin>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021800 	.word	0x40021800

08002330 <led7_Scan>:

void led7_Scan(){
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002334:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <led7_Scan+0x104>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <led7_Scan+0x104>)
 800233e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <led7_Scan+0x108>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3d      	ldr	r2, [pc, #244]	; (800243c <led7_Scan+0x10c>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	b21a      	sxth	r2, r3
 800234c:	4b39      	ldr	r3, [pc, #228]	; (8002434 <led7_Scan+0x104>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b36      	ldr	r3, [pc, #216]	; (8002434 <led7_Scan+0x104>)
 800235a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <led7_Scan+0x108>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d847      	bhi.n	80023f4 <led7_Scan+0xc4>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <led7_Scan+0x3c>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	0800237d 	.word	0x0800237d
 8002370:	0800239b 	.word	0x0800239b
 8002374:	080023b9 	.word	0x080023b9
 8002378:	080023d7 	.word	0x080023d7
	case 0:
		spi_buffer |= 0x00b0;
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <led7_Scan+0x104>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002384:	b29a      	uxth	r2, r3
 8002386:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <led7_Scan+0x104>)
 8002388:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <led7_Scan+0x104>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002392:	b29a      	uxth	r2, r3
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <led7_Scan+0x104>)
 8002396:	801a      	strh	r2, [r3, #0]
		break;
 8002398:	e02d      	b.n	80023f6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <led7_Scan+0x104>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <led7_Scan+0x104>)
 80023a6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <led7_Scan+0x104>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	f023 0320 	bic.w	r3, r3, #32
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	4b20      	ldr	r3, [pc, #128]	; (8002434 <led7_Scan+0x104>)
 80023b4:	801a      	strh	r2, [r3, #0]
		break;
 80023b6:	e01e      	b.n	80023f6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80023b8:	4b1e      	ldr	r3, [pc, #120]	; (8002434 <led7_Scan+0x104>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <led7_Scan+0x104>)
 80023c4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <led7_Scan+0x104>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	f023 0310 	bic.w	r3, r3, #16
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <led7_Scan+0x104>)
 80023d2:	801a      	strh	r2, [r3, #0]
		break;
 80023d4:	e00f      	b.n	80023f6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80023d6:	4b17      	ldr	r3, [pc, #92]	; (8002434 <led7_Scan+0x104>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80023de:	b29a      	uxth	r2, r3
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <led7_Scan+0x104>)
 80023e2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <led7_Scan+0x104>)
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <led7_Scan+0x104>)
 80023f0:	801a      	strh	r2, [r3, #0]
		break;
 80023f2:	e000      	b.n	80023f6 <led7_Scan+0xc6>
	default:
		break;
 80023f4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <led7_Scan+0x108>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	3301      	adds	r3, #1
 80023fc:	425a      	negs	r2, r3
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	f002 0203 	and.w	r2, r2, #3
 8002406:	bf58      	it	pl
 8002408:	4253      	negpl	r3, r2
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <led7_Scan+0x108>)
 800240c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	480b      	ldr	r0, [pc, #44]	; (8002440 <led7_Scan+0x110>)
 8002414:	f000 ff8a 	bl	800332c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002418:	2301      	movs	r3, #1
 800241a:	2202      	movs	r2, #2
 800241c:	4905      	ldr	r1, [pc, #20]	; (8002434 <led7_Scan+0x104>)
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <led7_Scan+0x114>)
 8002420:	f001 fdf9 	bl	8004016 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002424:	2201      	movs	r2, #1
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <led7_Scan+0x110>)
 800242a:	f000 ff7f 	bl	800332c <HAL_GPIO_WritePin>
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000010 	.word	0x20000010
 8002438:	20000050 	.word	0x20000050
 800243c:	2000000c 	.word	0x2000000c
 8002440:	40021800 	.word	0x40021800
 8002444:	20000164 	.word	0x20000164

08002448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800244c:	f000 fb98 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002450:	f000 f820 	bl	8002494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002454:	f7ff f93c 	bl	80016d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002458:	f000 fa50 	bl	80028fc <MX_TIM2_Init>
  MX_SPI1_Init();
 800245c:	f000 f958 	bl	8002710 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002460:	f7ff f866 	bl	8001530 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002464:	f7ff fa2c 	bl	80018c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002468:	f000 fae6 	bl	8002a38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800246c:	f000 f87c 	bl	8002568 <system_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 8002470:	bf00      	nop
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <main+0x48>)
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0fb      	beq.n	8002472 <main+0x2a>
	  flag_timer2 = 0;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <main+0x48>)
 800247c:	2200      	movs	r2, #0
 800247e:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8002480:	f7fe fb38 	bl	8000af4 <button_Scan>
	  test_LedDebug();
 8002484:	f000 f892 	bl	80025ac <test_LedDebug>
//	  ds3231_ReadTime();
//	  test_Uart();
	  fsm_mode();
 8002488:	f7fe fef4 	bl	8001274 <fsm_mode>
	  while(!flag_timer2);
 800248c:	e7f0      	b.n	8002470 <main+0x28>
 800248e:	bf00      	nop
 8002490:	2000005c 	.word	0x2000005c

08002494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b094      	sub	sp, #80	; 0x50
 8002498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249a:	f107 0320 	add.w	r3, r7, #32
 800249e:	2230      	movs	r2, #48	; 0x30
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f004 f858 	bl	8006558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	4b28      	ldr	r3, [pc, #160]	; (8002560 <SystemClock_Config+0xcc>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4a27      	ldr	r2, [pc, #156]	; (8002560 <SystemClock_Config+0xcc>)
 80024c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6413      	str	r3, [r2, #64]	; 0x40
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <SystemClock_Config+0xcc>)
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024d4:	2300      	movs	r3, #0
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <SystemClock_Config+0xd0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a21      	ldr	r2, [pc, #132]	; (8002564 <SystemClock_Config+0xd0>)
 80024de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <SystemClock_Config+0xd0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024f0:	2302      	movs	r3, #2
 80024f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f4:	2301      	movs	r3, #1
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024f8:	2310      	movs	r3, #16
 80024fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024fc:	2302      	movs	r3, #2
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002500:	2300      	movs	r3, #0
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002504:	2308      	movs	r3, #8
 8002506:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002508:	23a8      	movs	r3, #168	; 0xa8
 800250a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800250c:	2302      	movs	r3, #2
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002510:	2304      	movs	r3, #4
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002514:	f107 0320 	add.w	r3, r7, #32
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f87f 	bl	800361c <HAL_RCC_OscConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002524:	f000 f866 	bl	80025f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002528:	230f      	movs	r3, #15
 800252a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800252c:	2302      	movs	r3, #2
 800252e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002538:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800253a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800253e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002540:	f107 030c 	add.w	r3, r7, #12
 8002544:	2105      	movs	r1, #5
 8002546:	4618      	mov	r0, r3
 8002548:	f001 fae0 	bl	8003b0c <HAL_RCC_ClockConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002552:	f000 f84f 	bl	80025f4 <Error_Handler>
  }
}
 8002556:	bf00      	nop
 8002558:	3750      	adds	r7, #80	; 0x50
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000

08002568 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800256c:	2200      	movs	r2, #0
 800256e:	2120      	movs	r1, #32
 8002570:	480d      	ldr	r0, [pc, #52]	; (80025a8 <system_init+0x40>)
 8002572:	f000 fedb 	bl	800332c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2140      	movs	r1, #64	; 0x40
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <system_init+0x40>)
 800257c:	f000 fed6 	bl	800332c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2110      	movs	r1, #16
 8002584:	4808      	ldr	r0, [pc, #32]	; (80025a8 <system_init+0x40>)
 8002586:	f000 fed1 	bl	800332c <HAL_GPIO_WritePin>
	  timer_init();
 800258a:	f000 f839 	bl	8002600 <timer_init>
	  led7_init();
 800258e:	f7ff fec3 	bl	8002318 <led7_init>
	  button_init();
 8002592:	f7fe faa3 	bl	8000adc <button_init>
	  lcd_init();
 8002596:	f7ff fc67 	bl	8001e68 <lcd_init>
	  uart_init_rs232();
 800259a:	f000 fa21 	bl	80029e0 <uart_init_rs232>
	  setTimer2(50);
 800259e:	2032      	movs	r0, #50	; 0x32
 80025a0:	f000 f854 	bl	800264c <setTimer2>
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug(){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80025b0:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <test_LedDebug+0x3c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <test_LedDebug+0x40>)
 80025b8:	fb83 1302 	smull	r1, r3, r3, r2
 80025bc:	10d9      	asrs	r1, r3, #3
 80025be:	17d3      	asrs	r3, r2, #31
 80025c0:	1ac9      	subs	r1, r1, r3
 80025c2:	460b      	mov	r3, r1
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	1ad1      	subs	r1, r2, r3
 80025cc:	b28a      	uxth	r2, r1
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <test_LedDebug+0x3c>)
 80025d0:	801a      	strh	r2, [r3, #0]
	if(count_led_debug == 0){
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <test_LedDebug+0x3c>)
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80025da:	2110      	movs	r1, #16
 80025dc:	4804      	ldr	r0, [pc, #16]	; (80025f0 <test_LedDebug+0x44>)
 80025de:	f000 febe 	bl	800335e <HAL_GPIO_TogglePin>
	}
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000054 	.word	0x20000054
 80025ec:	66666667 	.word	0x66666667
 80025f0:	40021000 	.word	0x40021000

080025f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f8:	b672      	cpsid	i
}
 80025fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025fc:	e7fe      	b.n	80025fc <Error_Handler+0x8>
	...

08002600 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <timer_init+0x10>)
 8002606:	f002 fab9 	bl	8004b7c <HAL_TIM_Base_Start_IT>
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001bc 	.word	0x200001bc

08002614 <setTimer1>:

void setTimer1(uint16_t duration)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
	timer1_MUL = duration/TIMER_CYCLE;
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <setTimer1+0x2c>)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	8013      	strh	r3, [r2, #0]
	timer1_counter = timer1_MUL;
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <setTimer1+0x2c>)
 8002626:	881a      	ldrh	r2, [r3, #0]
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <setTimer1+0x30>)
 800262a:	801a      	strh	r2, [r3, #0]
	flag_timer1 = 0;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <setTimer1+0x34>)
 800262e:	2200      	movs	r2, #0
 8002630:	801a      	strh	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000005a 	.word	0x2000005a
 8002644:	20000058 	.word	0x20000058
 8002648:	20000056 	.word	0x20000056

0800264c <setTimer2>:

void setTimer2(uint16_t duration)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE;
 8002656:	4a08      	ldr	r2, [pc, #32]	; (8002678 <setTimer2+0x2c>)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <setTimer2+0x2c>)
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <setTimer2+0x30>)
 8002662:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <setTimer2+0x34>)
 8002666:	2200      	movs	r2, #0
 8002668:	801a      	strh	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	20000060 	.word	0x20000060
 800267c:	2000005e 	.word	0x2000005e
 8002680:	2000005c 	.word	0x2000005c

08002684 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d12b      	bne.n	80026ee <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		if(timer1_counter > 0)
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d010      	beq.n	80026c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timer1_counter--;
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80026a8:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0)
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				flag_timer1 = 1;
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80026be:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0)
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d010      	beq.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer2_counter--;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026d2:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0)
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_timer2 = 1;
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80026de:	2201      	movs	r2, #1
 80026e0:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80026e4:	881a      	ldrh	r2, [r3, #0]
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80026e8:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80026ea:	f7ff fe21 	bl	8002330 <led7_Scan>
	}
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000058 	.word	0x20000058
 80026fc:	20000056 	.word	0x20000056
 8002700:	2000005a 	.word	0x2000005a
 8002704:	2000005e 	.word	0x2000005e
 8002708:	2000005c 	.word	0x2000005c
 800270c:	20000060 	.word	0x20000060

08002710 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <MX_SPI1_Init+0x64>)
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <MX_SPI1_Init+0x68>)
 8002718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <MX_SPI1_Init+0x64>)
 800271c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <MX_SPI1_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <MX_SPI1_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_SPI1_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_SPI1_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_SPI1_Init+0x64>)
 800273c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_SPI1_Init+0x64>)
 8002744:	2200      	movs	r2, #0
 8002746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <MX_SPI1_Init+0x64>)
 800274a:	2200      	movs	r2, #0
 800274c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_SPI1_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <MX_SPI1_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_SPI1_Init+0x64>)
 800275c:	220a      	movs	r2, #10
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <MX_SPI1_Init+0x64>)
 8002762:	f001 fbcf 	bl	8003f04 <HAL_SPI_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800276c:	f7ff ff42 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000164 	.word	0x20000164
 8002778:	40013000 	.word	0x40013000

0800277c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_SPI_MspInit+0x84>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12b      	bne.n	80027f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_SPI_MspInit+0x88>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <HAL_SPI_MspInit+0x88>)
 80027a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_SPI_MspInit+0x88>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_SPI_MspInit+0x88>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_SPI_MspInit+0x88>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_SPI_MspInit+0x88>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027d6:	2338      	movs	r3, #56	; 0x38
 80027d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027e6:	2305      	movs	r3, #5
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	4805      	ldr	r0, [pc, #20]	; (8002808 <HAL_SPI_MspInit+0x8c>)
 80027f2:	f000 fbff 	bl	8002ff4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027f6:	bf00      	nop
 80027f8:	3728      	adds	r7, #40	; 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40013000 	.word	0x40013000
 8002804:	40023800 	.word	0x40023800
 8002808:	40020400 	.word	0x40020400

0800280c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_MspInit+0x4c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	4a0f      	ldr	r2, [pc, #60]	; (8002858 <HAL_MspInit+0x4c>)
 800281c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002820:	6453      	str	r3, [r2, #68]	; 0x44
 8002822:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <HAL_MspInit+0x4c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_MspInit+0x4c>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a08      	ldr	r2, [pc, #32]	; (8002858 <HAL_MspInit+0x4c>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_MspInit+0x4c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002860:	e7fe      	b.n	8002860 <NMI_Handler+0x4>

08002862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002866:	e7fe      	b.n	8002866 <HardFault_Handler+0x4>

08002868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800286c:	e7fe      	b.n	800286c <MemManage_Handler+0x4>

0800286e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002872:	e7fe      	b.n	8002872 <BusFault_Handler+0x4>

08002874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <UsageFault_Handler+0x4>

0800287a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028a8:	f000 f9bc 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028b4:	4802      	ldr	r0, [pc, #8]	; (80028c0 <TIM2_IRQHandler+0x10>)
 80028b6:	f002 f9d1 	bl	8004c5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200001bc 	.word	0x200001bc

080028c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <USART1_IRQHandler+0x10>)
 80028ca:	f002 fe99 	bl	8005600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000204 	.word	0x20000204

080028d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <SystemInit+0x20>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <SystemInit+0x20>)
 80028e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002910:	463b      	mov	r3, r7
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002918:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <MX_TIM2_Init+0x94>)
 800291a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800291e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <MX_TIM2_Init+0x94>)
 8002922:	f240 3247 	movw	r2, #839	; 0x347
 8002926:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <MX_TIM2_Init+0x94>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <MX_TIM2_Init+0x94>)
 8002930:	2263      	movs	r2, #99	; 0x63
 8002932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002934:	4b16      	ldr	r3, [pc, #88]	; (8002990 <MX_TIM2_Init+0x94>)
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <MX_TIM2_Init+0x94>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <MX_TIM2_Init+0x94>)
 8002942:	f002 f8cb 	bl	8004adc <HAL_TIM_Base_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800294c:	f7ff fe52 	bl	80025f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	4619      	mov	r1, r3
 800295c:	480c      	ldr	r0, [pc, #48]	; (8002990 <MX_TIM2_Init+0x94>)
 800295e:	f002 fa85 	bl	8004e6c <HAL_TIM_ConfigClockSource>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002968:	f7ff fe44 	bl	80025f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296c:	2300      	movs	r3, #0
 800296e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002974:	463b      	mov	r3, r7
 8002976:	4619      	mov	r1, r3
 8002978:	4805      	ldr	r0, [pc, #20]	; (8002990 <MX_TIM2_Init+0x94>)
 800297a:	f002 fca1 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002984:	f7ff fe36 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	200001bc 	.word	0x200001bc

08002994 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a4:	d115      	bne.n	80029d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_TIM_Base_MspInit+0x48>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <HAL_TIM_Base_MspInit+0x48>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_TIM_Base_MspInit+0x48>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2100      	movs	r1, #0
 80029c6:	201c      	movs	r0, #28
 80029c8:	f000 fa4b 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029cc:	201c      	movs	r0, #28
 80029ce:	f000 fa64 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80029e4:	2201      	movs	r2, #1
 80029e6:	4903      	ldr	r1, [pc, #12]	; (80029f4 <uart_init_rs232+0x14>)
 80029e8:	4803      	ldr	r0, [pc, #12]	; (80029f8 <uart_init_rs232+0x18>)
 80029ea:	f002 fdd8 	bl	800559e <HAL_UART_Receive_IT>
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000062 	.word	0x20000062
 80029f8:	20000204 	.word	0x20000204

080029fc <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <HAL_UART_RxCpltCallback+0x30>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10a      	bne.n	8002a24 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002a0e:	230a      	movs	r3, #10
 8002a10:	2201      	movs	r2, #1
 8002a12:	4907      	ldr	r1, [pc, #28]	; (8002a30 <HAL_UART_RxCpltCallback+0x34>)
 8002a14:	4807      	ldr	r0, [pc, #28]	; (8002a34 <HAL_UART_RxCpltCallback+0x38>)
 8002a16:	f002 fd30 	bl	800547a <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4904      	ldr	r1, [pc, #16]	; (8002a30 <HAL_UART_RxCpltCallback+0x34>)
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <HAL_UART_RxCpltCallback+0x38>)
 8002a20:	f002 fdbd 	bl	800559e <HAL_UART_Receive_IT>
	}
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40011000 	.word	0x40011000
 8002a30:	20000062 	.word	0x20000062
 8002a34:	20000204 	.word	0x20000204

08002a38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <MX_USART1_UART_Init+0x50>)
 8002a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a5e:	220c      	movs	r2, #12
 8002a60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_USART1_UART_Init+0x4c>)
 8002a70:	f002 fcb6 	bl	80053e0 <HAL_UART_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a7a:	f7ff fdbb 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000204 	.word	0x20000204
 8002a88:	40011000 	.word	0x40011000

08002a8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	; 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <HAL_UART_MspInit+0x94>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d134      	bne.n	8002b18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a14      	ldr	r2, [pc, #80]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_UART_MspInit+0x98>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af8:	2307      	movs	r3, #7
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <HAL_UART_MspInit+0x9c>)
 8002b04:	f000 fa76 	bl	8002ff4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2025      	movs	r0, #37	; 0x25
 8002b0e:	f000 f9a8 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b12:	2025      	movs	r0, #37	; 0x25
 8002b14:	f000 f9c1 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3728      	adds	r7, #40	; 0x28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40011000 	.word	0x40011000
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40020000 	.word	0x40020000

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b38:	e002      	b.n	8002b40 <LoopCopyDataInit>

08002b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3e:	3304      	adds	r3, #4

08002b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b44:	d3f9      	bcc.n	8002b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b48:	4c0b      	ldr	r4, [pc, #44]	; (8002b78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b4c:	e001      	b.n	8002b52 <LoopFillZerobss>

08002b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b50:	3204      	adds	r2, #4

08002b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b54:	d3fb      	bcc.n	8002b4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b56:	f7ff febf 	bl	80028d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f003 fcd9 	bl	8006510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7ff fc73 	bl	8002448 <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b6c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002b70:	080095b4 	.word	0x080095b4
  ldr r2, =_sbss
 8002b74:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002b78:	2000024c 	.word	0x2000024c

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 f94f 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	200f      	movs	r0, #15
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fe2a 	bl	800280c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f967 	bl	8002eb6 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 f92f 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000014 	.word	0x20000014
 8002c1c:	2000001c 	.word	0x2000001c
 8002c20:	20000018 	.word	0x20000018

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2000001c 	.word	0x2000001c
 8002c48:	20000248 	.word	0x20000248

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000248 	.word	0x20000248

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff ffee 	bl	8002c4c <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_Delay+0x44>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000001c 	.word	0x2000001c

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cde:	4a04      	ldr	r2, [pc, #16]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	e000ed00 	.word	0xe000ed00

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff29 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff3e 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff31 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff ffa2 	bl	8002e08 <SysTick_Config>
 8002ec4:	4603      	mov	r3, r0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff feb6 	bl	8002c4c <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d008      	beq.n	8002f00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e052      	b.n	8002fa6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0216 	bic.w	r2, r2, #22
 8002f0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d103      	bne.n	8002f30 <HAL_DMA_Abort+0x62>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0208 	bic.w	r2, r2, #8
 8002f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f50:	e013      	b.n	8002f7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f52:	f7ff fe7b 	bl	8002c4c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d90c      	bls.n	8002f7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2203      	movs	r2, #3
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e015      	b.n	8002fa6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e4      	bne.n	8002f52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	223f      	movs	r2, #63	; 0x3f
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e00c      	b.n	8002fe6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2205      	movs	r2, #5
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e16b      	b.n	80032e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 815a 	bne.w	80032e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d005      	beq.n	8003046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	2b02      	cmp	r3, #2
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d017      	beq.n	80030e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80b4 	beq.w	80032e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b60      	ldr	r3, [pc, #384]	; (8003300 <HAL_GPIO_Init+0x30c>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a5f      	ldr	r2, [pc, #380]	; (8003300 <HAL_GPIO_Init+0x30c>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b5d      	ldr	r3, [pc, #372]	; (8003300 <HAL_GPIO_Init+0x30c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003196:	4a5b      	ldr	r2, [pc, #364]	; (8003304 <HAL_GPIO_Init+0x310>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	; (8003308 <HAL_GPIO_Init+0x314>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d02b      	beq.n	800321a <HAL_GPIO_Init+0x226>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a51      	ldr	r2, [pc, #324]	; (800330c <HAL_GPIO_Init+0x318>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d025      	beq.n	8003216 <HAL_GPIO_Init+0x222>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a50      	ldr	r2, [pc, #320]	; (8003310 <HAL_GPIO_Init+0x31c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	; (8003314 <HAL_GPIO_Init+0x320>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x21a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	; (8003318 <HAL_GPIO_Init+0x324>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x216>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4d      	ldr	r2, [pc, #308]	; (800331c <HAL_GPIO_Init+0x328>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x212>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <HAL_GPIO_Init+0x32c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	; (8003324 <HAL_GPIO_Init+0x330>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x20a>
 80031fa:	2307      	movs	r3, #7
 80031fc:	e00e      	b.n	800321c <HAL_GPIO_Init+0x228>
 80031fe:	2308      	movs	r3, #8
 8003200:	e00c      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003202:	2306      	movs	r3, #6
 8003204:	e00a      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003206:	2305      	movs	r3, #5
 8003208:	e008      	b.n	800321c <HAL_GPIO_Init+0x228>
 800320a:	2304      	movs	r3, #4
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x228>
 800320e:	2303      	movs	r3, #3
 8003210:	e004      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003212:	2302      	movs	r3, #2
 8003214:	e002      	b.n	800321c <HAL_GPIO_Init+0x228>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_GPIO_Init+0x228>
 800321a:	2300      	movs	r3, #0
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	f002 0203 	and.w	r2, r2, #3
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	4093      	lsls	r3, r2
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800322c:	4935      	ldr	r1, [pc, #212]	; (8003304 <HAL_GPIO_Init+0x310>)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800323a:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <HAL_GPIO_Init+0x334>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800325e:	4a32      	ldr	r2, [pc, #200]	; (8003328 <HAL_GPIO_Init+0x334>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003264:	4b30      	ldr	r3, [pc, #192]	; (8003328 <HAL_GPIO_Init+0x334>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003288:	4a27      	ldr	r2, [pc, #156]	; (8003328 <HAL_GPIO_Init+0x334>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328e:	4b26      	ldr	r3, [pc, #152]	; (8003328 <HAL_GPIO_Init+0x334>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b2:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_GPIO_Init+0x334>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_GPIO_Init+0x334>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032dc:	4a12      	ldr	r2, [pc, #72]	; (8003328 <HAL_GPIO_Init+0x334>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	f67f ae90 	bls.w	8003010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40013800 	.word	0x40013800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400
 8003310:	40020800 	.word	0x40020800
 8003314:	40020c00 	.word	0x40020c00
 8003318:	40021000 	.word	0x40021000
 800331c:	40021400 	.word	0x40021400
 8003320:	40021800 	.word	0x40021800
 8003324:	40021c00 	.word	0x40021c00
 8003328:	40013c00 	.word	0x40013c00

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003348:	e003      	b.n	8003352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	041a      	lsls	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	619a      	str	r2, [r3, #24]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003370:	887a      	ldrh	r2, [r7, #2]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	041a      	lsls	r2, r3, #16
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43d9      	mvns	r1, r3
 800337c:	887b      	ldrh	r3, [r7, #2]
 800337e:	400b      	ands	r3, r1
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e12b      	b.n	80035fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe faae 	bl	800191c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033f8:	f000 fd5c 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a81      	ldr	r2, [pc, #516]	; (8003608 <HAL_I2C_Init+0x274>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d807      	bhi.n	8003418 <HAL_I2C_Init+0x84>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a80      	ldr	r2, [pc, #512]	; (800360c <HAL_I2C_Init+0x278>)
 800340c:	4293      	cmp	r3, r2
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e006      	b.n	8003426 <HAL_I2C_Init+0x92>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a7d      	ldr	r2, [pc, #500]	; (8003610 <HAL_I2C_Init+0x27c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	bf94      	ite	ls
 8003420:	2301      	movls	r3, #1
 8003422:	2300      	movhi	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0e7      	b.n	80035fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a78      	ldr	r2, [pc, #480]	; (8003614 <HAL_I2C_Init+0x280>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a6a      	ldr	r2, [pc, #424]	; (8003608 <HAL_I2C_Init+0x274>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d802      	bhi.n	8003468 <HAL_I2C_Init+0xd4>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	e009      	b.n	800347c <HAL_I2C_Init+0xe8>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	4a69      	ldr	r2, [pc, #420]	; (8003618 <HAL_I2C_Init+0x284>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	3301      	adds	r3, #1
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800348e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	495c      	ldr	r1, [pc, #368]	; (8003608 <HAL_I2C_Init+0x274>)
 8003498:	428b      	cmp	r3, r1
 800349a:	d819      	bhi.n	80034d0 <HAL_I2C_Init+0x13c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034b0:	400b      	ands	r3, r1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <HAL_I2C_Init+0x138>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e59      	subs	r1, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ca:	e051      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034cc:	2304      	movs	r3, #4
 80034ce:	e04f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d111      	bne.n	80034fc <HAL_I2C_Init+0x168>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	e012      	b.n	8003522 <HAL_I2C_Init+0x18e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1e58      	subs	r0, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	0099      	lsls	r1, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003512:	3301      	adds	r3, #1
 8003514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x196>
 8003526:	2301      	movs	r3, #1
 8003528:	e022      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10e      	bne.n	8003550 <HAL_I2C_Init+0x1bc>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1e58      	subs	r0, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6859      	ldr	r1, [r3, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	440b      	add	r3, r1
 8003540:	fbb0 f3f3 	udiv	r3, r0, r3
 8003544:	3301      	adds	r3, #1
 8003546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800354e:	e00f      	b.n	8003570 <HAL_I2C_Init+0x1dc>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1e58      	subs	r0, r3, #1
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	0099      	lsls	r1, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	fbb0 f3f3 	udiv	r3, r0, r3
 8003566:	3301      	adds	r3, #1
 8003568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800356c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	6809      	ldr	r1, [r1, #0]
 8003574:	4313      	orrs	r3, r2
 8003576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800359e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6911      	ldr	r1, [r2, #16]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	68d2      	ldr	r2, [r2, #12]
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695a      	ldr	r2, [r3, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	000186a0 	.word	0x000186a0
 800360c:	001e847f 	.word	0x001e847f
 8003610:	003d08ff 	.word	0x003d08ff
 8003614:	431bde83 	.word	0x431bde83
 8003618:	10624dd3 	.word	0x10624dd3

0800361c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e264      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d075      	beq.n	8003726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800363a:	4ba3      	ldr	r3, [pc, #652]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 030c 	and.w	r3, r3, #12
 8003642:	2b04      	cmp	r3, #4
 8003644:	d00c      	beq.n	8003660 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003646:	4ba0      	ldr	r3, [pc, #640]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800364e:	2b08      	cmp	r3, #8
 8003650:	d112      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003652:	4b9d      	ldr	r3, [pc, #628]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365e:	d10b      	bne.n	8003678 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003660:	4b99      	ldr	r3, [pc, #612]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05b      	beq.n	8003724 <HAL_RCC_OscConfig+0x108>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d157      	bne.n	8003724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e23f      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003680:	d106      	bne.n	8003690 <HAL_RCC_OscConfig+0x74>
 8003682:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a90      	ldr	r2, [pc, #576]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	e01d      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x98>
 800369a:	4b8b      	ldr	r3, [pc, #556]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a8a      	ldr	r2, [pc, #552]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a87      	ldr	r2, [pc, #540]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0xb0>
 80036b4:	4b84      	ldr	r3, [pc, #528]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a83      	ldr	r2, [pc, #524]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b81      	ldr	r3, [pc, #516]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a80      	ldr	r2, [pc, #512]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d013      	beq.n	80036fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d4:	f7ff faba 	bl	8002c4c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036dc:	f7ff fab6 	bl	8002c4c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b64      	cmp	r3, #100	; 0x64
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e204      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0xc0>
 80036fa:	e014      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7ff faa6 	bl	8002c4c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7ff faa2 	bl	8002c4c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1f0      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003716:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0xe8>
 8003722:	e000      	b.n	8003726 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003732:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800373e:	4b62      	ldr	r3, [pc, #392]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003746:	2b08      	cmp	r3, #8
 8003748:	d11c      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800374a:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003756:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d005      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d001      	beq.n	800376e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e1c4      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376e:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4952      	ldr	r1, [pc, #328]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 800377e:	4313      	orrs	r3, r2
 8003780:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	e03a      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378c:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <HAL_RCC_OscConfig+0x2b0>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003792:	f7ff fa5b 	bl	8002c4c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379a:	f7ff fa57 	bl	8002c4c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e1a5      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ac:	4b46      	ldr	r3, [pc, #280]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b43      	ldr	r3, [pc, #268]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4940      	ldr	r1, [pc, #256]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <HAL_RCC_OscConfig+0x2b0>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7ff fa3a 	bl	8002c4c <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037dc:	f7ff fa36 	bl	8002c4c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e184      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ee:	4b36      	ldr	r3, [pc, #216]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d030      	beq.n	8003868 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380e:	4b30      	ldr	r3, [pc, #192]	; (80038d0 <HAL_RCC_OscConfig+0x2b4>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003814:	f7ff fa1a 	bl	8002c4c <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800381c:	f7ff fa16 	bl	8002c4c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e164      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382e:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f0      	beq.n	800381c <HAL_RCC_OscConfig+0x200>
 800383a:	e015      	b.n	8003868 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x2b4>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7ff fa03 	bl	8002c4c <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384a:	f7ff f9ff 	bl	8002c4c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e14d      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 80a0 	beq.w	80039b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387a:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10f      	bne.n	80038a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a0e      	ldr	r2, [pc, #56]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <HAL_RCC_OscConfig+0x2ac>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x2b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d121      	bne.n	80038f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <HAL_RCC_OscConfig+0x2b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a07      	ldr	r2, [pc, #28]	; (80038d4 <HAL_RCC_OscConfig+0x2b8>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7ff f9c5 	bl	8002c4c <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	e011      	b.n	80038ea <HAL_RCC_OscConfig+0x2ce>
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	42470000 	.word	0x42470000
 80038d0:	42470e80 	.word	0x42470e80
 80038d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d8:	f7ff f9b8 	bl	8002c4c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e106      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ea:	4b85      	ldr	r3, [pc, #532]	; (8003b00 <HAL_RCC_OscConfig+0x4e4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0f0      	beq.n	80038d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d106      	bne.n	800390c <HAL_RCC_OscConfig+0x2f0>
 80038fe:	4b81      	ldr	r3, [pc, #516]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a80      	ldr	r2, [pc, #512]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
 800390a:	e01c      	b.n	8003946 <HAL_RCC_OscConfig+0x32a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b05      	cmp	r3, #5
 8003912:	d10c      	bne.n	800392e <HAL_RCC_OscConfig+0x312>
 8003914:	4b7b      	ldr	r3, [pc, #492]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a7a      	ldr	r2, [pc, #488]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 800391a:	f043 0304 	orr.w	r3, r3, #4
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
 8003920:	4b78      	ldr	r3, [pc, #480]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4a77      	ldr	r2, [pc, #476]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	e00b      	b.n	8003946 <HAL_RCC_OscConfig+0x32a>
 800392e:	4b75      	ldr	r3, [pc, #468]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a74      	ldr	r2, [pc, #464]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003934:	f023 0301 	bic.w	r3, r3, #1
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
 800393a:	4b72      	ldr	r3, [pc, #456]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a71      	ldr	r2, [pc, #452]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d015      	beq.n	800397a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7ff f97d 	bl	8002c4c <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7ff f979 	bl	8002c4c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e0c5      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396c:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0ee      	beq.n	8003956 <HAL_RCC_OscConfig+0x33a>
 8003978:	e014      	b.n	80039a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397a:	f7ff f967 	bl	8002c4c <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003980:	e00a      	b.n	8003998 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7ff f963 	bl	8002c4c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0af      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003998:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1ee      	bne.n	8003982 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039aa:	4b56      	ldr	r3, [pc, #344]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 80039b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 809b 	beq.w	8003af6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039c0:	4b50      	ldr	r3, [pc, #320]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d05c      	beq.n	8003a86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d141      	bne.n	8003a58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d4:	4b4c      	ldr	r3, [pc, #304]	; (8003b08 <HAL_RCC_OscConfig+0x4ec>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7ff f937 	bl	8002c4c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e2:	f7ff f933 	bl	8002c4c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e081      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	019b      	lsls	r3, r3, #6
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	041b      	lsls	r3, r3, #16
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	4937      	ldr	r1, [pc, #220]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2a:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x4ec>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7ff f90c 	bl	8002c4c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a38:	f7ff f908 	bl	8002c4c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e056      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0x41c>
 8003a56:	e04e      	b.n	8003af6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x4ec>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7ff f8f5 	bl	8002c4c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a66:	f7ff f8f1 	bl	8002c4c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e03f      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0x44a>
 8003a84:	e037      	b.n	8003af6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e032      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a92:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_RCC_OscConfig+0x4e8>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d028      	beq.n	8003af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d121      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d11a      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ac8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d111      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	3b01      	subs	r3, #1
 8003adc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40007000 	.word	0x40007000
 8003b04:	40023800 	.word	0x40023800
 8003b08:	42470060 	.word	0x42470060

08003b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0cc      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b20:	4b68      	ldr	r3, [pc, #416]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d90c      	bls.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2e:	4b65      	ldr	r3, [pc, #404]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	4b63      	ldr	r3, [pc, #396]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d001      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0b8      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d020      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b78:	4b53      	ldr	r3, [pc, #332]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b84:	4b50      	ldr	r3, [pc, #320]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	494d      	ldr	r1, [pc, #308]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d044      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b47      	ldr	r3, [pc, #284]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d119      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e07f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bda:	4b3b      	ldr	r3, [pc, #236]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e067      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bea:	4b37      	ldr	r3, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4934      	ldr	r1, [pc, #208]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bfc:	f7ff f826 	bl	8002c4c <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c04:	f7ff f822 	bl	8002c4c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e04f      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 020c 	and.w	r2, r3, #12
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d1eb      	bne.n	8003c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d20c      	bcs.n	8003c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b22      	ldr	r3, [pc, #136]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e032      	b.n	8003cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c60:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4916      	ldr	r1, [pc, #88]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c7e:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	490e      	ldr	r1, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c92:	f000 f821 	bl	8003cd8 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490a      	ldr	r1, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x1c0>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe ff86 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	0800958c 	.word	0x0800958c
 8003cd0:	20000014 	.word	0x20000014
 8003cd4:	20000018 	.word	0x20000018

08003cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf0:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d00d      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x40>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	f200 80bd 	bhi.w	8003e7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <HAL_RCC_GetSysClockFreq+0x34>
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d003      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d0a:	e0b7      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b61      	ldr	r3, [pc, #388]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d0e:	60bb      	str	r3, [r7, #8]
       break;
 8003d10:	e0b7      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003d14:	60bb      	str	r3, [r7, #8]
      break;
 8003d16:	e0b4      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d18:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d22:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d04d      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	461a      	mov	r2, r3
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d3e:	f04f 0100 	mov.w	r1, #0
 8003d42:	ea02 0800 	and.w	r8, r2, r0
 8003d46:	ea03 0901 	and.w	r9, r3, r1
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	014b      	lsls	r3, r1, #5
 8003d58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d5c:	0142      	lsls	r2, r0, #5
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	ebb0 0008 	subs.w	r0, r0, r8
 8003d66:	eb61 0109 	sbc.w	r1, r1, r9
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	018b      	lsls	r3, r1, #6
 8003d74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d78:	0182      	lsls	r2, r0, #6
 8003d7a:	1a12      	subs	r2, r2, r0
 8003d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	00d9      	lsls	r1, r3, #3
 8003d8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d8e:	00d0      	lsls	r0, r2, #3
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	eb12 0208 	adds.w	r2, r2, r8
 8003d98:	eb43 0309 	adc.w	r3, r3, r9
 8003d9c:	f04f 0000 	mov.w	r0, #0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	0259      	lsls	r1, r3, #9
 8003da6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003daa:	0250      	lsls	r0, r2, #9
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	f7fc fd12 	bl	80007e4 <__aeabi_uldivmod>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	e04a      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003dda:	f04f 0100 	mov.w	r1, #0
 8003dde:	ea02 0400 	and.w	r4, r2, r0
 8003de2:	ea03 0501 	and.w	r5, r3, r1
 8003de6:	4620      	mov	r0, r4
 8003de8:	4629      	mov	r1, r5
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	014b      	lsls	r3, r1, #5
 8003df4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003df8:	0142      	lsls	r2, r0, #5
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	1b00      	subs	r0, r0, r4
 8003e00:	eb61 0105 	sbc.w	r1, r1, r5
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	018b      	lsls	r3, r1, #6
 8003e0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e12:	0182      	lsls	r2, r0, #6
 8003e14:	1a12      	subs	r2, r2, r0
 8003e16:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1a:	f04f 0000 	mov.w	r0, #0
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	00d9      	lsls	r1, r3, #3
 8003e24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e28:	00d0      	lsls	r0, r2, #3
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	1912      	adds	r2, r2, r4
 8003e30:	eb45 0303 	adc.w	r3, r5, r3
 8003e34:	f04f 0000 	mov.w	r0, #0
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	0299      	lsls	r1, r3, #10
 8003e3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e42:	0290      	lsls	r0, r2, #10
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	f7fc fcc6 	bl	80007e4 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e60:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	60bb      	str	r3, [r7, #8]
      break;
 8003e7a:	e002      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e7e:	60bb      	str	r3, [r7, #8]
      break;
 8003e80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e82:	68bb      	ldr	r3, [r7, #8]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	00f42400 	.word	0x00f42400
 8003e98:	007a1200 	.word	0x007a1200

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ea0:	4b03      	ldr	r3, [pc, #12]	; (8003eb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000014 	.word	0x20000014

08003eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eb8:	f7ff fff0 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	0a9b      	lsrs	r3, r3, #10
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	0800959c 	.word	0x0800959c

08003edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ee0:	f7ff ffdc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0b5b      	lsrs	r3, r3, #13
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	0800959c 	.word	0x0800959c

08003f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07b      	b.n	800400e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f26:	d009      	beq.n	8003f3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	61da      	str	r2, [r3, #28]
 8003f2e:	e005      	b.n	8003f3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fe fc10 	bl	800277c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	ea42 0103 	orr.w	r1, r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	f003 0104 	and.w	r1, r3, #4
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f003 0210 	and.w	r2, r3, #16
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69da      	ldr	r2, [r3, #28]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ffc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b088      	sub	sp, #32
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	603b      	str	r3, [r7, #0]
 8004022:	4613      	mov	r3, r2
 8004024:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_SPI_Transmit+0x22>
 8004034:	2302      	movs	r3, #2
 8004036:	e126      	b.n	8004286 <HAL_SPI_Transmit+0x270>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004040:	f7fe fe04 	bl	8002c4c <HAL_GetTick>
 8004044:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d002      	beq.n	800405c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004056:	2302      	movs	r3, #2
 8004058:	77fb      	strb	r3, [r7, #31]
    goto error;
 800405a:	e10b      	b.n	8004274 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Transmit+0x52>
 8004062:	88fb      	ldrh	r3, [r7, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800406c:	e102      	b.n	8004274 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2203      	movs	r2, #3
 8004072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040b4:	d10f      	bne.n	80040d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d007      	beq.n	80040f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fc:	d14b      	bne.n	8004196 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_SPI_Transmit+0xf6>
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d13e      	bne.n	800418a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	881a      	ldrh	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	1c9a      	adds	r2, r3, #2
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004130:	e02b      	b.n	800418a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b02      	cmp	r3, #2
 800413e:	d112      	bne.n	8004166 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	881a      	ldrh	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	86da      	strh	r2, [r3, #54]	; 0x36
 8004164:	e011      	b.n	800418a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004166:	f7fe fd71 	bl	8002c4c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d803      	bhi.n	800417e <HAL_SPI_Transmit+0x168>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d102      	bne.n	8004184 <HAL_SPI_Transmit+0x16e>
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004188:	e074      	b.n	8004274 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1ce      	bne.n	8004132 <HAL_SPI_Transmit+0x11c>
 8004194:	e04c      	b.n	8004230 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_Transmit+0x18e>
 800419e:	8afb      	ldrh	r3, [r7, #22]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d140      	bne.n	8004226 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80041ca:	e02c      	b.n	8004226 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d113      	bne.n	8004202 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8004200:	e011      	b.n	8004226 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004202:	f7fe fd23 	bl	8002c4c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d803      	bhi.n	800421a <HAL_SPI_Transmit+0x204>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004218:	d102      	bne.n	8004220 <HAL_SPI_Transmit+0x20a>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d102      	bne.n	8004226 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004224:	e026      	b.n	8004274 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1cd      	bne.n	80041cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	6839      	ldr	r1, [r7, #0]
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 fbcb 	bl	80049d0 <SPI_EndRxTxTransaction>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e000      	b.n	8004274 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004272:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004284:	7ffb      	ldrb	r3, [r7, #31]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3720      	adds	r7, #32
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b088      	sub	sp, #32
 8004292:	af02      	add	r7, sp, #8
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042aa:	d112      	bne.n	80042d2 <HAL_SPI_Receive+0x44>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10e      	bne.n	80042d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2204      	movs	r2, #4
 80042b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f8f1 	bl	80044b0 <HAL_SPI_TransmitReceive>
 80042ce:	4603      	mov	r3, r0
 80042d0:	e0ea      	b.n	80044a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_SPI_Receive+0x52>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0e3      	b.n	80044a8 <HAL_SPI_Receive+0x21a>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e8:	f7fe fcb0 	bl	8002c4c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042fe:	e0ca      	b.n	8004496 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_Receive+0x7e>
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004310:	e0c1      	b.n	8004496 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2204      	movs	r2, #4
 8004316:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	88fa      	ldrh	r2, [r7, #6]
 800432a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004358:	d10f      	bne.n	800437a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004368:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d007      	beq.n	8004398 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004396:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d162      	bne.n	8004466 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043a0:	e02e      	b.n	8004400 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d115      	bne.n	80043dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f103 020c 	add.w	r2, r3, #12
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043da:	e011      	b.n	8004400 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043dc:	f7fe fc36 	bl	8002c4c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d803      	bhi.n	80043f4 <HAL_SPI_Receive+0x166>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d102      	bne.n	80043fa <HAL_SPI_Receive+0x16c>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d102      	bne.n	8004400 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043fe:	e04a      	b.n	8004496 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1cb      	bne.n	80043a2 <HAL_SPI_Receive+0x114>
 800440a:	e031      	b.n	8004470 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d113      	bne.n	8004442 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	b292      	uxth	r2, r2
 8004426:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	1c9a      	adds	r2, r3, #2
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004440:	e011      	b.n	8004466 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004442:	f7fe fc03 	bl	8002c4c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d803      	bhi.n	800445a <HAL_SPI_Receive+0x1cc>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d102      	bne.n	8004460 <HAL_SPI_Receive+0x1d2>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004464:	e017      	b.n	8004496 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1cd      	bne.n	800440c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	6839      	ldr	r1, [r7, #0]
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fa45 	bl	8004904 <SPI_EndRxTransaction>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2220      	movs	r2, #32
 8004484:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	75fb      	strb	r3, [r7, #23]
 8004492:	e000      	b.n	8004496 <HAL_SPI_Receive+0x208>
  }

error :
 8004494:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08c      	sub	sp, #48	; 0x30
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044be:	2301      	movs	r3, #1
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d101      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x26>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e18a      	b.n	80047ec <HAL_SPI_TransmitReceive+0x33c>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044de:	f7fe fbb5 	bl	8002c4c <HAL_GetTick>
 80044e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d00f      	beq.n	8004520 <HAL_SPI_TransmitReceive+0x70>
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004506:	d107      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x68>
 8004510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004514:	2b04      	cmp	r3, #4
 8004516:	d003      	beq.n	8004520 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004518:	2302      	movs	r3, #2
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800451e:	e15b      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d005      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x82>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_SPI_TransmitReceive+0x82>
 800452c:	887b      	ldrh	r3, [r7, #2]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004538:	e14e      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b04      	cmp	r3, #4
 8004544:	d003      	beq.n	800454e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2205      	movs	r2, #5
 800454a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	887a      	ldrh	r2, [r7, #2]
 800455e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	887a      	ldrh	r2, [r7, #2]
 8004564:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	887a      	ldrh	r2, [r7, #2]
 8004576:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d007      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045aa:	d178      	bne.n	800469e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_SPI_TransmitReceive+0x10a>
 80045b4:	8b7b      	ldrh	r3, [r7, #26]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d166      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	881a      	ldrh	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045de:	e053      	b.n	8004688 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d11b      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x176>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d016      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x176>
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d113      	bne.n	8004626 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	881a      	ldrh	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d119      	bne.n	8004668 <HAL_SPI_TransmitReceive+0x1b8>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004638:	b29b      	uxth	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d014      	beq.n	8004668 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	b292      	uxth	r2, r2
 800464a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	1c9a      	adds	r2, r3, #2
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004664:	2301      	movs	r3, #1
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004668:	f7fe faf0 	bl	8002c4c <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004674:	429a      	cmp	r2, r3
 8004676:	d807      	bhi.n	8004688 <HAL_SPI_TransmitReceive+0x1d8>
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d003      	beq.n	8004688 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004686:	e0a7      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800468c:	b29b      	uxth	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1a6      	bne.n	80045e0 <HAL_SPI_TransmitReceive+0x130>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1a1      	bne.n	80045e0 <HAL_SPI_TransmitReceive+0x130>
 800469c:	e07c      	b.n	8004798 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_SPI_TransmitReceive+0x1fc>
 80046a6:	8b7b      	ldrh	r3, [r7, #26]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d16b      	bne.n	8004784 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	7812      	ldrb	r2, [r2, #0]
 80046b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d2:	e057      	b.n	8004784 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d11c      	bne.n	800471c <HAL_SPI_TransmitReceive+0x26c>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d017      	beq.n	800471c <HAL_SPI_TransmitReceive+0x26c>
 80046ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d114      	bne.n	800471c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004718:	2300      	movs	r3, #0
 800471a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b01      	cmp	r3, #1
 8004728:	d119      	bne.n	800475e <HAL_SPI_TransmitReceive+0x2ae>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d014      	beq.n	800475e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68da      	ldr	r2, [r3, #12]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800475a:	2301      	movs	r3, #1
 800475c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800475e:	f7fe fa75 	bl	8002c4c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800476a:	429a      	cmp	r2, r3
 800476c:	d803      	bhi.n	8004776 <HAL_SPI_TransmitReceive+0x2c6>
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d102      	bne.n	800477c <HAL_SPI_TransmitReceive+0x2cc>
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004782:	e029      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1a2      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x224>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d19d      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f917 	bl	80049d0 <SPI_EndRxTxTransaction>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d006      	beq.n	80047b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047b4:	e010      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10b      	bne.n	80047d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	e000      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3730      	adds	r7, #48	; 0x30
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004804:	f7fe fa22 	bl	8002c4c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4413      	add	r3, r2
 8004812:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004814:	f7fe fa1a 	bl	8002c4c <HAL_GetTick>
 8004818:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800481a:	4b39      	ldr	r3, [pc, #228]	; (8004900 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	015b      	lsls	r3, r3, #5
 8004820:	0d1b      	lsrs	r3, r3, #20
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	fb02 f303 	mul.w	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800482a:	e054      	b.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d050      	beq.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004834:	f7fe fa0a 	bl	8002c4c <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	429a      	cmp	r2, r3
 8004842:	d902      	bls.n	800484a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d13d      	bne.n	80048c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004862:	d111      	bne.n	8004888 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486c:	d004      	beq.n	8004878 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d107      	bne.n	8004888 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004886:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004890:	d10f      	bne.n	80048b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e017      	b.n	80048f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d19b      	bne.n	800482c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000014 	.word	0x20000014

08004904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004918:	d111      	bne.n	800493e <SPI_EndRxTransaction+0x3a>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004922:	d004      	beq.n	800492e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492c:	d107      	bne.n	800493e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d12a      	bne.n	800499e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d012      	beq.n	8004978 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2200      	movs	r2, #0
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff ff49 	bl	80047f4 <SPI_WaitFlagStateUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02d      	beq.n	80049c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e026      	b.n	80049c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	2101      	movs	r1, #1
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff ff36 	bl	80047f4 <SPI_WaitFlagStateUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d01a      	beq.n	80049c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e013      	b.n	80049c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2101      	movs	r1, #1
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff ff23 	bl	80047f4 <SPI_WaitFlagStateUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e000      	b.n	80049c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049dc:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <SPI_EndRxTxTransaction+0x7c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <SPI_EndRxTxTransaction+0x80>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	0d5b      	lsrs	r3, r3, #21
 80049e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049ec:	fb02 f303 	mul.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049fa:	d112      	bne.n	8004a22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2200      	movs	r2, #0
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fef4 	bl	80047f4 <SPI_WaitFlagStateUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d016      	beq.n	8004a40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e00f      	b.n	8004a42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d0f2      	beq.n	8004a22 <SPI_EndRxTxTransaction+0x52>
 8004a3c:	e000      	b.n	8004a40 <SPI_EndRxTxTransaction+0x70>
        break;
 8004a3e:	bf00      	nop
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000014 	.word	0x20000014
 8004a50:	165e9f81 	.word	0x165e9f81

08004a54 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e034      	b.n	8004ad4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f7fc fe1c 	bl	80016bc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f001 fc6e 	bl	8006370 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	f001 fcb8 	bl	8006414 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6858      	ldr	r0, [r3, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	f001 fced 	bl	8006490 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	6892      	ldr	r2, [r2, #8]
 8004abe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	f041 0101 	orr.w	r1, r1, #1
 8004ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e041      	b.n	8004b72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fd ff46 	bl	8002994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f000 fa96 	bl	800504c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d001      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e04e      	b.n	8004c32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	; (8004c40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d022      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bbe:	d01d      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d018      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d013      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00e      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIM_Base_Start_IT+0x80>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d111      	bne.n	8004c20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d010      	beq.n	8004c30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0201 	orr.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1e:	e007      	b.n	8004c30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40010400 	.word	0x40010400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40001800 	.word	0x40001800

08004c5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0202 	mvn.w	r2, #2
 8004c88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9b5 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9a7 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f9b8 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0204 	mvn.w	r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f98b 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f97d 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f98e 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b08      	cmp	r3, #8
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0208 	mvn.w	r2, #8
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2204      	movs	r2, #4
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f961 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f953 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f964 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0310 	and.w	r3, r3, #16
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0210 	mvn.w	r2, #16
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f937 	bl	800500e <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f929 	bl	8004ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f93a 	bl	8005022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10e      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d107      	bne.n	8004de0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0201 	mvn.w	r2, #1
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7fd fc52 	bl	8002684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d10e      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d107      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fae0 	bl	80053cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d10e      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d107      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f8ff 	bl	8005036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d10e      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d107      	bne.n	8004e64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0220 	mvn.w	r2, #32
 8004e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 faaa 	bl	80053b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_TIM_ConfigClockSource+0x1c>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e0b4      	b.n	8004ff2 <HAL_TIM_ConfigClockSource+0x186>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec0:	d03e      	beq.n	8004f40 <HAL_TIM_ConfigClockSource+0xd4>
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec6:	f200 8087 	bhi.w	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	f000 8086 	beq.w	8004fde <HAL_TIM_ConfigClockSource+0x172>
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed6:	d87f      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b70      	cmp	r3, #112	; 0x70
 8004eda:	d01a      	beq.n	8004f12 <HAL_TIM_ConfigClockSource+0xa6>
 8004edc:	2b70      	cmp	r3, #112	; 0x70
 8004ede:	d87b      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b60      	cmp	r3, #96	; 0x60
 8004ee2:	d050      	beq.n	8004f86 <HAL_TIM_ConfigClockSource+0x11a>
 8004ee4:	2b60      	cmp	r3, #96	; 0x60
 8004ee6:	d877      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b50      	cmp	r3, #80	; 0x50
 8004eea:	d03c      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0xfa>
 8004eec:	2b50      	cmp	r3, #80	; 0x50
 8004eee:	d873      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b40      	cmp	r3, #64	; 0x40
 8004ef2:	d058      	beq.n	8004fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d86f      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b30      	cmp	r3, #48	; 0x30
 8004efa:	d064      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004efc:	2b30      	cmp	r3, #48	; 0x30
 8004efe:	d86b      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d060      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d867      	bhi.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d05c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d05a      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	e062      	b.n	8004fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6899      	ldr	r1, [r3, #8]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f000 f9ad 	bl	8005280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	609a      	str	r2, [r3, #8]
      break;
 8004f3e:	e04f      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	6899      	ldr	r1, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f000 f996 	bl	8005280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f62:	609a      	str	r2, [r3, #8]
      break;
 8004f64:	e03c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6859      	ldr	r1, [r3, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f000 f90a 	bl	800518c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2150      	movs	r1, #80	; 0x50
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f963 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004f84:	e02c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6859      	ldr	r1, [r3, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f000 f929 	bl	80051ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2160      	movs	r1, #96	; 0x60
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f953 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004fa4:	e01c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6859      	ldr	r1, [r3, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f000 f8ea 	bl	800518c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2140      	movs	r1, #64	; 0x40
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f943 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004fc4:	e00c      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f000 f93a 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004fd6:	e003      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
      break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a40      	ldr	r2, [pc, #256]	; (8005160 <TIM_Base_SetConfig+0x114>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506a:	d00f      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a3d      	ldr	r2, [pc, #244]	; (8005164 <TIM_Base_SetConfig+0x118>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00b      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a3c      	ldr	r2, [pc, #240]	; (8005168 <TIM_Base_SetConfig+0x11c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d007      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a3b      	ldr	r2, [pc, #236]	; (800516c <TIM_Base_SetConfig+0x120>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d003      	beq.n	800508c <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a3a      	ldr	r2, [pc, #232]	; (8005170 <TIM_Base_SetConfig+0x124>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d108      	bne.n	800509e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a2f      	ldr	r2, [pc, #188]	; (8005160 <TIM_Base_SetConfig+0x114>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d02b      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d027      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <TIM_Base_SetConfig+0x118>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d023      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a2b      	ldr	r2, [pc, #172]	; (8005168 <TIM_Base_SetConfig+0x11c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01f      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	; (800516c <TIM_Base_SetConfig+0x120>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01b      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a29      	ldr	r2, [pc, #164]	; (8005170 <TIM_Base_SetConfig+0x124>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d017      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a28      	ldr	r2, [pc, #160]	; (8005174 <TIM_Base_SetConfig+0x128>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a27      	ldr	r2, [pc, #156]	; (8005178 <TIM_Base_SetConfig+0x12c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00f      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a26      	ldr	r2, [pc, #152]	; (800517c <TIM_Base_SetConfig+0x130>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00b      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a25      	ldr	r2, [pc, #148]	; (8005180 <TIM_Base_SetConfig+0x134>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d007      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a24      	ldr	r2, [pc, #144]	; (8005184 <TIM_Base_SetConfig+0x138>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d003      	beq.n	80050fe <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a23      	ldr	r2, [pc, #140]	; (8005188 <TIM_Base_SetConfig+0x13c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d108      	bne.n	8005110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a0a      	ldr	r2, [pc, #40]	; (8005160 <TIM_Base_SetConfig+0x114>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0xf8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a0c      	ldr	r2, [pc, #48]	; (8005170 <TIM_Base_SetConfig+0x124>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d103      	bne.n	800514c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	615a      	str	r2, [r3, #20]
}
 8005152:	bf00      	nop
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40010000 	.word	0x40010000
 8005164:	40000400 	.word	0x40000400
 8005168:	40000800 	.word	0x40000800
 800516c:	40000c00 	.word	0x40000c00
 8005170:	40010400 	.word	0x40010400
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400
 800517c:	40014800 	.word	0x40014800
 8005180:	40001800 	.word	0x40001800
 8005184:	40001c00 	.word	0x40001c00
 8005188:	40002000 	.word	0x40002000

0800518c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0201 	bic.w	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 030a 	bic.w	r3, r3, #10
 80051c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b087      	sub	sp, #28
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0210 	bic.w	r2, r3, #16
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	031b      	lsls	r3, r3, #12
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	f043 0307 	orr.w	r3, r3, #7
 800526c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800529a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	021a      	lsls	r2, r3, #8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	609a      	str	r2, [r3, #8]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e05a      	b.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a21      	ldr	r2, [pc, #132]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005324:	d01d      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1b      	ldr	r2, [pc, #108]	; (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a15      	ldr	r2, [pc, #84]	; (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d10c      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4313      	orrs	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010000 	.word	0x40010000
 80053a0:	40000400 	.word	0x40000400
 80053a4:	40000800 	.word	0x40000800
 80053a8:	40000c00 	.word	0x40000c00
 80053ac:	40010400 	.word	0x40010400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40001800 	.word	0x40001800

080053b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e03f      	b.n	8005472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd fb40 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2224      	movs	r2, #36	; 0x24
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fddb 	bl	8005fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08a      	sub	sp, #40	; 0x28
 800547e:	af02      	add	r7, sp, #8
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	603b      	str	r3, [r7, #0]
 8005486:	4613      	mov	r3, r2
 8005488:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b20      	cmp	r3, #32
 8005498:	d17c      	bne.n	8005594 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <HAL_UART_Transmit+0x2c>
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e075      	b.n	8005596 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_UART_Transmit+0x3e>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e06e      	b.n	8005596 <HAL_UART_Transmit+0x11c>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2221      	movs	r2, #33	; 0x21
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ce:	f7fd fbbd 	bl	8002c4c <HAL_GetTick>
 80054d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d108      	bne.n	80054fc <HAL_UART_Transmit+0x82>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	e003      	b.n	8005504 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800550c:	e02a      	b.n	8005564 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fb1f 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e036      	b.n	8005596 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800553c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	3302      	adds	r3, #2
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	e007      	b.n	8005556 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1cf      	bne.n	800550e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	2140      	movs	r1, #64	; 0x40
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 faef 	bl	8005b5c <UART_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e006      	b.n	8005596 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005590:	2300      	movs	r3, #0
 8005592:	e000      	b.n	8005596 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005594:	2302      	movs	r3, #2
  }
}
 8005596:	4618      	mov	r0, r3
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	4613      	mov	r3, r2
 80055aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d11d      	bne.n	80055f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Receive_IT+0x26>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e016      	b.n	80055f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Receive_IT+0x38>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e00f      	b.n	80055f6 <HAL_UART_Receive_IT+0x58>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	461a      	mov	r2, r3
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 fb24 	bl	8005c38 <UART_Start_Receive_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	e000      	b.n	80055f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055f4:	2302      	movs	r3, #2
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b0ba      	sub	sp, #232	; 0xe8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005626:	2300      	movs	r3, #0
 8005628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800562c:	2300      	movs	r3, #0
 800562e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800563e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10f      	bne.n	8005666 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_UART_IRQHandler+0x66>
 8005652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fc03 	bl	8005e6a <UART_Receive_IT>
      return;
 8005664:	e256      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80de 	beq.w	800582c <HAL_UART_IRQHandler+0x22c>
 8005670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005680:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80d1 	beq.w	800582c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <HAL_UART_IRQHandler+0xae>
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	f043 0201 	orr.w	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00b      	beq.n	80056d2 <HAL_UART_IRQHandler+0xd2>
 80056ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0202 	orr.w	r2, r3, #2
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_UART_IRQHandler+0xf6>
 80056de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d011      	beq.n	8005726 <HAL_UART_IRQHandler+0x126>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800570e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0208 	orr.w	r2, r3, #8
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 81ed 	beq.w	8005b0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b00      	cmp	r3, #0
 800573a:	d008      	beq.n	800574e <HAL_UART_IRQHandler+0x14e>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fb8e 	bl	8005e6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <HAL_UART_IRQHandler+0x17a>
 8005772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005776:	2b00      	cmp	r3, #0
 8005778:	d04f      	beq.n	800581a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa96 	bl	8005cac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d141      	bne.n	8005812 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3314      	adds	r3, #20
 8005794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3314      	adds	r3, #20
 80057b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1d9      	bne.n	800578e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d013      	beq.n	800580a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	4a7d      	ldr	r2, [pc, #500]	; (80059dc <HAL_UART_IRQHandler+0x3dc>)
 80057e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd fbdd 	bl	8002fae <HAL_DMA_Abort_IT>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	e00e      	b.n	8005828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f990 	bl	8005b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	e00a      	b.n	8005828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f98c 	bl	8005b30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e006      	b.n	8005828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f988 	bl	8005b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005826:	e170      	b.n	8005b0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	bf00      	nop
    return;
 800582a:	e16e      	b.n	8005b0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	2b01      	cmp	r3, #1
 8005832:	f040 814a 	bne.w	8005aca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8143 	beq.w	8005aca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 813c 	beq.w	8005aca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60bb      	str	r3, [r7, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	f040 80b4 	bne.w	80059e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8140 	beq.w	8005b0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005896:	429a      	cmp	r2, r3
 8005898:	f080 8139 	bcs.w	8005b0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ae:	f000 8088 	beq.w	80059c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ee:	e841 2300 	strex	r3, r2, [r1]
 80058f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1d9      	bne.n	80058b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3314      	adds	r3, #20
 8005904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800590e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800592a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e1      	bne.n	80058fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3314      	adds	r3, #20
 8005940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800594a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	3314      	adds	r3, #20
 800595a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800595e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800596c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e3      	bne.n	800593a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2220      	movs	r2, #32
 8005976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80059a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e3      	bne.n	8005980 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fd fa86 	bl	8002ece <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8b6 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059d8:	e099      	b.n	8005b0e <HAL_UART_IRQHandler+0x50e>
 80059da:	bf00      	nop
 80059dc:	08005d73 	.word	0x08005d73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 808b 	beq.w	8005b12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8086 	beq.w	8005b12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	330c      	adds	r3, #12
 8005a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	330c      	adds	r3, #12
 8005a26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a2a:	647a      	str	r2, [r7, #68]	; 0x44
 8005a2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e3      	bne.n	8005a06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a62:	633a      	str	r2, [r7, #48]	; 0x30
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e3      	bne.n	8005a3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	330c      	adds	r3, #12
 8005a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	e853 3f00 	ldrex	r3, [r3]
 8005a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0310 	bic.w	r3, r3, #16
 8005a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	330c      	adds	r3, #12
 8005aa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005aa8:	61fa      	str	r2, [r7, #28]
 8005aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	69b9      	ldr	r1, [r7, #24]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e3      	bne.n	8005a84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f83e 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ac8:	e023      	b.n	8005b12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_UART_IRQHandler+0x4ea>
 8005ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f959 	bl	8005d9a <UART_Transmit_IT>
    return;
 8005ae8:	e014      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00e      	beq.n	8005b14 <HAL_UART_IRQHandler+0x514>
 8005af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f999 	bl	8005e3a <UART_EndTransmit_IT>
    return;
 8005b08:	e004      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
    return;
 8005b0a:	bf00      	nop
 8005b0c:	e002      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
      return;
 8005b0e:	bf00      	nop
 8005b10:	e000      	b.n	8005b14 <HAL_UART_IRQHandler+0x514>
      return;
 8005b12:	bf00      	nop
  }
}
 8005b14:	37e8      	adds	r7, #232	; 0xe8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop

08005b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b090      	sub	sp, #64	; 0x40
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b6c:	e050      	b.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b74:	d04c      	beq.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7c:	f7fd f866 	bl	8002c4c <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d241      	bcs.n	8005c10 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bac:	637a      	str	r2, [r7, #52]	; 0x34
 8005bae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3314      	adds	r3, #20
 8005bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be0:	623a      	str	r2, [r7, #32]
 8005be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	6a3a      	ldr	r2, [r7, #32]
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e5      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e00f      	b.n	8005c30 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	bf0c      	ite	eq
 8005c20:	2301      	moveq	r3, #1
 8005c22:	2300      	movne	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d09f      	beq.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3740      	adds	r7, #64	; 0x40
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	88fa      	ldrh	r2, [r7, #6]
 8005c50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2222      	movs	r2, #34	; 0x22
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0201 	orr.w	r2, r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0220 	orr.w	r2, r2, #32
 8005c9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b095      	sub	sp, #84	; 0x54
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cd4:	643a      	str	r2, [r7, #64]	; 0x40
 8005cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e5      	bne.n	8005cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3314      	adds	r3, #20
 8005cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f023 0301 	bic.w	r3, r3, #1
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	3314      	adds	r3, #20
 8005d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d119      	bne.n	8005d58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	e853 3f00 	ldrex	r3, [r3]
 8005d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f023 0310 	bic.w	r3, r3, #16
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d44:	61ba      	str	r2, [r7, #24]
 8005d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d48:	6979      	ldr	r1, [r7, #20]
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	e841 2300 	strex	r3, r2, [r1]
 8005d50:	613b      	str	r3, [r7, #16]
   return(result);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e5      	bne.n	8005d24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d66:	bf00      	nop
 8005d68:	3754      	adds	r7, #84	; 0x54
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fecf 	bl	8005b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b21      	cmp	r3, #33	; 0x21
 8005dac:	d13e      	bne.n	8005e2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d114      	bne.n	8005de2 <UART_Transmit_IT+0x48>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d110      	bne.n	8005de2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	1c9a      	adds	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	621a      	str	r2, [r3, #32]
 8005de0:	e008      	b.n	8005df4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6211      	str	r1, [r2, #32]
 8005dec:	781a      	ldrb	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4619      	mov	r1, r3
 8005e02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10f      	bne.n	8005e28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e000      	b.n	8005e2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
  }
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff fe5e 	bl	8005b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b08c      	sub	sp, #48	; 0x30
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b22      	cmp	r3, #34	; 0x22
 8005e7c:	f040 80ab 	bne.w	8005fd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d117      	bne.n	8005eba <UART_Receive_IT+0x50>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d113      	bne.n	8005eba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	1c9a      	adds	r2, r3, #2
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8005eb8:	e026      	b.n	8005f08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ecc:	d007      	beq.n	8005ede <UART_Receive_IT+0x74>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <UART_Receive_IT+0x82>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e008      	b.n	8005efe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d15a      	bne.n	8005fd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0220 	bic.w	r2, r2, #32
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d135      	bne.n	8005fc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330c      	adds	r3, #12
 8005f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	613b      	str	r3, [r7, #16]
   return(result);
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f023 0310 	bic.w	r3, r3, #16
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	623a      	str	r2, [r7, #32]
 8005f84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	69f9      	ldr	r1, [r7, #28]
 8005f88:	6a3a      	ldr	r2, [r7, #32]
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e5      	bne.n	8005f62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b10      	cmp	r3, #16
 8005fa2:	d10a      	bne.n	8005fba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60fb      	str	r3, [r7, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff fdbf 	bl	8005b44 <HAL_UARTEx_RxEventCallback>
 8005fc6:	e002      	b.n	8005fce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fc fd17 	bl	80029fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e002      	b.n	8005fd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3730      	adds	r7, #48	; 0x30
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	b09f      	sub	sp, #124	; 0x7c
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	68d9      	ldr	r1, [r3, #12]
 8005ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	ea40 0301 	orr.w	r3, r0, r1
 8006000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	431a      	orrs	r2, r3
 800600c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	431a      	orrs	r2, r3
 8006012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	4313      	orrs	r3, r2
 8006018:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800601a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006024:	f021 010c 	bic.w	r1, r1, #12
 8006028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800602e:	430b      	orrs	r3, r1
 8006030:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800603c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603e:	6999      	ldr	r1, [r3, #24]
 8006040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	ea40 0301 	orr.w	r3, r0, r1
 8006048:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800604a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4bc5      	ldr	r3, [pc, #788]	; (8006364 <UART_SetConfig+0x384>)
 8006050:	429a      	cmp	r2, r3
 8006052:	d004      	beq.n	800605e <UART_SetConfig+0x7e>
 8006054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	4bc3      	ldr	r3, [pc, #780]	; (8006368 <UART_SetConfig+0x388>)
 800605a:	429a      	cmp	r2, r3
 800605c:	d103      	bne.n	8006066 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800605e:	f7fd ff3d 	bl	8003edc <HAL_RCC_GetPCLK2Freq>
 8006062:	6778      	str	r0, [r7, #116]	; 0x74
 8006064:	e002      	b.n	800606c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006066:	f7fd ff25 	bl	8003eb4 <HAL_RCC_GetPCLK1Freq>
 800606a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800606c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	f040 80b6 	bne.w	80061e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800607a:	461c      	mov	r4, r3
 800607c:	f04f 0500 	mov.w	r5, #0
 8006080:	4622      	mov	r2, r4
 8006082:	462b      	mov	r3, r5
 8006084:	1891      	adds	r1, r2, r2
 8006086:	6439      	str	r1, [r7, #64]	; 0x40
 8006088:	415b      	adcs	r3, r3
 800608a:	647b      	str	r3, [r7, #68]	; 0x44
 800608c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006090:	1912      	adds	r2, r2, r4
 8006092:	eb45 0303 	adc.w	r3, r5, r3
 8006096:	f04f 0000 	mov.w	r0, #0
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	00d9      	lsls	r1, r3, #3
 80060a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060a4:	00d0      	lsls	r0, r2, #3
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	1911      	adds	r1, r2, r4
 80060ac:	6639      	str	r1, [r7, #96]	; 0x60
 80060ae:	416b      	adcs	r3, r5
 80060b0:	667b      	str	r3, [r7, #100]	; 0x64
 80060b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	1891      	adds	r1, r2, r2
 80060be:	63b9      	str	r1, [r7, #56]	; 0x38
 80060c0:	415b      	adcs	r3, r3
 80060c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80060cc:	f7fa fb8a 	bl	80007e4 <__aeabi_uldivmod>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4ba5      	ldr	r3, [pc, #660]	; (800636c <UART_SetConfig+0x38c>)
 80060d6:	fba3 2302 	umull	r2, r3, r3, r2
 80060da:	095b      	lsrs	r3, r3, #5
 80060dc:	011e      	lsls	r6, r3, #4
 80060de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e0:	461c      	mov	r4, r3
 80060e2:	f04f 0500 	mov.w	r5, #0
 80060e6:	4622      	mov	r2, r4
 80060e8:	462b      	mov	r3, r5
 80060ea:	1891      	adds	r1, r2, r2
 80060ec:	6339      	str	r1, [r7, #48]	; 0x30
 80060ee:	415b      	adcs	r3, r3
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
 80060f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80060f6:	1912      	adds	r2, r2, r4
 80060f8:	eb45 0303 	adc.w	r3, r5, r3
 80060fc:	f04f 0000 	mov.w	r0, #0
 8006100:	f04f 0100 	mov.w	r1, #0
 8006104:	00d9      	lsls	r1, r3, #3
 8006106:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800610a:	00d0      	lsls	r0, r2, #3
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	1911      	adds	r1, r2, r4
 8006112:	65b9      	str	r1, [r7, #88]	; 0x58
 8006114:	416b      	adcs	r3, r5
 8006116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	461a      	mov	r2, r3
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	1891      	adds	r1, r2, r2
 8006124:	62b9      	str	r1, [r7, #40]	; 0x28
 8006126:	415b      	adcs	r3, r3
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006132:	f7fa fb57 	bl	80007e4 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4b8c      	ldr	r3, [pc, #560]	; (800636c <UART_SetConfig+0x38c>)
 800613c:	fba3 1302 	umull	r1, r3, r3, r2
 8006140:	095b      	lsrs	r3, r3, #5
 8006142:	2164      	movs	r1, #100	; 0x64
 8006144:	fb01 f303 	mul.w	r3, r1, r3
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	3332      	adds	r3, #50	; 0x32
 800614e:	4a87      	ldr	r2, [pc, #540]	; (800636c <UART_SetConfig+0x38c>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800615c:	441e      	add	r6, r3
 800615e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006160:	4618      	mov	r0, r3
 8006162:	f04f 0100 	mov.w	r1, #0
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	1894      	adds	r4, r2, r2
 800616c:	623c      	str	r4, [r7, #32]
 800616e:	415b      	adcs	r3, r3
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006176:	1812      	adds	r2, r2, r0
 8006178:	eb41 0303 	adc.w	r3, r1, r3
 800617c:	f04f 0400 	mov.w	r4, #0
 8006180:	f04f 0500 	mov.w	r5, #0
 8006184:	00dd      	lsls	r5, r3, #3
 8006186:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800618a:	00d4      	lsls	r4, r2, #3
 800618c:	4622      	mov	r2, r4
 800618e:	462b      	mov	r3, r5
 8006190:	1814      	adds	r4, r2, r0
 8006192:	653c      	str	r4, [r7, #80]	; 0x50
 8006194:	414b      	adcs	r3, r1
 8006196:	657b      	str	r3, [r7, #84]	; 0x54
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	461a      	mov	r2, r3
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	1891      	adds	r1, r2, r2
 80061a4:	61b9      	str	r1, [r7, #24]
 80061a6:	415b      	adcs	r3, r3
 80061a8:	61fb      	str	r3, [r7, #28]
 80061aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80061b2:	f7fa fb17 	bl	80007e4 <__aeabi_uldivmod>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4b6c      	ldr	r3, [pc, #432]	; (800636c <UART_SetConfig+0x38c>)
 80061bc:	fba3 1302 	umull	r1, r3, r3, r2
 80061c0:	095b      	lsrs	r3, r3, #5
 80061c2:	2164      	movs	r1, #100	; 0x64
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	3332      	adds	r3, #50	; 0x32
 80061ce:	4a67      	ldr	r2, [pc, #412]	; (800636c <UART_SetConfig+0x38c>)
 80061d0:	fba2 2303 	umull	r2, r3, r2, r3
 80061d4:	095b      	lsrs	r3, r3, #5
 80061d6:	f003 0207 	and.w	r2, r3, #7
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4432      	add	r2, r6
 80061e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061e2:	e0b9      	b.n	8006358 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e6:	461c      	mov	r4, r3
 80061e8:	f04f 0500 	mov.w	r5, #0
 80061ec:	4622      	mov	r2, r4
 80061ee:	462b      	mov	r3, r5
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	6139      	str	r1, [r7, #16]
 80061f4:	415b      	adcs	r3, r3
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80061fc:	1912      	adds	r2, r2, r4
 80061fe:	eb45 0303 	adc.w	r3, r5, r3
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	00d9      	lsls	r1, r3, #3
 800620c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006210:	00d0      	lsls	r0, r2, #3
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	eb12 0804 	adds.w	r8, r2, r4
 800621a:	eb43 0905 	adc.w	r9, r3, r5
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	4618      	mov	r0, r3
 8006224:	f04f 0100 	mov.w	r1, #0
 8006228:	f04f 0200 	mov.w	r2, #0
 800622c:	f04f 0300 	mov.w	r3, #0
 8006230:	008b      	lsls	r3, r1, #2
 8006232:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006236:	0082      	lsls	r2, r0, #2
 8006238:	4640      	mov	r0, r8
 800623a:	4649      	mov	r1, r9
 800623c:	f7fa fad2 	bl	80007e4 <__aeabi_uldivmod>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4b49      	ldr	r3, [pc, #292]	; (800636c <UART_SetConfig+0x38c>)
 8006246:	fba3 2302 	umull	r2, r3, r3, r2
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	011e      	lsls	r6, r3, #4
 800624e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006250:	4618      	mov	r0, r3
 8006252:	f04f 0100 	mov.w	r1, #0
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	1894      	adds	r4, r2, r2
 800625c:	60bc      	str	r4, [r7, #8]
 800625e:	415b      	adcs	r3, r3
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006266:	1812      	adds	r2, r2, r0
 8006268:	eb41 0303 	adc.w	r3, r1, r3
 800626c:	f04f 0400 	mov.w	r4, #0
 8006270:	f04f 0500 	mov.w	r5, #0
 8006274:	00dd      	lsls	r5, r3, #3
 8006276:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800627a:	00d4      	lsls	r4, r2, #3
 800627c:	4622      	mov	r2, r4
 800627e:	462b      	mov	r3, r5
 8006280:	1814      	adds	r4, r2, r0
 8006282:	64bc      	str	r4, [r7, #72]	; 0x48
 8006284:	414b      	adcs	r3, r1
 8006286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	f04f 0100 	mov.w	r1, #0
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	008b      	lsls	r3, r1, #2
 800629c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062a0:	0082      	lsls	r2, r0, #2
 80062a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80062a6:	f7fa fa9d 	bl	80007e4 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4b2f      	ldr	r3, [pc, #188]	; (800636c <UART_SetConfig+0x38c>)
 80062b0:	fba3 1302 	umull	r1, r3, r3, r2
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	2164      	movs	r1, #100	; 0x64
 80062b8:	fb01 f303 	mul.w	r3, r1, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	3332      	adds	r3, #50	; 0x32
 80062c2:	4a2a      	ldr	r2, [pc, #168]	; (800636c <UART_SetConfig+0x38c>)
 80062c4:	fba2 2303 	umull	r2, r3, r2, r3
 80062c8:	095b      	lsrs	r3, r3, #5
 80062ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062ce:	441e      	add	r6, r3
 80062d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d2:	4618      	mov	r0, r3
 80062d4:	f04f 0100 	mov.w	r1, #0
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	1894      	adds	r4, r2, r2
 80062de:	603c      	str	r4, [r7, #0]
 80062e0:	415b      	adcs	r3, r3
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e8:	1812      	adds	r2, r2, r0
 80062ea:	eb41 0303 	adc.w	r3, r1, r3
 80062ee:	f04f 0400 	mov.w	r4, #0
 80062f2:	f04f 0500 	mov.w	r5, #0
 80062f6:	00dd      	lsls	r5, r3, #3
 80062f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062fc:	00d4      	lsls	r4, r2, #3
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	eb12 0a00 	adds.w	sl, r2, r0
 8006306:	eb43 0b01 	adc.w	fp, r3, r1
 800630a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4618      	mov	r0, r3
 8006310:	f04f 0100 	mov.w	r1, #0
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	008b      	lsls	r3, r1, #2
 800631e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006322:	0082      	lsls	r2, r0, #2
 8006324:	4650      	mov	r0, sl
 8006326:	4659      	mov	r1, fp
 8006328:	f7fa fa5c 	bl	80007e4 <__aeabi_uldivmod>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <UART_SetConfig+0x38c>)
 8006332:	fba3 1302 	umull	r1, r3, r3, r2
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	2164      	movs	r1, #100	; 0x64
 800633a:	fb01 f303 	mul.w	r3, r1, r3
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	011b      	lsls	r3, r3, #4
 8006342:	3332      	adds	r3, #50	; 0x32
 8006344:	4a09      	ldr	r2, [pc, #36]	; (800636c <UART_SetConfig+0x38c>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	f003 020f 	and.w	r2, r3, #15
 8006350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4432      	add	r2, r6
 8006356:	609a      	str	r2, [r3, #8]
}
 8006358:	bf00      	nop
 800635a:	377c      	adds	r7, #124	; 0x7c
 800635c:	46bd      	mov	sp, r7
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	bf00      	nop
 8006364:	40011000 	.word	0x40011000
 8006368:	40011400 	.word	0x40011400
 800636c:	51eb851f 	.word	0x51eb851f

08006370 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4b20      	ldr	r3, [pc, #128]	; (8006410 <FSMC_NORSRAM_Init+0xa0>)
 800638e:	4013      	ands	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800639a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80063a0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80063a6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80063ac:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80063b2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80063b8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80063be:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80063c4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80063ca:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80063d0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80063d6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80063dc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d103      	bne.n	80063f4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	fff00080 	.word	0xfff00080

08006414 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006436:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006442:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800644a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006452:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	3b01      	subs	r3, #1
 800645a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800645c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	3b02      	subs	r3, #2
 8006464:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006466:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800646c:	4313      	orrs	r3, r2
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6979      	ldr	r1, [r7, #20]
 800647c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064a8:	d122      	bne.n	80064f0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4b15      	ldr	r3, [pc, #84]	; (800650c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80064b8:	4013      	ands	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80064c6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80064ce:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80064d6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80064dc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	6979      	ldr	r1, [r7, #20]
 80064ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064ee:	e005      	b.n	80064fc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80064f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	cff00000 	.word	0xcff00000

08006510 <__libc_init_array>:
 8006510:	b570      	push	{r4, r5, r6, lr}
 8006512:	4d0d      	ldr	r5, [pc, #52]	; (8006548 <__libc_init_array+0x38>)
 8006514:	4c0d      	ldr	r4, [pc, #52]	; (800654c <__libc_init_array+0x3c>)
 8006516:	1b64      	subs	r4, r4, r5
 8006518:	10a4      	asrs	r4, r4, #2
 800651a:	2600      	movs	r6, #0
 800651c:	42a6      	cmp	r6, r4
 800651e:	d109      	bne.n	8006534 <__libc_init_array+0x24>
 8006520:	4d0b      	ldr	r5, [pc, #44]	; (8006550 <__libc_init_array+0x40>)
 8006522:	4c0c      	ldr	r4, [pc, #48]	; (8006554 <__libc_init_array+0x44>)
 8006524:	f000 f866 	bl	80065f4 <_init>
 8006528:	1b64      	subs	r4, r4, r5
 800652a:	10a4      	asrs	r4, r4, #2
 800652c:	2600      	movs	r6, #0
 800652e:	42a6      	cmp	r6, r4
 8006530:	d105      	bne.n	800653e <__libc_init_array+0x2e>
 8006532:	bd70      	pop	{r4, r5, r6, pc}
 8006534:	f855 3b04 	ldr.w	r3, [r5], #4
 8006538:	4798      	blx	r3
 800653a:	3601      	adds	r6, #1
 800653c:	e7ee      	b.n	800651c <__libc_init_array+0xc>
 800653e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006542:	4798      	blx	r3
 8006544:	3601      	adds	r6, #1
 8006546:	e7f2      	b.n	800652e <__libc_init_array+0x1e>
 8006548:	080095ac 	.word	0x080095ac
 800654c:	080095ac 	.word	0x080095ac
 8006550:	080095ac 	.word	0x080095ac
 8006554:	080095b0 	.word	0x080095b0

08006558 <memset>:
 8006558:	4402      	add	r2, r0
 800655a:	4603      	mov	r3, r0
 800655c:	4293      	cmp	r3, r2
 800655e:	d100      	bne.n	8006562 <memset+0xa>
 8006560:	4770      	bx	lr
 8006562:	f803 1b01 	strb.w	r1, [r3], #1
 8006566:	e7f9      	b.n	800655c <memset+0x4>

08006568 <round>:
 8006568:	ec51 0b10 	vmov	r0, r1, d0
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006572:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006576:	2c13      	cmp	r4, #19
 8006578:	ee10 2a10 	vmov	r2, s0
 800657c:	460b      	mov	r3, r1
 800657e:	dc19      	bgt.n	80065b4 <round+0x4c>
 8006580:	2c00      	cmp	r4, #0
 8006582:	da09      	bge.n	8006598 <round+0x30>
 8006584:	3401      	adds	r4, #1
 8006586:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800658a:	d103      	bne.n	8006594 <round+0x2c>
 800658c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006590:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006594:	2100      	movs	r1, #0
 8006596:	e028      	b.n	80065ea <round+0x82>
 8006598:	4d15      	ldr	r5, [pc, #84]	; (80065f0 <round+0x88>)
 800659a:	4125      	asrs	r5, r4
 800659c:	ea01 0605 	and.w	r6, r1, r5
 80065a0:	4332      	orrs	r2, r6
 80065a2:	d00e      	beq.n	80065c2 <round+0x5a>
 80065a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80065a8:	fa42 f404 	asr.w	r4, r2, r4
 80065ac:	4423      	add	r3, r4
 80065ae:	ea23 0305 	bic.w	r3, r3, r5
 80065b2:	e7ef      	b.n	8006594 <round+0x2c>
 80065b4:	2c33      	cmp	r4, #51	; 0x33
 80065b6:	dd07      	ble.n	80065c8 <round+0x60>
 80065b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80065bc:	d101      	bne.n	80065c2 <round+0x5a>
 80065be:	f7f9 ff33 	bl	8000428 <__adddf3>
 80065c2:	ec41 0b10 	vmov	d0, r0, r1
 80065c6:	bd70      	pop	{r4, r5, r6, pc}
 80065c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80065cc:	f04f 35ff 	mov.w	r5, #4294967295
 80065d0:	40f5      	lsrs	r5, r6
 80065d2:	4228      	tst	r0, r5
 80065d4:	d0f5      	beq.n	80065c2 <round+0x5a>
 80065d6:	2101      	movs	r1, #1
 80065d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80065dc:	fa01 f404 	lsl.w	r4, r1, r4
 80065e0:	1912      	adds	r2, r2, r4
 80065e2:	bf28      	it	cs
 80065e4:	185b      	addcs	r3, r3, r1
 80065e6:	ea22 0105 	bic.w	r1, r2, r5
 80065ea:	4608      	mov	r0, r1
 80065ec:	4619      	mov	r1, r3
 80065ee:	e7e8      	b.n	80065c2 <round+0x5a>
 80065f0:	000fffff 	.word	0x000fffff

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
