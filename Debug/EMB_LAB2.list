
EMB_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005860  08005d80  08005d80  00015d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5e0  0800b5e0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5e0  0800b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5e8  0800b5e8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5e8  0800b5e8  0001b5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800b5f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000244  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000264  20000264  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eae8  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d49  00000000  00000000  0003eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  00042888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b0  00000000  00000000  00043dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002510c  00000000  00000000  00045188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c6e0  00000000  00000000  0006a294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d39b8  00000000  00000000  00086974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015a32c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057a0  00000000  00000000  0015a380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d68 	.word	0x08005d68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005d68 	.word	0x08005d68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2108      	movs	r1, #8
 80004c8:	4802      	ldr	r0, [pc, #8]	; (80004d4 <button_init+0x14>)
 80004ca:	f002 fb2f 	bl	8002b2c <HAL_GPIO_WritePin>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40020c00 	.word	0x40020c00

080004d8 <button_Scan>:

void button_Scan(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2108      	movs	r1, #8
 80004e2:	482f      	ldr	r0, [pc, #188]	; (80005a0 <button_Scan+0xc8>)
 80004e4:	f002 fb22 	bl	8002b2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2108      	movs	r1, #8
 80004ec:	482c      	ldr	r0, [pc, #176]	; (80005a0 <button_Scan+0xc8>)
 80004ee:	f002 fb1d 	bl	8002b2c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004f2:	230a      	movs	r3, #10
 80004f4:	2202      	movs	r2, #2
 80004f6:	492b      	ldr	r1, [pc, #172]	; (80005a4 <button_Scan+0xcc>)
 80004f8:	482b      	ldr	r0, [pc, #172]	; (80005a8 <button_Scan+0xd0>)
 80004fa:	f003 fac8 	bl	8003a8e <HAL_SPI_Receive>
	  int button_index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000506:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000508:	2300      	movs	r3, #0
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	e03f      	b.n	800058e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	db06      	blt.n	8000522 <button_Scan+0x4a>
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dc03      	bgt.n	8000522 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3304      	adds	r3, #4
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e018      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dd07      	ble.n	8000538 <button_Scan+0x60>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b07      	cmp	r3, #7
 800052c:	dc04      	bgt.n	8000538 <button_Scan+0x60>
			  button_index = 7 - i;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f1c3 0307 	rsb	r3, r3, #7
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	e00d      	b.n	8000554 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dd06      	ble.n	800054c <button_Scan+0x74>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b0b      	cmp	r3, #11
 8000542:	dc03      	bgt.n	800054c <button_Scan+0x74>
			  button_index = i + 4;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3304      	adds	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e003      	b.n	8000554 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f1c3 0317 	rsb	r3, r3, #23
 8000552:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000554:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <button_Scan+0xcc>)
 8000556:	881a      	ldrh	r2, [r3, #0]
 8000558:	897b      	ldrh	r3, [r7, #10]
 800055a:	4013      	ands	r3, r2
 800055c:	b29b      	uxth	r3, r3
 800055e:	2b00      	cmp	r3, #0
 8000560:	d005      	beq.n	800056e <button_Scan+0x96>
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <button_Scan+0xd4>)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2100      	movs	r1, #0
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	e009      	b.n	8000582 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800056e:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000576:	3301      	adds	r3, #1
 8000578:	b299      	uxth	r1, r3
 800057a:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000582:	897b      	ldrh	r3, [r7, #10]
 8000584:	085b      	lsrs	r3, r3, #1
 8000586:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b0f      	cmp	r3, #15
 8000592:	ddbc      	ble.n	800050e <button_Scan+0x36>
	  }
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	2000003c 	.word	0x2000003c
 80005a8:	2000017c 	.word	0x2000017c
 80005ac:	2000007c 	.word	0x2000007c

080005b0 <drawTrafficLight>:
 */

#include "global.h"

void drawTrafficLight(int verti_Red, int verti_Green, int verti_Yellow, int hori_Red, int hori_Green, int hori_Yellow)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	603b      	str	r3, [r7, #0]
    lcd_Clear(WHITE);
 80005be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005c2:	f000 fe31 	bl	8001228 <lcd_Clear>

    lcd_DrawCircle(120, 100, RED, 15, verti_Red);
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	230f      	movs	r3, #15
 80005cc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80005d0:	2164      	movs	r1, #100	; 0x64
 80005d2:	2078      	movs	r0, #120	; 0x78
 80005d4:	f001 fa49 	bl	8001a6a <lcd_DrawCircle>
    lcd_DrawCircle(50, 100, GREEN, 15, verti_Green);
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	230f      	movs	r3, #15
 80005de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005e2:	2164      	movs	r1, #100	; 0x64
 80005e4:	2032      	movs	r0, #50	; 0x32
 80005e6:	f001 fa40 	bl	8001a6a <lcd_DrawCircle>
    lcd_DrawCircle(190, 100, YELLOW, 15, verti_Yellow);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	230f      	movs	r3, #15
 80005f0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80005f4:	2164      	movs	r1, #100	; 0x64
 80005f6:	20be      	movs	r0, #190	; 0xbe
 80005f8:	f001 fa37 	bl	8001a6a <lcd_DrawCircle>

    lcd_DrawCircle(50, 210, RED, 15, hori_Red);
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	230f      	movs	r3, #15
 8000602:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000606:	21d2      	movs	r1, #210	; 0xd2
 8000608:	2032      	movs	r0, #50	; 0x32
 800060a:	f001 fa2e 	bl	8001a6a <lcd_DrawCircle>
    lcd_DrawCircle(50, 140, GREEN, 15, hori_Green);
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	230f      	movs	r3, #15
 8000614:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000618:	218c      	movs	r1, #140	; 0x8c
 800061a:	2032      	movs	r0, #50	; 0x32
 800061c:	f001 fa25 	bl	8001a6a <lcd_DrawCircle>
    lcd_DrawCircle(50, 280, YELLOW, 15, hori_Yellow);
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	230f      	movs	r3, #15
 8000626:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800062a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800062e:	2032      	movs	r0, #50	; 0x32
 8000630:	f001 fa1b 	bl	8001a6a <lcd_DrawCircle>

    lcd_ShowPicture(80, 200, 90, 90, gImage_l_flag);
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <drawTrafficLight+0x9c>)
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	235a      	movs	r3, #90	; 0x5a
 800063a:	225a      	movs	r2, #90	; 0x5a
 800063c:	21c8      	movs	r1, #200	; 0xc8
 800063e:	2050      	movs	r0, #80	; 0x50
 8000640:	f000 ffae 	bl	80015a0 <lcd_ShowPicture>
}
 8000644:	bf00      	nop
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	08008d00 	.word	0x08008d00

08000650 <RedGreenLed>:

void RedGreenLed()	{	drawTrafficLight(1, 0, 0, 0, 1, 0);	}
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af02      	add	r7, sp, #8
 8000656:	2300      	movs	r3, #0
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2301      	movs	r3, #1
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2300      	movs	r3, #0
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2001      	movs	r0, #1
 8000666:	f7ff ffa3 	bl	80005b0 <drawTrafficLight>
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <RedYellowLed>:

void RedYellowLed()	{	drawTrafficLight(1, 0, 0, 0, 0, 1);	}
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af02      	add	r7, sp, #8
 8000676:	2301      	movs	r3, #1
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2300      	movs	r3, #0
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff ff93 	bl	80005b0 <drawTrafficLight>
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <GreenRedLed>:

void GreenRedLed()	{	drawTrafficLight(0, 1, 0, 1, 0, 0);	}
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af02      	add	r7, sp, #8
 8000696:	2300      	movs	r3, #0
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2300      	movs	r3, #0
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2301      	movs	r3, #1
 80006a0:	2200      	movs	r2, #0
 80006a2:	2101      	movs	r1, #1
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff ff83 	bl	80005b0 <drawTrafficLight>
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <YellowRedLed>:

void YellowRedLed()	{	drawTrafficLight(0, 0, 1, 1, 0, 0);	}
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	2300      	movs	r3, #0
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2300      	movs	r3, #0
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2301      	movs	r3, #1
 80006c0:	2201      	movs	r2, #1
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff73 	bl	80005b0 <drawTrafficLight>
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <ManRedLed>:

void ManRedLed()	{	drawTrafficLight(1, 0, 0, 1, 0, 0);	}
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af02      	add	r7, sp, #8
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2300      	movs	r3, #0
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2301      	movs	r3, #1
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ff63 	bl	80005b0 <drawTrafficLight>
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <ManGreenLed>:

void ManGreenLed()	{	drawTrafficLight(0, 1, 0, 0, 1, 0);	}
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	2200      	movs	r2, #0
 8000702:	2101      	movs	r1, #1
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff ff53 	bl	80005b0 <drawTrafficLight>
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <ManYellowLed>:

void ManYellowLed(){drawTrafficLight(0, 0, 1, 0, 0, 1);}
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af02      	add	r7, sp, #8
 8000716:	2301      	movs	r3, #1
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2300      	movs	r3, #0
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	2201      	movs	r2, #1
 8000722:	2100      	movs	r1, #0
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff ff43 	bl	80005b0 <drawTrafficLight>
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <increase>:

void increase()
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	timer_temp++;
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <increase+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <increase+0x28>)
 800073c:	6013      	str	r3, [r2, #0]
	if(timer_temp > 99)
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <increase+0x28>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b63      	cmp	r3, #99	; 0x63
 8000744:	dd02      	ble.n	800074c <increase+0x1c>
		timer_temp = 1;
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <increase+0x28>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000058 	.word	0x20000058

0800075c <checklogic>:
		timeYellow	= newtimeYellow;
	}
}

void checklogic(int newtimRed, int newtimGreen, int newtimYellow)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
	if((newtimeRed >= newtimeGreen + newtimeYellow) && (newtimeGreen >= newtimeYellow ))
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <checklogic+0x54>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <checklogic+0x58>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	441a      	add	r2, r3
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <checklogic+0x5c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	429a      	cmp	r2, r3
 8000778:	dc14      	bgt.n	80007a4 <checklogic+0x48>
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <checklogic+0x54>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <checklogic+0x58>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	db0e      	blt.n	80007a4 <checklogic+0x48>
	{
		timeRed = newtimeRed;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <checklogic+0x5c>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <checklogic+0x60>)
 800078c:	6013      	str	r3, [r2, #0]
		timeGreen = timeRed - newtimeYellow;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <checklogic+0x60>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <checklogic+0x58>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <checklogic+0x64>)
 800079a:	6013      	str	r3, [r2, #0]
		timeYellow = newtimeYellow;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <checklogic+0x58>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <checklogic+0x68>)
 80007a2:	6013      	str	r3, [r2, #0]
	}
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	20000050 	.word	0x20000050
 80007b4:	2000004c 	.word	0x2000004c
 80007b8:	20000048 	.word	0x20000048
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000004 	.word	0x20000004

080007c8 <Blink>:

void Blink()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af02      	add	r7, sp, #8
    switch (mode)
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <Blink+0x80>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	d013      	beq.n	80007fe <Blink+0x36>
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	dc2b      	bgt.n	8000832 <Blink+0x6a>
 80007da:	2b05      	cmp	r3, #5
 80007dc:	d002      	beq.n	80007e4 <Blink+0x1c>
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d01a      	beq.n	8000818 <Blink+0x50>
        case ManYellow:
            drawTrafficLight(0, 0, blinkstate, 0, 0, blinkstate);
            break;

        default:
            break;
 80007e2:	e026      	b.n	8000832 <Blink+0x6a>
            drawTrafficLight(blinkstate, 0, 0, blinkstate, 0, 0);
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <Blink+0x84>)
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <Blink+0x84>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2200      	movs	r2, #0
 80007ee:	9201      	str	r2, [sp, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	9200      	str	r2, [sp, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	f7ff feda 	bl	80005b0 <drawTrafficLight>
            break;
 80007fc:	e01a      	b.n	8000834 <Blink+0x6c>
            drawTrafficLight(0, blinkstate, 0, 0, blinkstate, 0);
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <Blink+0x84>)
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <Blink+0x84>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	9201      	str	r2, [sp, #4]
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	2300      	movs	r3, #0
 800080e:	2200      	movs	r2, #0
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fecd 	bl	80005b0 <drawTrafficLight>
            break;
 8000816:	e00d      	b.n	8000834 <Blink+0x6c>
            drawTrafficLight(0, 0, blinkstate, 0, 0, blinkstate);
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <Blink+0x84>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <Blink+0x84>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	9301      	str	r3, [sp, #4]
 8000822:	2300      	movs	r3, #0
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2300      	movs	r3, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fec0 	bl	80005b0 <drawTrafficLight>
            break;
 8000830:	e000      	b.n	8000834 <Blink+0x6c>
            break;
 8000832:	bf00      	nop
    }
    blinkstate ^= 1;
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <Blink+0x84>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f083 0301 	eor.w	r3, r3, #1
 800083c:	4a03      	ldr	r2, [pc, #12]	; (800084c <Blink+0x84>)
 800083e:	6013      	str	r3, [r2, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000044 	.word	0x20000044
 800084c:	20000064 	.word	0x20000064

08000850 <switchManualMode>:

void switchManualMode(int LEDmode, void (*LEDdisplayfunc)())
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	counter = 0;
 800085a:	4b07      	ldr	r3, [pc, #28]	; (8000878 <switchManualMode+0x28>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
	mode = LEDmode;
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <switchManualMode+0x2c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
	blinkstate = 0;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <switchManualMode+0x30>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
	LEDdisplayfunc();
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	4798      	blx	r3
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000060 	.word	0x20000060
 800087c:	20000044 	.word	0x20000044
 8000880:	20000064 	.word	0x20000064

08000884 <displayTime>:

void displayTime()
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af04      	add	r7, sp, #16
	if(mode == ManRed || mode == ManGreen || mode == ManYellow)
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <displayTime+0x64>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b05      	cmp	r3, #5
 8000890:	d007      	beq.n	80008a2 <displayTime+0x1e>
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <displayTime+0x64>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b07      	cmp	r3, #7
 8000898:	d003      	beq.n	80008a2 <displayTime+0x1e>
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <displayTime+0x64>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b06      	cmp	r3, #6
 80008a0:	d10f      	bne.n	80008c2 <displayTime+0x3e>
		lcd_ShowIntNum(20, 30, timer_temp, 2, WHITE, BLACK, 16);
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <displayTime+0x68>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	2310      	movs	r3, #16
 80008aa:	9302      	str	r3, [sp, #8]
 80008ac:	2300      	movs	r3, #0
 80008ae:	9301      	str	r3, [sp, #4]
 80008b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2302      	movs	r3, #2
 80008b8:	211e      	movs	r1, #30
 80008ba:	2014      	movs	r0, #20
 80008bc:	f000 fdf2 	bl	80014a4 <lcd_ShowIntNum>
 80008c0:	e00f      	b.n	80008e2 <displayTime+0x5e>
	else
		lcd_ShowIntNum(20, 30, timer, 2, WHITE, BLACK, 16);
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <displayTime+0x6c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	2310      	movs	r3, #16
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	2300      	movs	r3, #0
 80008ce:	9301      	str	r3, [sp, #4]
 80008d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2302      	movs	r3, #2
 80008d8:	211e      	movs	r1, #30
 80008da:	2014      	movs	r0, #20
 80008dc:	f000 fde2 	bl	80014a4 <lcd_ShowIntNum>
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000044 	.word	0x20000044
 80008ec:	20000058 	.word	0x20000058
 80008f0:	20000054 	.word	0x20000054

080008f4 <fsm_mode>:

void fsm_mode()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	switch(mode)
 80008f8:	4b96      	ldr	r3, [pc, #600]	; (8000b54 <fsm_mode+0x260>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b07      	cmp	r3, #7
 80008fe:	f200 81ad 	bhi.w	8000c5c <fsm_mode+0x368>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <fsm_mode+0x14>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000929 	.word	0x08000929
 800090c:	08000943 	.word	0x08000943
 8000910:	080009b3 	.word	0x080009b3
 8000914:	08000a27 	.word	0x08000a27
 8000918:	08000a9b 	.word	0x08000a9b
 800091c:	08000b0f 	.word	0x08000b0f
 8000920:	08000bed 	.word	0x08000bed
 8000924:	08000b97 	.word	0x08000b97
	{
		case ModeInit:
			counter = 0;
 8000928:	4b8b      	ldr	r3, [pc, #556]	; (8000b58 <fsm_mode+0x264>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
			timer = timeRed;
 800092e:	4b8b      	ldr	r3, [pc, #556]	; (8000b5c <fsm_mode+0x268>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a8b      	ldr	r2, [pc, #556]	; (8000b60 <fsm_mode+0x26c>)
 8000934:	6013      	str	r3, [r2, #0]
			mode = RedGreen;
 8000936:	4b87      	ldr	r3, [pc, #540]	; (8000b54 <fsm_mode+0x260>)
 8000938:	2201      	movs	r2, #1
 800093a:	601a      	str	r2, [r3, #0]
			RedGreenLed();
 800093c:	f7ff fe88 	bl	8000650 <RedGreenLed>
			break;
 8000940:	e19b      	b.n	8000c7a <fsm_mode+0x386>
		case RedGreen:
			if(counter >= 10)
 8000942:	4b85      	ldr	r3, [pc, #532]	; (8000b58 <fsm_mode+0x264>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b09      	cmp	r3, #9
 8000948:	dd25      	ble.n	8000996 <fsm_mode+0xa2>
			{
				counter = 0;
 800094a:	4b83      	ldr	r3, [pc, #524]	; (8000b58 <fsm_mode+0x264>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
				if(check_timer == 0)
 8000950:	4b84      	ldr	r3, [pc, #528]	; (8000b64 <fsm_mode+0x270>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d105      	bne.n	8000964 <fsm_mode+0x70>
					check_timer++;
 8000958:	4b82      	ldr	r3, [pc, #520]	; (8000b64 <fsm_mode+0x270>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	4a81      	ldr	r2, [pc, #516]	; (8000b64 <fsm_mode+0x270>)
 8000960:	6013      	str	r3, [r2, #0]
 8000962:	e00b      	b.n	800097c <fsm_mode+0x88>
				else if(check_timer == 1)
 8000964:	4b7f      	ldr	r3, [pc, #508]	; (8000b64 <fsm_mode+0x270>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d107      	bne.n	800097c <fsm_mode+0x88>
				{
					check_timer = 0;
 800096c:	4b7d      	ldr	r3, [pc, #500]	; (8000b64 <fsm_mode+0x270>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
					timer--;
 8000972:	4b7b      	ldr	r3, [pc, #492]	; (8000b60 <fsm_mode+0x26c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3b01      	subs	r3, #1
 8000978:	4a79      	ldr	r2, [pc, #484]	; (8000b60 <fsm_mode+0x26c>)
 800097a:	6013      	str	r3, [r2, #0]
				}
				if(timer <= timeYellow)
 800097c:	4b78      	ldr	r3, [pc, #480]	; (8000b60 <fsm_mode+0x26c>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b79      	ldr	r3, [pc, #484]	; (8000b68 <fsm_mode+0x274>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	f300 816b 	bgt.w	8000c60 <fsm_mode+0x36c>
				{
					mode = RedYellow;
 800098a:	4b72      	ldr	r3, [pc, #456]	; (8000b54 <fsm_mode+0x260>)
 800098c:	2202      	movs	r2, #2
 800098e:	601a      	str	r2, [r3, #0]
					RedYellowLed();
 8000990:	f7ff fe6e 	bl	8000670 <RedYellowLed>
			else if(button_count[0] >= 3)
			{
				switchManualMode(ManRed, ManRedLed);
				timer_temp = timeRed;
			}
			break;
 8000994:	e164      	b.n	8000c60 <fsm_mode+0x36c>
			else if(button_count[0] >= 3)
 8000996:	4b75      	ldr	r3, [pc, #468]	; (8000b6c <fsm_mode+0x278>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2b02      	cmp	r3, #2
 800099c:	f240 8160 	bls.w	8000c60 <fsm_mode+0x36c>
				switchManualMode(ManRed, ManRedLed);
 80009a0:	4973      	ldr	r1, [pc, #460]	; (8000b70 <fsm_mode+0x27c>)
 80009a2:	2005      	movs	r0, #5
 80009a4:	f7ff ff54 	bl	8000850 <switchManualMode>
				timer_temp = timeRed;
 80009a8:	4b6c      	ldr	r3, [pc, #432]	; (8000b5c <fsm_mode+0x268>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a71      	ldr	r2, [pc, #452]	; (8000b74 <fsm_mode+0x280>)
 80009ae:	6013      	str	r3, [r2, #0]
			break;
 80009b0:	e156      	b.n	8000c60 <fsm_mode+0x36c>
		case RedYellow:
			if(counter >= 10)
 80009b2:	4b69      	ldr	r3, [pc, #420]	; (8000b58 <fsm_mode+0x264>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b09      	cmp	r3, #9
 80009b8:	dd27      	ble.n	8000a0a <fsm_mode+0x116>
			{
				counter = 0;
 80009ba:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <fsm_mode+0x264>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
				if(check_timer == 0)
 80009c0:	4b68      	ldr	r3, [pc, #416]	; (8000b64 <fsm_mode+0x270>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d105      	bne.n	80009d4 <fsm_mode+0xe0>
					check_timer++;
 80009c8:	4b66      	ldr	r3, [pc, #408]	; (8000b64 <fsm_mode+0x270>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	4a65      	ldr	r2, [pc, #404]	; (8000b64 <fsm_mode+0x270>)
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e00b      	b.n	80009ec <fsm_mode+0xf8>
				else if(check_timer == 1)
 80009d4:	4b63      	ldr	r3, [pc, #396]	; (8000b64 <fsm_mode+0x270>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d107      	bne.n	80009ec <fsm_mode+0xf8>
				{
					check_timer = 0;
 80009dc:	4b61      	ldr	r3, [pc, #388]	; (8000b64 <fsm_mode+0x270>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
					timer--;
 80009e2:	4b5f      	ldr	r3, [pc, #380]	; (8000b60 <fsm_mode+0x26c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	4a5d      	ldr	r2, [pc, #372]	; (8000b60 <fsm_mode+0x26c>)
 80009ea:	6013      	str	r3, [r2, #0]
				}
				if(timer <= 0)
 80009ec:	4b5c      	ldr	r3, [pc, #368]	; (8000b60 <fsm_mode+0x26c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f300 8137 	bgt.w	8000c64 <fsm_mode+0x370>
				{
					mode = GreenRed;
 80009f6:	4b57      	ldr	r3, [pc, #348]	; (8000b54 <fsm_mode+0x260>)
 80009f8:	2203      	movs	r2, #3
 80009fa:	601a      	str	r2, [r3, #0]
					timer = timeGreen;
 80009fc:	4b5e      	ldr	r3, [pc, #376]	; (8000b78 <fsm_mode+0x284>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <fsm_mode+0x26c>)
 8000a02:	6013      	str	r3, [r2, #0]
					GreenRedLed();
 8000a04:	f7ff fe44 	bl	8000690 <GreenRedLed>
			else if(button_count[0] >= 3)
			{
				switchManualMode(ManRed, ManRedLed);
				timer_temp = timeRed;
			}
			break;
 8000a08:	e12c      	b.n	8000c64 <fsm_mode+0x370>
			else if(button_count[0] >= 3)
 8000a0a:	4b58      	ldr	r3, [pc, #352]	; (8000b6c <fsm_mode+0x278>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	f240 8128 	bls.w	8000c64 <fsm_mode+0x370>
				switchManualMode(ManRed, ManRedLed);
 8000a14:	4956      	ldr	r1, [pc, #344]	; (8000b70 <fsm_mode+0x27c>)
 8000a16:	2005      	movs	r0, #5
 8000a18:	f7ff ff1a 	bl	8000850 <switchManualMode>
				timer_temp = timeRed;
 8000a1c:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <fsm_mode+0x268>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a54      	ldr	r2, [pc, #336]	; (8000b74 <fsm_mode+0x280>)
 8000a22:	6013      	str	r3, [r2, #0]
			break;
 8000a24:	e11e      	b.n	8000c64 <fsm_mode+0x370>
		case GreenRed:
			if(counter >= 10)
 8000a26:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <fsm_mode+0x264>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b09      	cmp	r3, #9
 8000a2c:	dd27      	ble.n	8000a7e <fsm_mode+0x18a>
			{
				counter = 0;
 8000a2e:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <fsm_mode+0x264>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
				if(check_timer == 0)
 8000a34:	4b4b      	ldr	r3, [pc, #300]	; (8000b64 <fsm_mode+0x270>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d105      	bne.n	8000a48 <fsm_mode+0x154>
					check_timer++;
 8000a3c:	4b49      	ldr	r3, [pc, #292]	; (8000b64 <fsm_mode+0x270>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a48      	ldr	r2, [pc, #288]	; (8000b64 <fsm_mode+0x270>)
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e00b      	b.n	8000a60 <fsm_mode+0x16c>
				else if(check_timer == 1)
 8000a48:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <fsm_mode+0x270>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d107      	bne.n	8000a60 <fsm_mode+0x16c>
				{
					check_timer = 0;
 8000a50:	4b44      	ldr	r3, [pc, #272]	; (8000b64 <fsm_mode+0x270>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
					timer--;
 8000a56:	4b42      	ldr	r3, [pc, #264]	; (8000b60 <fsm_mode+0x26c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	4a40      	ldr	r2, [pc, #256]	; (8000b60 <fsm_mode+0x26c>)
 8000a5e:	6013      	str	r3, [r2, #0]
				}
				if(timer <= 0)
 8000a60:	4b3f      	ldr	r3, [pc, #252]	; (8000b60 <fsm_mode+0x26c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	f300 80ff 	bgt.w	8000c68 <fsm_mode+0x374>
				{
					mode = YellowRed;
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	; (8000b54 <fsm_mode+0x260>)
 8000a6c:	2204      	movs	r2, #4
 8000a6e:	601a      	str	r2, [r3, #0]
					timer = timeYellow;
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <fsm_mode+0x274>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a3a      	ldr	r2, [pc, #232]	; (8000b60 <fsm_mode+0x26c>)
 8000a76:	6013      	str	r3, [r2, #0]
					YellowRedLed();
 8000a78:	f7ff fe1a 	bl	80006b0 <YellowRedLed>
			else if(button_count[0] >= 3)
			{
				switchManualMode(ManRed, ManRedLed);
				timer_temp = timeRed;
			}
			break;
 8000a7c:	e0f4      	b.n	8000c68 <fsm_mode+0x374>
			else if(button_count[0] >= 3)
 8000a7e:	4b3b      	ldr	r3, [pc, #236]	; (8000b6c <fsm_mode+0x278>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	f240 80f0 	bls.w	8000c68 <fsm_mode+0x374>
				switchManualMode(ManRed, ManRedLed);
 8000a88:	4939      	ldr	r1, [pc, #228]	; (8000b70 <fsm_mode+0x27c>)
 8000a8a:	2005      	movs	r0, #5
 8000a8c:	f7ff fee0 	bl	8000850 <switchManualMode>
				timer_temp = timeRed;
 8000a90:	4b32      	ldr	r3, [pc, #200]	; (8000b5c <fsm_mode+0x268>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <fsm_mode+0x280>)
 8000a96:	6013      	str	r3, [r2, #0]
			break;
 8000a98:	e0e6      	b.n	8000c68 <fsm_mode+0x374>
		case YellowRed:
			if(counter >= 10)
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <fsm_mode+0x264>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b09      	cmp	r3, #9
 8000aa0:	dd27      	ble.n	8000af2 <fsm_mode+0x1fe>
			{
				counter = 0;
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <fsm_mode+0x264>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
				if(check_timer == 0)
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <fsm_mode+0x270>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <fsm_mode+0x1c8>
					check_timer++;
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <fsm_mode+0x270>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a2b      	ldr	r2, [pc, #172]	; (8000b64 <fsm_mode+0x270>)
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e00b      	b.n	8000ad4 <fsm_mode+0x1e0>
				else if(check_timer == 1)
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <fsm_mode+0x270>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d107      	bne.n	8000ad4 <fsm_mode+0x1e0>
				{
					check_timer = 0;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <fsm_mode+0x270>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
					timer--;
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <fsm_mode+0x26c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <fsm_mode+0x26c>)
 8000ad2:	6013      	str	r3, [r2, #0]
				}
				if(timer <= 0)
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <fsm_mode+0x26c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f300 80c7 	bgt.w	8000c6c <fsm_mode+0x378>
				{
					mode = RedGreen;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <fsm_mode+0x260>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	601a      	str	r2, [r3, #0]
					timer = timeRed;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <fsm_mode+0x268>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	; (8000b60 <fsm_mode+0x26c>)
 8000aea:	6013      	str	r3, [r2, #0]
					RedGreenLed();
 8000aec:	f7ff fdb0 	bl	8000650 <RedGreenLed>
			else if(button_count[0] >= 3)
			{
				switchManualMode(ManRed, ManRedLed);
				timer_temp = timeRed;
			}
			break;
 8000af0:	e0bc      	b.n	8000c6c <fsm_mode+0x378>
			else if(button_count[0] >= 3)
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <fsm_mode+0x278>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	f240 80b8 	bls.w	8000c6c <fsm_mode+0x378>
				switchManualMode(ManRed, ManRedLed);
 8000afc:	491c      	ldr	r1, [pc, #112]	; (8000b70 <fsm_mode+0x27c>)
 8000afe:	2005      	movs	r0, #5
 8000b00:	f7ff fea6 	bl	8000850 <switchManualMode>
				timer_temp = timeRed;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <fsm_mode+0x268>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1a      	ldr	r2, [pc, #104]	; (8000b74 <fsm_mode+0x280>)
 8000b0a:	6013      	str	r3, [r2, #0]
			break;
 8000b0c:	e0ae      	b.n	8000c6c <fsm_mode+0x378>
		case ManRed:
			newtimeRed = timer_temp;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <fsm_mode+0x280>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <fsm_mode+0x288>)
 8000b14:	6013      	str	r3, [r2, #0]
			if(counter >= 10)
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <fsm_mode+0x264>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b09      	cmp	r3, #9
 8000b1c:	dd05      	ble.n	8000b2a <fsm_mode+0x236>
			{
				counter = 0;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <fsm_mode+0x264>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
				Blink();
 8000b24:	f7ff fe50 	bl	80007c8 <Blink>
				increase();
			else if(button_count[2] >= 3)
			{
				newtimeRed = timer_temp;
			}
			break;
 8000b28:	e0a2      	b.n	8000c70 <fsm_mode+0x37c>
			else if(button_count[0] >= 3)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <fsm_mode+0x278>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d908      	bls.n	8000b44 <fsm_mode+0x250>
				switchManualMode(ManGreen, ManGreenLed);
 8000b32:	4913      	ldr	r1, [pc, #76]	; (8000b80 <fsm_mode+0x28c>)
 8000b34:	2007      	movs	r0, #7
 8000b36:	f7ff fe8b 	bl	8000850 <switchManualMode>
				timer_temp = timeGreen;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <fsm_mode+0x284>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <fsm_mode+0x280>)
 8000b40:	6013      	str	r3, [r2, #0]
			break;
 8000b42:	e095      	b.n	8000c70 <fsm_mode+0x37c>
			else if(button_count[1] >= 3)
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <fsm_mode+0x278>)
 8000b46:	885b      	ldrh	r3, [r3, #2]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d91b      	bls.n	8000b84 <fsm_mode+0x290>
				increase();
 8000b4c:	f7ff fdf0 	bl	8000730 <increase>
			break;
 8000b50:	e08e      	b.n	8000c70 <fsm_mode+0x37c>
 8000b52:	bf00      	nop
 8000b54:	20000044 	.word	0x20000044
 8000b58:	20000060 	.word	0x20000060
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000054 	.word	0x20000054
 8000b64:	2000005c 	.word	0x2000005c
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	2000007c 	.word	0x2000007c
 8000b70:	080006d1 	.word	0x080006d1
 8000b74:	20000058 	.word	0x20000058
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000048 	.word	0x20000048
 8000b80:	080006f1 	.word	0x080006f1
			else if(button_count[2] >= 3)
 8000b84:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <fsm_mode+0x390>)
 8000b86:	889b      	ldrh	r3, [r3, #4]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d971      	bls.n	8000c70 <fsm_mode+0x37c>
				newtimeRed = timer_temp;
 8000b8c:	4b3e      	ldr	r3, [pc, #248]	; (8000c88 <fsm_mode+0x394>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <fsm_mode+0x398>)
 8000b92:	6013      	str	r3, [r2, #0]
			break;
 8000b94:	e06c      	b.n	8000c70 <fsm_mode+0x37c>
		case ManGreen:
			newtimeGreen = timer_temp;
 8000b96:	4b3c      	ldr	r3, [pc, #240]	; (8000c88 <fsm_mode+0x394>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a3d      	ldr	r2, [pc, #244]	; (8000c90 <fsm_mode+0x39c>)
 8000b9c:	6013      	str	r3, [r2, #0]
			if(counter >= 10)
 8000b9e:	4b3d      	ldr	r3, [pc, #244]	; (8000c94 <fsm_mode+0x3a0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b09      	cmp	r3, #9
 8000ba4:	dd05      	ble.n	8000bb2 <fsm_mode+0x2be>
			{
				counter = 0;
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <fsm_mode+0x3a0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
				Blink();
 8000bac:	f7ff fe0c 	bl	80007c8 <Blink>
				increase();
			else if(button_count[2] >= 3)
			{
				newtimeGreen = timer_temp;
			}
			break;
 8000bb0:	e060      	b.n	8000c74 <fsm_mode+0x380>
			else if(button_count[0] >= 3)
 8000bb2:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <fsm_mode+0x390>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d908      	bls.n	8000bcc <fsm_mode+0x2d8>
				switchManualMode(ManYellow, ManYellowLed);
 8000bba:	4937      	ldr	r1, [pc, #220]	; (8000c98 <fsm_mode+0x3a4>)
 8000bbc:	2006      	movs	r0, #6
 8000bbe:	f7ff fe47 	bl	8000850 <switchManualMode>
				timer_temp = timeYellow;
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <fsm_mode+0x3a8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a30      	ldr	r2, [pc, #192]	; (8000c88 <fsm_mode+0x394>)
 8000bc8:	6013      	str	r3, [r2, #0]
			break;
 8000bca:	e053      	b.n	8000c74 <fsm_mode+0x380>
			else if(button_count[1] >= 3)
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <fsm_mode+0x390>)
 8000bce:	885b      	ldrh	r3, [r3, #2]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d902      	bls.n	8000bda <fsm_mode+0x2e6>
				increase();
 8000bd4:	f7ff fdac 	bl	8000730 <increase>
			break;
 8000bd8:	e04c      	b.n	8000c74 <fsm_mode+0x380>
			else if(button_count[2] >= 3)
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <fsm_mode+0x390>)
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d948      	bls.n	8000c74 <fsm_mode+0x380>
				newtimeGreen = timer_temp;
 8000be2:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <fsm_mode+0x394>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <fsm_mode+0x39c>)
 8000be8:	6013      	str	r3, [r2, #0]
			break;
 8000bea:	e043      	b.n	8000c74 <fsm_mode+0x380>
		case ManYellow:
			newtimeYellow = timer_temp;
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <fsm_mode+0x394>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <fsm_mode+0x3ac>)
 8000bf2:	6013      	str	r3, [r2, #0]
			if(counter >= 10)
 8000bf4:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <fsm_mode+0x3a0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b09      	cmp	r3, #9
 8000bfa:	dd05      	ble.n	8000c08 <fsm_mode+0x314>
			{
				counter = 0;
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <fsm_mode+0x3a0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
				Blink();
 8000c02:	f7ff fde1 	bl	80007c8 <Blink>
				increase();
			else if(button_count[2] >= 3)
			{
				newtimeYellow = timer_temp;
			}
			break;
 8000c06:	e037      	b.n	8000c78 <fsm_mode+0x384>
			else if(button_count[0] >= 3)
 8000c08:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <fsm_mode+0x390>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d915      	bls.n	8000c3c <fsm_mode+0x348>
				counter = 0;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <fsm_mode+0x3a0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
				checklogic(newtimeRed, newtimeGreen, newtimeYellow);
 8000c16:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <fsm_mode+0x398>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1d      	ldr	r2, [pc, #116]	; (8000c90 <fsm_mode+0x39c>)
 8000c1c:	6811      	ldr	r1, [r2, #0]
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <fsm_mode+0x3ac>)
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fd9a 	bl	800075c <checklogic>
				mode = RedGreen;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <fsm_mode+0x3b0>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
				timer = timeRed;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <fsm_mode+0x3b4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <fsm_mode+0x3b8>)
 8000c34:	6013      	str	r3, [r2, #0]
				RedGreenLed();
 8000c36:	f7ff fd0b 	bl	8000650 <RedGreenLed>
			break;
 8000c3a:	e01d      	b.n	8000c78 <fsm_mode+0x384>
			else if(button_count[1] >= 3)
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <fsm_mode+0x390>)
 8000c3e:	885b      	ldrh	r3, [r3, #2]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d902      	bls.n	8000c4a <fsm_mode+0x356>
				increase();
 8000c44:	f7ff fd74 	bl	8000730 <increase>
			break;
 8000c48:	e016      	b.n	8000c78 <fsm_mode+0x384>
			else if(button_count[2] >= 3)
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <fsm_mode+0x390>)
 8000c4c:	889b      	ldrh	r3, [r3, #4]
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d912      	bls.n	8000c78 <fsm_mode+0x384>
				newtimeYellow = timer_temp;
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <fsm_mode+0x394>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <fsm_mode+0x3ac>)
 8000c58:	6013      	str	r3, [r2, #0]
			break;
 8000c5a:	e00d      	b.n	8000c78 <fsm_mode+0x384>

		default:
			break;
 8000c5c:	bf00      	nop
 8000c5e:	e00c      	b.n	8000c7a <fsm_mode+0x386>
			break;
 8000c60:	bf00      	nop
 8000c62:	e00a      	b.n	8000c7a <fsm_mode+0x386>
			break;
 8000c64:	bf00      	nop
 8000c66:	e008      	b.n	8000c7a <fsm_mode+0x386>
			break;
 8000c68:	bf00      	nop
 8000c6a:	e006      	b.n	8000c7a <fsm_mode+0x386>
			break;
 8000c6c:	bf00      	nop
 8000c6e:	e004      	b.n	8000c7a <fsm_mode+0x386>
			break;
 8000c70:	bf00      	nop
 8000c72:	e002      	b.n	8000c7a <fsm_mode+0x386>
			break;
 8000c74:	bf00      	nop
 8000c76:	e000      	b.n	8000c7a <fsm_mode+0x386>
			break;
 8000c78:	bf00      	nop
	}
	displayTime();
 8000c7a:	f7ff fe03 	bl	8000884 <displayTime>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000007c 	.word	0x2000007c
 8000c88:	20000058 	.word	0x20000058
 8000c8c:	20000048 	.word	0x20000048
 8000c90:	20000050 	.word	0x20000050
 8000c94:	20000060 	.word	0x20000060
 8000c98:	08000711 	.word	0x08000711
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	2000004c 	.word	0x2000004c
 8000ca4:	20000044 	.word	0x20000044
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	20000054 	.word	0x20000054

08000cb0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000cde:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000ce2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000ce6:	4a2e      	ldr	r2, [pc, #184]	; (8000da0 <MX_FSMC_Init+0xf0>)
 8000ce8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000cf0:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cf6:	4b29      	ldr	r3, [pc, #164]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000cfe:	2210      	movs	r2, #16
 8000d00:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000d14:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000d42:	230f      	movs	r3, #15
 8000d44:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000d46:	230f      	movs	r3, #15
 8000d48:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000d4a:	233c      	movs	r3, #60	; 0x3c
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000d52:	2310      	movs	r3, #16
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000d56:	2311      	movs	r3, #17
 8000d58:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d62:	230f      	movs	r3, #15
 8000d64:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000d66:	2309      	movs	r3, #9
 8000d68:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d6e:	2310      	movs	r3, #16
 8000d70:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d72:	2311      	movs	r3, #17
 8000d74:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d7a:	463a      	mov	r2, r7
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	4806      	ldr	r0, [pc, #24]	; (8000d9c <MX_FSMC_Init+0xec>)
 8000d84:	f003 fa66 	bl	8004254 <HAL_SRAM_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d8e:	f001 f84d 	bl	8001e2c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d92:	bf00      	nop
 8000d94:	3738      	adds	r7, #56	; 0x38
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000009c 	.word	0x2000009c
 8000da0:	a0000104 	.word	0xa0000104

08000da4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000db8:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_FSMC_MspInit+0x88>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d131      	bne.n	8000e24 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_FSMC_MspInit+0x88>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_FSMC_MspInit+0x8c>)
 8000dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dce:	4a18      	ldr	r2, [pc, #96]	; (8000e30 <HAL_FSMC_MspInit+0x8c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6393      	str	r3, [r2, #56]	; 0x38
 8000dd6:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_FSMC_MspInit+0x8c>)
 8000dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000de2:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000de6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000df4:	230c      	movs	r3, #12
 8000df6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <HAL_FSMC_MspInit+0x90>)
 8000dfe:	f001 fcf9 	bl	80027f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e02:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000e06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	2303      	movs	r3, #3
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000e14:	230c      	movs	r3, #12
 8000e16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <HAL_FSMC_MspInit+0x94>)
 8000e1e:	f001 fce9 	bl	80027f4 <HAL_GPIO_Init>
 8000e22:	e000      	b.n	8000e26 <HAL_FSMC_MspInit+0x82>
    return;
 8000e24:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000040 	.word	0x20000040
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40020c00 	.word	0x40020c00

08000e3c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e44:	f7ff ffae 	bl	8000da4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
 8000e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	4b6f      	ldr	r3, [pc, #444]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a6e      	ldr	r2, [pc, #440]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000e70:	f043 0310 	orr.w	r3, r3, #16
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b6c      	ldr	r3, [pc, #432]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0310 	and.w	r3, r3, #16
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a67      	ldr	r2, [pc, #412]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b65      	ldr	r3, [pc, #404]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b61      	ldr	r3, [pc, #388]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a60      	ldr	r2, [pc, #384]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b5e      	ldr	r3, [pc, #376]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b5a      	ldr	r3, [pc, #360]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a59      	ldr	r2, [pc, #356]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b57      	ldr	r3, [pc, #348]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b53      	ldr	r3, [pc, #332]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a52      	ldr	r2, [pc, #328]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b50      	ldr	r3, [pc, #320]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a4b      	ldr	r2, [pc, #300]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b49      	ldr	r3, [pc, #292]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b45      	ldr	r3, [pc, #276]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a44      	ldr	r2, [pc, #272]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <MX_GPIO_Init+0x1d8>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2170      	movs	r1, #112	; 0x70
 8000f2e:	483f      	ldr	r0, [pc, #252]	; (800102c <MX_GPIO_Init+0x1dc>)
 8000f30:	f001 fdfc 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	483d      	ldr	r0, [pc, #244]	; (8001030 <MX_GPIO_Init+0x1e0>)
 8000f3c:	f001 fdf6 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2140      	movs	r1, #64	; 0x40
 8000f44:	483b      	ldr	r0, [pc, #236]	; (8001034 <MX_GPIO_Init+0x1e4>)
 8000f46:	f001 fdf1 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f50:	4839      	ldr	r0, [pc, #228]	; (8001038 <MX_GPIO_Init+0x1e8>)
 8000f52:	f001 fdeb 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2108      	movs	r1, #8
 8000f5a:	4838      	ldr	r0, [pc, #224]	; (800103c <MX_GPIO_Init+0x1ec>)
 8000f5c:	f001 fde6 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000f60:	2370      	movs	r3, #112	; 0x70
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4619      	mov	r1, r3
 8000f76:	482d      	ldr	r0, [pc, #180]	; (800102c <MX_GPIO_Init+0x1dc>)
 8000f78:	f001 fc3c 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4826      	ldr	r0, [pc, #152]	; (8001030 <MX_GPIO_Init+0x1e0>)
 8000f96:	f001 fc2d 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000f9a:	23c0      	movs	r3, #192	; 0xc0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4822      	ldr	r0, [pc, #136]	; (8001038 <MX_GPIO_Init+0x1e8>)
 8000fae:	f001 fc21 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000fb2:	2330      	movs	r3, #48	; 0x30
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <MX_GPIO_Init+0x1e0>)
 8000fc6:	f001 fc15 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000fca:	2340      	movs	r3, #64	; 0x40
 8000fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <MX_GPIO_Init+0x1e4>)
 8000fe2:	f001 fc07 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 031c 	add.w	r3, r7, #28
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <MX_GPIO_Init+0x1e8>)
 8001000:	f001 fbf8 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001004:	2308      	movs	r3, #8
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <MX_GPIO_Init+0x1ec>)
 800101c:	f001 fbea 	bl	80027f4 <HAL_GPIO_Init>

}
 8001020:	bf00      	nop
 8001022:	3730      	adds	r7, #48	; 0x30
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40021000 	.word	0x40021000
 8001030:	40020800 	.word	0x40020800
 8001034:	40021800 	.word	0x40021800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020c00 	.word	0x40020c00

08001040 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_I2C1_Init+0x50>)
 8001046:	4a13      	ldr	r2, [pc, #76]	; (8001094 <MX_I2C1_Init+0x54>)
 8001048:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_I2C1_Init+0x50>)
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <MX_I2C1_Init+0x58>)
 800104e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_I2C1_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_I2C1_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_I2C1_Init+0x50>)
 800105e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001062:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_I2C1_Init+0x50>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_I2C1_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_I2C1_Init+0x50>)
 800107e:	f001 fd89 	bl	8002b94 <HAL_I2C_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001088:	f000 fed0 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200000ec 	.word	0x200000ec
 8001094:	40005400 	.word	0x40005400
 8001098:	000186a0 	.word	0x000186a0

0800109c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_I2C_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12b      	bne.n	8001116 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_I2C_MspInit+0x88>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <HAL_I2C_MspInit+0x88>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <HAL_I2C_MspInit+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010da:	23c0      	movs	r3, #192	; 0xc0
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010de:	2312      	movs	r3, #18
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ea:	2304      	movs	r3, #4
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <HAL_I2C_MspInit+0x8c>)
 80010f6:	f001 fb7d 	bl	80027f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_I2C_MspInit+0x88>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a08      	ldr	r2, [pc, #32]	; (8001124 <HAL_I2C_MspInit+0x88>)
 8001104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_I2C_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40005400 	.word	0x40005400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400

0800112c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001136:	4a04      	ldr	r2, [pc, #16]	; (8001148 <LCD_WR_REG+0x1c>)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	8013      	strh	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	600ffffe 	.word	0x600ffffe

0800114c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <LCD_WR_DATA+0x1c>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	8053      	strh	r3, [r2, #2]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	600ffffe 	.word	0x600ffffe

0800116c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <LCD_RD_DATA+0x20>)
 8001174:	885b      	ldrh	r3, [r3, #2]
 8001176:	b29b      	uxth	r3, r3
 8001178:	80fb      	strh	r3, [r7, #6]
	return ram;
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	600ffffe 	.word	0x600ffffe

08001190 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4604      	mov	r4, r0
 8001198:	4608      	mov	r0, r1
 800119a:	4611      	mov	r1, r2
 800119c:	461a      	mov	r2, r3
 800119e:	4623      	mov	r3, r4
 80011a0:	80fb      	strh	r3, [r7, #6]
 80011a2:	4603      	mov	r3, r0
 80011a4:	80bb      	strh	r3, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80011ae:	202a      	movs	r0, #42	; 0x2a
 80011b0:	f7ff ffbc 	bl	800112c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffc6 	bl	800114c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffc0 	bl	800114c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ffba 	bl	800114c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ffb4 	bl	800114c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80011e4:	202b      	movs	r0, #43	; 0x2b
 80011e6:	f7ff ffa1 	bl	800112c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80011ea:	88bb      	ldrh	r3, [r7, #4]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ffab 	bl	800114c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffa5 	bl	800114c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001202:	883b      	ldrh	r3, [r7, #0]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff9f 	bl	800114c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800120e:	883b      	ldrh	r3, [r7, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff99 	bl	800114c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800121a:	202c      	movs	r0, #44	; 0x2c
 800121c:	f7ff ff86 	bl	800112c <LCD_WR_REG>
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}

08001228 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b29b      	uxth	r3, r3
 8001238:	b2db      	uxtb	r3, r3
 800123a:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <lcd_Clear+0x70>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3b01      	subs	r3, #1
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b13      	ldr	r3, [pc, #76]	; (8001298 <lcd_Clear+0x70>)
 800124c:	885b      	ldrh	r3, [r3, #2]
 800124e:	3b01      	subs	r3, #1
 8001250:	b29b      	uxth	r3, r3
 8001252:	2100      	movs	r1, #0
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff9b 	bl	8001190 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800125a:	2300      	movs	r3, #0
 800125c:	81fb      	strh	r3, [r7, #14]
 800125e:	e011      	b.n	8001284 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001260:	2300      	movs	r3, #0
 8001262:	81bb      	strh	r3, [r7, #12]
 8001264:	e006      	b.n	8001274 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff6f 	bl	800114c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800126e:	89bb      	ldrh	r3, [r7, #12]
 8001270:	3301      	adds	r3, #1
 8001272:	81bb      	strh	r3, [r7, #12]
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <lcd_Clear+0x70>)
 8001276:	885b      	ldrh	r3, [r3, #2]
 8001278:	89ba      	ldrh	r2, [r7, #12]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3f3      	bcc.n	8001266 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	3301      	adds	r3, #1
 8001282:	81fb      	strh	r3, [r7, #14]
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <lcd_Clear+0x70>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	89fa      	ldrh	r2, [r7, #14]
 800128a:	429a      	cmp	r2, r3
 800128c:	d3e8      	bcc.n	8001260 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000140 	.word	0x20000140

0800129c <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
 80012a6:	460b      	mov	r3, r1
 80012a8:	80bb      	strh	r3, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80012ae:	88bb      	ldrh	r3, [r7, #4]
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	88b9      	ldrh	r1, [r7, #4]
 80012b4:	88f8      	ldrh	r0, [r7, #6]
 80012b6:	f7ff ff6b 	bl	8001190 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff45 	bl	800114c <LCD_WR_DATA>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	70fb      	strb	r3, [r7, #3]
 80012e6:	4613      	mov	r3, r2
 80012e8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80012f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b29a      	uxth	r2, r3
 8001318:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800131c:	b29b      	uxth	r3, r3
 800131e:	fb12 f303 	smulbb	r3, r2, r3
 8001322:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	3b20      	subs	r3, #32
 8001328:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	b29a      	uxth	r2, r3
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	b29c      	uxth	r4, r3
 8001338:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800133c:	b29a      	uxth	r2, r3
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	88b9      	ldrh	r1, [r7, #4]
 800134a:	88f8      	ldrh	r0, [r7, #6]
 800134c:	4622      	mov	r2, r4
 800134e:	f7ff ff1f 	bl	8001190 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001352:	2300      	movs	r3, #0
 8001354:	827b      	strh	r3, [r7, #18]
 8001356:	e07a      	b.n	800144e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001358:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800135c:	2b0c      	cmp	r3, #12
 800135e:	d028      	beq.n	80013b2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001364:	2b10      	cmp	r3, #16
 8001366:	d108      	bne.n	800137a <lcd_ShowChar+0xae>
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	8a7b      	ldrh	r3, [r7, #18]
 800136c:	493c      	ldr	r1, [pc, #240]	; (8001460 <lcd_ShowChar+0x194>)
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	440a      	add	r2, r1
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	75fb      	strb	r3, [r7, #23]
 8001378:	e01b      	b.n	80013b2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 800137a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800137e:	2b18      	cmp	r3, #24
 8001380:	d10b      	bne.n	800139a <lcd_ShowChar+0xce>
 8001382:	78fa      	ldrb	r2, [r7, #3]
 8001384:	8a79      	ldrh	r1, [r7, #18]
 8001386:	4837      	ldr	r0, [pc, #220]	; (8001464 <lcd_ShowChar+0x198>)
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4403      	add	r3, r0
 8001392:	440b      	add	r3, r1
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	75fb      	strb	r3, [r7, #23]
 8001398:	e00b      	b.n	80013b2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 800139a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800139e:	2b20      	cmp	r3, #32
 80013a0:	d15a      	bne.n	8001458 <lcd_ShowChar+0x18c>
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	8a7b      	ldrh	r3, [r7, #18]
 80013a6:	4930      	ldr	r1, [pc, #192]	; (8001468 <lcd_ShowChar+0x19c>)
 80013a8:	0192      	lsls	r2, r2, #6
 80013aa:	440a      	add	r2, r1
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	75bb      	strb	r3, [r7, #22]
 80013b6:	e044      	b.n	8001442 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80013b8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d120      	bne.n	8001402 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80013c0:	7dfa      	ldrb	r2, [r7, #23]
 80013c2:	7dbb      	ldrb	r3, [r7, #22]
 80013c4:	fa42 f303 	asr.w	r3, r2, r3
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <lcd_ShowChar+0x10e>
 80013d0:	883b      	ldrh	r3, [r7, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff feba 	bl	800114c <LCD_WR_DATA>
 80013d8:	e003      	b.n	80013e2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80013da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff feb5 	bl	800114c <LCD_WR_DATA>
				m++;
 80013e2:	7d7b      	ldrb	r3, [r7, #21]
 80013e4:	3301      	adds	r3, #1
 80013e6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80013e8:	7d7b      	ldrb	r3, [r7, #21]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80013f0:	fb02 f201 	mul.w	r2, r2, r1
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d11f      	bne.n	800143c <lcd_ShowChar+0x170>
				{
					m=0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	757b      	strb	r3, [r7, #21]
					break;
 8001400:	e022      	b.n	8001448 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001402:	7dfa      	ldrb	r2, [r7, #23]
 8001404:	7dbb      	ldrb	r3, [r7, #22]
 8001406:	fa42 f303 	asr.w	r3, r2, r3
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d005      	beq.n	800141e <lcd_ShowChar+0x152>
 8001412:	883a      	ldrh	r2, [r7, #0]
 8001414:	88b9      	ldrh	r1, [r7, #4]
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff3f 	bl	800129c <lcd_DrawPoint>
				x++;
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	3301      	adds	r3, #1
 8001422:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	8a3b      	ldrh	r3, [r7, #16]
 8001428:	1ad2      	subs	r2, r2, r3
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	429a      	cmp	r2, r3
 800142e:	d105      	bne.n	800143c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001430:	8a3b      	ldrh	r3, [r7, #16]
 8001432:	80fb      	strh	r3, [r7, #6]
					y++;
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	3301      	adds	r3, #1
 8001438:	80bb      	strh	r3, [r7, #4]
					break;
 800143a:	e005      	b.n	8001448 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 800143c:	7dbb      	ldrb	r3, [r7, #22]
 800143e:	3301      	adds	r3, #1
 8001440:	75bb      	strb	r3, [r7, #22]
 8001442:	7dbb      	ldrb	r3, [r7, #22]
 8001444:	2b07      	cmp	r3, #7
 8001446:	d9b7      	bls.n	80013b8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001448:	8a7b      	ldrh	r3, [r7, #18]
 800144a:	3301      	adds	r3, #1
 800144c:	827b      	strh	r3, [r7, #18]
 800144e:	8a7a      	ldrh	r2, [r7, #18]
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	429a      	cmp	r2, r3
 8001454:	d380      	bcc.n	8001358 <lcd_ShowChar+0x8c>
 8001456:	e000      	b.n	800145a <lcd_ShowChar+0x18e>
		else return;
 8001458:	bf00      	nop
				}
			}
		}
	}
}
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	08005d80 	.word	0x08005d80
 8001464:	08006370 	.word	0x08006370
 8001468:	08007540 	.word	0x08007540

0800146c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800147c:	2301      	movs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001480:	e004      	b.n	800148c <mypow+0x20>
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	71ba      	strb	r2, [r7, #6]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f5      	bne.n	8001482 <mypow+0x16>
	return result;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af04      	add	r7, sp, #16
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	80bb      	strh	r3, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	807b      	strh	r3, [r7, #2]
 80014be:	4613      	mov	r3, r2
 80014c0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80014c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ca:	085b      	lsrs	r3, r3, #1
 80014cc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	73fb      	strb	r3, [r7, #15]
 80014d2:	e059      	b.n	8001588 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80014d4:	887c      	ldrh	r4, [r7, #2]
 80014d6:	787a      	ldrb	r2, [r7, #1]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3b01      	subs	r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	200a      	movs	r0, #10
 80014e6:	f7ff ffc1 	bl	800146c <mypow>
 80014ea:	4603      	mov	r3, r0
 80014ec:	fbb4 f1f3 	udiv	r1, r4, r3
 80014f0:	4b2a      	ldr	r3, [pc, #168]	; (800159c <lcd_ShowIntNum+0xf8>)
 80014f2:	fba3 2301 	umull	r2, r3, r3, r1
 80014f6:	08da      	lsrs	r2, r3, #3
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	1aca      	subs	r2, r1, r3
 8001502:	4613      	mov	r3, r2
 8001504:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001506:	7bbb      	ldrb	r3, [r7, #14]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d121      	bne.n	8001550 <lcd_ShowIntNum+0xac>
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	787b      	ldrb	r3, [r7, #1]
 8001510:	3b01      	subs	r3, #1
 8001512:	429a      	cmp	r2, r3
 8001514:	da1c      	bge.n	8001550 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d117      	bne.n	800154c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	b29a      	uxth	r2, r3
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	b29b      	uxth	r3, r3
 8001524:	fb12 f303 	smulbb	r3, r2, r3
 8001528:	b29a      	uxth	r2, r3
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	4413      	add	r3, r2
 800152e:	b298      	uxth	r0, r3
 8001530:	8c3a      	ldrh	r2, [r7, #32]
 8001532:	88b9      	ldrh	r1, [r7, #4]
 8001534:	2300      	movs	r3, #0
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	2220      	movs	r2, #32
 8001546:	f7ff fec1 	bl	80012cc <lcd_ShowChar>
				continue;
 800154a:	e01a      	b.n	8001582 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 800154c:	2301      	movs	r3, #1
 800154e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	b29a      	uxth	r2, r3
 8001554:	7b7b      	ldrb	r3, [r7, #13]
 8001556:	b29b      	uxth	r3, r3
 8001558:	fb12 f303 	smulbb	r3, r2, r3
 800155c:	b29a      	uxth	r2, r3
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4413      	add	r3, r2
 8001562:	b298      	uxth	r0, r3
 8001564:	7b3b      	ldrb	r3, [r7, #12]
 8001566:	3330      	adds	r3, #48	; 0x30
 8001568:	b2da      	uxtb	r2, r3
 800156a:	8c3c      	ldrh	r4, [r7, #32]
 800156c:	88b9      	ldrh	r1, [r7, #4]
 800156e:	2300      	movs	r3, #0
 8001570:	9302      	str	r3, [sp, #8]
 8001572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	4623      	mov	r3, r4
 800157e:	f7ff fea5 	bl	80012cc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	3301      	adds	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	787b      	ldrb	r3, [r7, #1]
 800158c:	429a      	cmp	r2, r3
 800158e:	d3a1      	bcc.n	80014d4 <lcd_ShowIntNum+0x30>
	}
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	bf00      	nop
 800159c:	cccccccd 	.word	0xcccccccd

080015a0 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	4603      	mov	r3, r0
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 80015c2:	88fa      	ldrh	r2, [r7, #6]
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	4413      	add	r3, r2
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b29c      	uxth	r4, r3
 80015ce:	88ba      	ldrh	r2, [r7, #4]
 80015d0:	883b      	ldrh	r3, [r7, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b01      	subs	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	88b9      	ldrh	r1, [r7, #4]
 80015dc:	88f8      	ldrh	r0, [r7, #6]
 80015de:	4622      	mov	r2, r4
 80015e0:	f7ff fdd6 	bl	8001190 <lcd_AddressSet>
	for(i=0;i<length;i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	82fb      	strh	r3, [r7, #22]
 80015e8:	e027      	b.n	800163a <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	82bb      	strh	r3, [r7, #20]
 80015ee:	e01d      	b.n	800162c <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	3301      	adds	r3, #1
 8001602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001604:	4413      	add	r3, r2
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	7bbb      	ldrb	r3, [r7, #14]
 8001612:	b21b      	sxth	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b21b      	sxth	r3, r3
 8001618:	b29b      	uxth	r3, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fd96 	bl	800114c <LCD_WR_DATA>
			k++;
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	3301      	adds	r3, #1
 8001624:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001626:	8abb      	ldrh	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	82bb      	strh	r3, [r7, #20]
 800162c:	8aba      	ldrh	r2, [r7, #20]
 800162e:	883b      	ldrh	r3, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d3dd      	bcc.n	80015f0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001634:	8afb      	ldrh	r3, [r7, #22]
 8001636:	3301      	adds	r3, #1
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	8afa      	ldrh	r2, [r7, #22]
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	429a      	cmp	r2, r3
 8001640:	d3d3      	bcc.n	80015ea <lcd_ShowPicture+0x4a>
		}
	}
}
 8001642:	bf00      	nop
 8001644:	bf00      	nop
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}

0800164c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <lcd_SetDir+0x44>)
 8001668:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800166c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <lcd_SetDir+0x44>)
 8001670:	22f0      	movs	r2, #240	; 0xf0
 8001672:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001674:	e006      	b.n	8001684 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <lcd_SetDir+0x44>)
 8001678:	22f0      	movs	r2, #240	; 0xf0
 800167a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <lcd_SetDir+0x44>)
 800167e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001682:	805a      	strh	r2, [r3, #2]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000140 	.word	0x20000140

08001694 <lcd_init>:


void lcd_init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169e:	48aa      	ldr	r0, [pc, #680]	; (8001948 <lcd_init+0x2b4>)
 80016a0:	f001 fa44 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a8:	f000 fedc 	bl	8002464 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b2:	48a5      	ldr	r0, [pc, #660]	; (8001948 <lcd_init+0x2b4>)
 80016b4:	f001 fa3a 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016bc:	f000 fed2 	bl	8002464 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff ffc3 	bl	800164c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80016c6:	20d3      	movs	r0, #211	; 0xd3
 80016c8:	f7ff fd30 	bl	800112c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80016cc:	f7ff fd4e 	bl	800116c <LCD_RD_DATA>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b9d      	ldr	r3, [pc, #628]	; (800194c <lcd_init+0x2b8>)
 80016d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80016d8:	f7ff fd48 	bl	800116c <LCD_RD_DATA>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	4b9a      	ldr	r3, [pc, #616]	; (800194c <lcd_init+0x2b8>)
 80016e2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80016e4:	f7ff fd42 	bl	800116c <LCD_RD_DATA>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b97      	ldr	r3, [pc, #604]	; (800194c <lcd_init+0x2b8>)
 80016ee:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80016f0:	4b96      	ldr	r3, [pc, #600]	; (800194c <lcd_init+0x2b8>)
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b94      	ldr	r3, [pc, #592]	; (800194c <lcd_init+0x2b8>)
 80016fa:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80016fc:	f7ff fd36 	bl	800116c <LCD_RD_DATA>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b91      	ldr	r3, [pc, #580]	; (800194c <lcd_init+0x2b8>)
 8001706:	889b      	ldrh	r3, [r3, #4]
 8001708:	4313      	orrs	r3, r2
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b8f      	ldr	r3, [pc, #572]	; (800194c <lcd_init+0x2b8>)
 800170e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001710:	20cf      	movs	r0, #207	; 0xcf
 8001712:	f7ff fd0b 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff fd18 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800171c:	20c1      	movs	r0, #193	; 0xc1
 800171e:	f7ff fd15 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001722:	2030      	movs	r0, #48	; 0x30
 8001724:	f7ff fd12 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001728:	20ed      	movs	r0, #237	; 0xed
 800172a:	f7ff fcff 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800172e:	2064      	movs	r0, #100	; 0x64
 8001730:	f7ff fd0c 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001734:	2003      	movs	r0, #3
 8001736:	f7ff fd09 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800173a:	2012      	movs	r0, #18
 800173c:	f7ff fd06 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001740:	2081      	movs	r0, #129	; 0x81
 8001742:	f7ff fd03 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001746:	20e8      	movs	r0, #232	; 0xe8
 8001748:	f7ff fcf0 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800174c:	2085      	movs	r0, #133	; 0x85
 800174e:	f7ff fcfd 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001752:	2010      	movs	r0, #16
 8001754:	f7ff fcfa 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001758:	207a      	movs	r0, #122	; 0x7a
 800175a:	f7ff fcf7 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800175e:	20cb      	movs	r0, #203	; 0xcb
 8001760:	f7ff fce4 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001764:	2039      	movs	r0, #57	; 0x39
 8001766:	f7ff fcf1 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800176a:	202c      	movs	r0, #44	; 0x2c
 800176c:	f7ff fcee 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fceb 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001776:	2034      	movs	r0, #52	; 0x34
 8001778:	f7ff fce8 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800177c:	2002      	movs	r0, #2
 800177e:	f7ff fce5 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001782:	20f7      	movs	r0, #247	; 0xf7
 8001784:	f7ff fcd2 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001788:	2020      	movs	r0, #32
 800178a:	f7ff fcdf 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800178e:	20ea      	movs	r0, #234	; 0xea
 8001790:	f7ff fccc 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fcd9 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fcd6 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80017a0:	20c0      	movs	r0, #192	; 0xc0
 80017a2:	f7ff fcc3 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80017a6:	201b      	movs	r0, #27
 80017a8:	f7ff fcd0 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80017ac:	20c1      	movs	r0, #193	; 0xc1
 80017ae:	f7ff fcbd 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80017b2:	2001      	movs	r0, #1
 80017b4:	f7ff fcca 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80017b8:	20c5      	movs	r0, #197	; 0xc5
 80017ba:	f7ff fcb7 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80017be:	2030      	movs	r0, #48	; 0x30
 80017c0:	f7ff fcc4 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80017c4:	2030      	movs	r0, #48	; 0x30
 80017c6:	f7ff fcc1 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80017ca:	20c7      	movs	r0, #199	; 0xc7
 80017cc:	f7ff fcae 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80017d0:	20b7      	movs	r0, #183	; 0xb7
 80017d2:	f7ff fcbb 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80017d6:	2036      	movs	r0, #54	; 0x36
 80017d8:	f7ff fca8 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80017dc:	2008      	movs	r0, #8
 80017de:	f7ff fcb5 	bl	800114c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80017e2:	203a      	movs	r0, #58	; 0x3a
 80017e4:	f7ff fca2 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80017e8:	2055      	movs	r0, #85	; 0x55
 80017ea:	f7ff fcaf 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80017ee:	20b1      	movs	r0, #177	; 0xb1
 80017f0:	f7ff fc9c 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fca9 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80017fa:	201a      	movs	r0, #26
 80017fc:	f7ff fca6 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001800:	20b6      	movs	r0, #182	; 0xb6
 8001802:	f7ff fc93 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001806:	200a      	movs	r0, #10
 8001808:	f7ff fca0 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800180c:	20a2      	movs	r0, #162	; 0xa2
 800180e:	f7ff fc9d 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fc8a 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff fc97 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800181e:	2026      	movs	r0, #38	; 0x26
 8001820:	f7ff fc84 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff fc91 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800182a:	20e0      	movs	r0, #224	; 0xe0
 800182c:	f7ff fc7e 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001830:	200f      	movs	r0, #15
 8001832:	f7ff fc8b 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001836:	202a      	movs	r0, #42	; 0x2a
 8001838:	f7ff fc88 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800183c:	2028      	movs	r0, #40	; 0x28
 800183e:	f7ff fc85 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001842:	2008      	movs	r0, #8
 8001844:	f7ff fc82 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001848:	200e      	movs	r0, #14
 800184a:	f7ff fc7f 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800184e:	2008      	movs	r0, #8
 8001850:	f7ff fc7c 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001854:	2054      	movs	r0, #84	; 0x54
 8001856:	f7ff fc79 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800185a:	20a9      	movs	r0, #169	; 0xa9
 800185c:	f7ff fc76 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001860:	2043      	movs	r0, #67	; 0x43
 8001862:	f7ff fc73 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001866:	200a      	movs	r0, #10
 8001868:	f7ff fc70 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800186c:	200f      	movs	r0, #15
 800186e:	f7ff fc6d 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fc6a 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fc67 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fc64 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fc61 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800188a:	20e1      	movs	r0, #225	; 0xe1
 800188c:	f7ff fc4e 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fc5b 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001896:	2015      	movs	r0, #21
 8001898:	f7ff fc58 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800189c:	2017      	movs	r0, #23
 800189e:	f7ff fc55 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80018a2:	2007      	movs	r0, #7
 80018a4:	f7ff fc52 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80018a8:	2011      	movs	r0, #17
 80018aa:	f7ff fc4f 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80018ae:	2006      	movs	r0, #6
 80018b0:	f7ff fc4c 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80018b4:	202b      	movs	r0, #43	; 0x2b
 80018b6:	f7ff fc49 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80018ba:	2056      	movs	r0, #86	; 0x56
 80018bc:	f7ff fc46 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80018c0:	203c      	movs	r0, #60	; 0x3c
 80018c2:	f7ff fc43 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80018c6:	2005      	movs	r0, #5
 80018c8:	f7ff fc40 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80018cc:	2010      	movs	r0, #16
 80018ce:	f7ff fc3d 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f7ff fc3a 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80018d8:	203f      	movs	r0, #63	; 0x3f
 80018da:	f7ff fc37 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80018de:	203f      	movs	r0, #63	; 0x3f
 80018e0:	f7ff fc34 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80018e4:	200f      	movs	r0, #15
 80018e6:	f7ff fc31 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80018ea:	202b      	movs	r0, #43	; 0x2b
 80018ec:	f7ff fc1e 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fc2b 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff fc28 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80018fc:	2001      	movs	r0, #1
 80018fe:	f7ff fc25 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001902:	203f      	movs	r0, #63	; 0x3f
 8001904:	f7ff fc22 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001908:	202a      	movs	r0, #42	; 0x2a
 800190a:	f7ff fc0f 	bl	800112c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff fc1c 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff fc19 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fc16 	bl	800114c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001920:	20ef      	movs	r0, #239	; 0xef
 8001922:	f7ff fc13 	bl	800114c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001926:	2011      	movs	r0, #17
 8001928:	f7ff fc00 	bl	800112c <LCD_WR_REG>
	HAL_Delay(120);
 800192c:	2078      	movs	r0, #120	; 0x78
 800192e:	f000 fd99 	bl	8002464 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001932:	2029      	movs	r0, #41	; 0x29
 8001934:	f7ff fbfa 	bl	800112c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <lcd_init+0x2bc>)
 8001940:	f001 f8f4 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020800 	.word	0x40020800
 800194c:	20000140 	.word	0x20000140
 8001950:	40020000 	.word	0x40020000

08001954 <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	b29a      	uxth	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	b29b      	uxth	r3, r3
 800196a:	4413      	add	r3, r2
 800196c:	b298      	uxth	r0, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	b29a      	uxth	r2, r3
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4413      	add	r3, r2
 8001978:	b29b      	uxth	r3, r3
 800197a:	8b3a      	ldrh	r2, [r7, #24]
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff fc8d 	bl	800129c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	b29a      	uxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	b29b      	uxth	r3, r3
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	b298      	uxth	r0, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	b29a      	uxth	r2, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4413      	add	r3, r2
 8001998:	b29b      	uxth	r3, r3
 800199a:	8b3a      	ldrh	r2, [r7, #24]
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff fc7d 	bl	800129c <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b298      	uxth	r0, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	8b3a      	ldrh	r2, [r7, #24]
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff fc6d 	bl	800129c <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b298      	uxth	r0, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	8b3a      	ldrh	r2, [r7, #24]
 80019dc:	4619      	mov	r1, r3
 80019de:	f7ff fc5d 	bl	800129c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	b298      	uxth	r0, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	8b3a      	ldrh	r2, [r7, #24]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff fc4d 	bl	800129c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b298      	uxth	r0, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	8b3a      	ldrh	r2, [r7, #24]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f7ff fc3d 	bl	800129c <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	8b3a      	ldrh	r2, [r7, #24]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff fc2d 	bl	800129c <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b298      	uxth	r0, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	8b3a      	ldrh	r2, [r7, #24]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff fc1d 	bl	800129c <lcd_DrawPoint>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b08a      	sub	sp, #40	; 0x28
 8001a6e:	af02      	add	r7, sp, #8
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4613      	mov	r3, r2
 8001a78:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	f1c3 0303 	rsb	r3, r3, #3
 8001a8a:	613b      	str	r3, [r7, #16]


	if (fill)
 8001a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d04f      	beq.n	8001b32 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001a92:	e029      	b.n	8001ae8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e00a      	b.n	8001ab0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f7ff ff55 	bl	8001954 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	3301      	adds	r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	ddf0      	ble.n	8001a9a <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da06      	bge.n	8001acc <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	009a      	lsls	r2, r3, #2
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3306      	adds	r3, #6
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	e00a      	b.n	8001ae2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	009a      	lsls	r2, r3, #2
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	330a      	adds	r3, #10
 8001ada:	613b      	str	r3, [r7, #16]
				y--;
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	ddd1      	ble.n	8001a94 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001af0:	e023      	b.n	8001b3a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	68b9      	ldr	r1, [r7, #8]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f7ff ff29 	bl	8001954 <_draw_circle_8>
			if (d < 0) {
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	da06      	bge.n	8001b16 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	009a      	lsls	r2, r3, #2
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4413      	add	r3, r2
 8001b10:	3306      	adds	r3, #6
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e00a      	b.n	8001b2c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	4413      	add	r3, r2
 8001b22:	330a      	adds	r3, #10
 8001b24:	613b      	str	r3, [r7, #16]
				y--;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	61bb      	str	r3, [r7, #24]
			x++;
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	dddb      	ble.n	8001af2 <lcd_DrawCircle+0x88>
}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2140      	movs	r1, #64	; 0x40
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <led7_init+0x14>)
 8001b4e:	f000 ffed 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40021800 	.word	0x40021800

08001b5c <led7_Scan>:

void led7_Scan(){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <led7_Scan+0x104>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <led7_Scan+0x104>)
 8001b6a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <led7_Scan+0x108>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a3d      	ldr	r2, [pc, #244]	; (8001c68 <led7_Scan+0x10c>)
 8001b72:	5cd3      	ldrb	r3, [r2, r3]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <led7_Scan+0x104>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <led7_Scan+0x104>)
 8001b86:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001b88:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <led7_Scan+0x108>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d847      	bhi.n	8001c20 <led7_Scan+0xc4>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <led7_Scan+0x3c>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001ba9 	.word	0x08001ba9
 8001b9c:	08001bc7 	.word	0x08001bc7
 8001ba0:	08001be5 	.word	0x08001be5
 8001ba4:	08001c03 	.word	0x08001c03
	case 0:
		spi_buffer |= 0x00b0;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <led7_Scan+0x104>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <led7_Scan+0x104>)
 8001bb4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <led7_Scan+0x104>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <led7_Scan+0x104>)
 8001bc2:	801a      	strh	r2, [r3, #0]
		break;
 8001bc4:	e02d      	b.n	8001c22 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <led7_Scan+0x104>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <led7_Scan+0x104>)
 8001bd2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <led7_Scan+0x104>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	f023 0320 	bic.w	r3, r3, #32
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <led7_Scan+0x104>)
 8001be0:	801a      	strh	r2, [r3, #0]
		break;
 8001be2:	e01e      	b.n	8001c22 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <led7_Scan+0x104>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <led7_Scan+0x104>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <led7_Scan+0x104>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	f023 0310 	bic.w	r3, r3, #16
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <led7_Scan+0x104>)
 8001bfe:	801a      	strh	r2, [r3, #0]
		break;
 8001c00:	e00f      	b.n	8001c22 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <led7_Scan+0x104>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <led7_Scan+0x104>)
 8001c0e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <led7_Scan+0x104>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <led7_Scan+0x104>)
 8001c1c:	801a      	strh	r2, [r3, #0]
		break;
 8001c1e:	e000      	b.n	8001c22 <led7_Scan+0xc6>
	default:
		break;
 8001c20:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <led7_Scan+0x108>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	425a      	negs	r2, r3
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	bf58      	it	pl
 8001c34:	4253      	negpl	r3, r2
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <led7_Scan+0x108>)
 8001c38:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2140      	movs	r1, #64	; 0x40
 8001c3e:	480b      	ldr	r0, [pc, #44]	; (8001c6c <led7_Scan+0x110>)
 8001c40:	f000 ff74 	bl	8002b2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001c44:	2301      	movs	r3, #1
 8001c46:	2202      	movs	r2, #2
 8001c48:	4905      	ldr	r1, [pc, #20]	; (8001c60 <led7_Scan+0x104>)
 8001c4a:	4809      	ldr	r0, [pc, #36]	; (8001c70 <led7_Scan+0x114>)
 8001c4c:	f001 fde3 	bl	8003816 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <led7_Scan+0x110>)
 8001c56:	f000 ff69 	bl	8002b2c <HAL_GPIO_WritePin>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000010 	.word	0x20000010
 8001c64:	20000068 	.word	0x20000068
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	40021800 	.word	0x40021800
 8001c70:	2000017c 	.word	0x2000017c

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c78:	f000 fb82 	bl	8002380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7c:	f000 f826 	bl	8001ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c80:	f7ff f8e6 	bl	8000e50 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c84:	f000 fa3a 	bl	80020fc <MX_TIM2_Init>
  MX_SPI1_Init();
 8001c88:	f000 f942 	bl	8001f10 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001c8c:	f7ff f810 	bl	8000cb0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001c90:	f7ff f9d6 	bl	8001040 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c94:	f000 fad0 	bl	8002238 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001c98:	f000 f882 	bl	8001da0 <system_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 8001c9c:	bf00      	nop
 8001c9e:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <main+0x50>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0fb      	beq.n	8001c9e <main+0x2a>
	  flag_timer2 = 0;
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <main+0x50>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	801a      	strh	r2, [r3, #0]
	  counter++;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <main+0x54>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <main+0x54>)
 8001cb4:	6013      	str	r3, [r2, #0]
	  button_Scan();
 8001cb6:	f7fe fc0f 	bl	80004d8 <button_Scan>
	  test_LedDebug();
 8001cba:	f000 f893 	bl	8001de4 <test_LedDebug>
//	  ds3231_ReadTime();
//	  test_Uart();
	  fsm_mode();
 8001cbe:	f7fe fe19 	bl	80008f4 <fsm_mode>
	  while(!flag_timer2);
 8001cc2:	e7eb      	b.n	8001c9c <main+0x28>
 8001cc4:	20000074 	.word	0x20000074
 8001cc8:	20000060 	.word	0x20000060

08001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b094      	sub	sp, #80	; 0x50
 8001cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd2:	f107 0320 	add.w	r3, r7, #32
 8001cd6:	2230      	movs	r2, #48	; 0x30
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 f83c 	bl	8005d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <SystemClock_Config+0xcc>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a27      	ldr	r2, [pc, #156]	; (8001d98 <SystemClock_Config+0xcc>)
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001d00:	4b25      	ldr	r3, [pc, #148]	; (8001d98 <SystemClock_Config+0xcc>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	607b      	str	r3, [r7, #4]
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <SystemClock_Config+0xd0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a21      	ldr	r2, [pc, #132]	; (8001d9c <SystemClock_Config+0xd0>)
 8001d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <SystemClock_Config+0xd0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d24:	607b      	str	r3, [r7, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d30:	2310      	movs	r3, #16
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d34:	2302      	movs	r3, #2
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d40:	23a8      	movs	r3, #168	; 0xa8
 8001d42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d44:	2302      	movs	r3, #2
 8001d46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	4618      	mov	r0, r3
 8001d52:	f001 f863 	bl	8002e1c <HAL_RCC_OscConfig>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d5c:	f000 f866 	bl	8001e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d60:	230f      	movs	r3, #15
 8001d62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d64:	2302      	movs	r3, #2
 8001d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001d72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d78:	f107 030c 	add.w	r3, r7, #12
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 fac4 	bl	800330c <HAL_RCC_ClockConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d8a:	f000 f84f 	bl	8001e2c <Error_Handler>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3750      	adds	r7, #80	; 0x50
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40007000 	.word	0x40007000

08001da0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001da4:	2200      	movs	r2, #0
 8001da6:	2120      	movs	r1, #32
 8001da8:	480d      	ldr	r0, [pc, #52]	; (8001de0 <system_init+0x40>)
 8001daa:	f000 febf 	bl	8002b2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2140      	movs	r1, #64	; 0x40
 8001db2:	480b      	ldr	r0, [pc, #44]	; (8001de0 <system_init+0x40>)
 8001db4:	f000 feba 	bl	8002b2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2110      	movs	r1, #16
 8001dbc:	4808      	ldr	r0, [pc, #32]	; (8001de0 <system_init+0x40>)
 8001dbe:	f000 feb5 	bl	8002b2c <HAL_GPIO_WritePin>
	  timer_init();
 8001dc2:	f000 f839 	bl	8001e38 <timer_init>
	  led7_init();
 8001dc6:	f7ff febd 	bl	8001b44 <led7_init>
	  button_init();
 8001dca:	f7fe fb79 	bl	80004c0 <button_init>
	  lcd_init();
 8001dce:	f7ff fc61 	bl	8001694 <lcd_init>
	  uart_init_rs232();
 8001dd2:	f000 fa05 	bl	80021e0 <uart_init_rs232>
	  setTimer2(50);
 8001dd6:	2032      	movs	r0, #50	; 0x32
 8001dd8:	f000 f838 	bl	8001e4c <setTimer2>
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000

08001de4 <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <test_LedDebug+0x3c>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <test_LedDebug+0x40>)
 8001df0:	fb83 1302 	smull	r1, r3, r3, r2
 8001df4:	10d9      	asrs	r1, r3, #3
 8001df6:	17d3      	asrs	r3, r2, #31
 8001df8:	1ac9      	subs	r1, r1, r3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	440b      	add	r3, r1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	1ad1      	subs	r1, r2, r3
 8001e04:	b28a      	uxth	r2, r1
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <test_LedDebug+0x3c>)
 8001e08:	801a      	strh	r2, [r3, #0]
	if(count_led_debug == 0){
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <test_LedDebug+0x3c>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8001e12:	2110      	movs	r1, #16
 8001e14:	4804      	ldr	r0, [pc, #16]	; (8001e28 <test_LedDebug+0x44>)
 8001e16:	f000 fea2 	bl	8002b5e <HAL_GPIO_TogglePin>
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000006c 	.word	0x2000006c
 8001e24:	66666667 	.word	0x66666667
 8001e28:	40021000 	.word	0x40021000

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001e3c:	4802      	ldr	r0, [pc, #8]	; (8001e48 <timer_init+0x10>)
 8001e3e:	f002 fa9d 	bl	800437c <HAL_TIM_Base_Start_IT>
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200001d4 	.word	0x200001d4

08001e4c <setTimer2>:
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}

void setTimer2(uint16_t duration)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE;
 8001e56:	4a08      	ldr	r2, [pc, #32]	; (8001e78 <setTimer2+0x2c>)
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <setTimer2+0x2c>)
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <setTimer2+0x30>)
 8001e62:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <setTimer2+0x34>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	801a      	strh	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000078 	.word	0x20000078
 8001e7c:	20000076 	.word	0x20000076
 8001e80:	20000074 	.word	0x20000074

08001e84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e94:	d12b      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		if(timer1_counter > 0)
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d010      	beq.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timer1_counter--;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001ea8:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0)
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				flag_timer1 = 1;
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001ebe:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0)
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer2_counter--;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ed2:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0)
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d106      	bne.n	8001eea <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_timer2 = 1;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001ee4:	881a      	ldrh	r2, [r3, #0]
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ee8:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001eea:	f7ff fe37 	bl	8001b5c <led7_Scan>
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000070 	.word	0x20000070
 8001efc:	2000006e 	.word	0x2000006e
 8001f00:	20000072 	.word	0x20000072
 8001f04:	20000076 	.word	0x20000076
 8001f08:	20000074 	.word	0x20000074
 8001f0c:	20000078 	.word	0x20000078

08001f10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <MX_SPI1_Init+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f42:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_SPI1_Init+0x64>)
 8001f62:	f001 fbcf 	bl	8003704 <HAL_SPI_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f6c:	f7ff ff5e 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000017c 	.word	0x2000017c
 8001f78:	40013000 	.word	0x40013000

08001f7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_SPI_MspInit+0x84>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12b      	bne.n	8001ff6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_SPI_MspInit+0x88>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_SPI_MspInit+0x88>)
 8001fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_SPI_MspInit+0x88>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_SPI_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_SPI_MspInit+0x88>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_SPI_MspInit+0x88>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001fd6:	2338      	movs	r3, #56	; 0x38
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4805      	ldr	r0, [pc, #20]	; (8002008 <HAL_SPI_MspInit+0x8c>)
 8001ff2:	f000 fbff 	bl	80027f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3728      	adds	r7, #40	; 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40013000 	.word	0x40013000
 8002004:	40023800 	.word	0x40023800
 8002008:	40020400 	.word	0x40020400

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler+0x4>

08002062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <MemManage_Handler+0x4>

0800206e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <BusFault_Handler+0x4>

08002074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <UsageFault_Handler+0x4>

0800207a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a8:	f000 f9bc 	bl	8002424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f002 f9d1 	bl	800445c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200001d4 	.word	0x200001d4

080020c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <USART1_IRQHandler+0x10>)
 80020ca:	f002 fe99 	bl	8004e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000021c 	.word	0x2000021c

080020d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	463b      	mov	r3, r7
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <MX_TIM2_Init+0x94>)
 800211a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800211e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <MX_TIM2_Init+0x94>)
 8002122:	f240 3247 	movw	r2, #839	; 0x347
 8002126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MX_TIM2_Init+0x94>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <MX_TIM2_Init+0x94>)
 8002130:	2263      	movs	r2, #99	; 0x63
 8002132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <MX_TIM2_Init+0x94>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <MX_TIM2_Init+0x94>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <MX_TIM2_Init+0x94>)
 8002142:	f002 f8cb 	bl	80042dc <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800214c:	f7ff fe6e 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002154:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	; (8002190 <MX_TIM2_Init+0x94>)
 800215e:	f002 fa85 	bl	800466c <HAL_TIM_ConfigClockSource>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002168:	f7ff fe60 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002174:	463b      	mov	r3, r7
 8002176:	4619      	mov	r1, r3
 8002178:	4805      	ldr	r0, [pc, #20]	; (8002190 <MX_TIM2_Init+0x94>)
 800217a:	f002 fca1 	bl	8004ac0 <HAL_TIMEx_MasterConfigSynchronization>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002184:	f7ff fe52 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	200001d4 	.word	0x200001d4

08002194 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d115      	bne.n	80021d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_TIM_Base_MspInit+0x48>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	201c      	movs	r0, #28
 80021c8:	f000 fa4b 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021cc:	201c      	movs	r0, #28
 80021ce:	f000 fa64 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800

080021e0 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80021e4:	2201      	movs	r2, #1
 80021e6:	4903      	ldr	r1, [pc, #12]	; (80021f4 <uart_init_rs232+0x14>)
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <uart_init_rs232+0x18>)
 80021ea:	f002 fdd8 	bl	8004d9e <HAL_UART_Receive_IT>
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000007a 	.word	0x2000007a
 80021f8:	2000021c 	.word	0x2000021c

080021fc <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a08      	ldr	r2, [pc, #32]	; (800222c <HAL_UART_RxCpltCallback+0x30>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10a      	bne.n	8002224 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800220e:	230a      	movs	r3, #10
 8002210:	2201      	movs	r2, #1
 8002212:	4907      	ldr	r1, [pc, #28]	; (8002230 <HAL_UART_RxCpltCallback+0x34>)
 8002214:	4807      	ldr	r0, [pc, #28]	; (8002234 <HAL_UART_RxCpltCallback+0x38>)
 8002216:	f002 fd30 	bl	8004c7a <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800221a:	2201      	movs	r2, #1
 800221c:	4904      	ldr	r1, [pc, #16]	; (8002230 <HAL_UART_RxCpltCallback+0x34>)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <HAL_UART_RxCpltCallback+0x38>)
 8002220:	f002 fdbd 	bl	8004d9e <HAL_UART_Receive_IT>
	}
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40011000 	.word	0x40011000
 8002230:	2000007a 	.word	0x2000007a
 8002234:	2000021c 	.word	0x2000021c

08002238 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_USART1_UART_Init+0x50>)
 8002240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800226e:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_USART1_UART_Init+0x4c>)
 8002270:	f002 fcb6 	bl	8004be0 <HAL_UART_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800227a:	f7ff fdd7 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	2000021c 	.word	0x2000021c
 8002288:	40011000 	.word	0x40011000

0800228c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_UART_MspInit+0x94>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d134      	bne.n	8002318 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_UART_MspInit+0x98>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_UART_MspInit+0x98>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	6453      	str	r3, [r2, #68]	; 0x44
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_UART_MspInit+0x98>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_UART_MspInit+0x98>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a14      	ldr	r2, [pc, #80]	; (8002324 <HAL_UART_MspInit+0x98>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_UART_MspInit+0x98>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f8:	2307      	movs	r3, #7
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <HAL_UART_MspInit+0x9c>)
 8002304:	f000 fa76 	bl	80027f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2025      	movs	r0, #37	; 0x25
 800230e:	f000 f9a8 	bl	8002662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002312:	2025      	movs	r0, #37	; 0x25
 8002314:	f000 f9c1 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40011000 	.word	0x40011000
 8002324:	40023800 	.word	0x40023800
 8002328:	40020000 	.word	0x40020000

0800232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002364 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002332:	490e      	ldr	r1, [pc, #56]	; (800236c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002334:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800233a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800233c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002348:	4c0b      	ldr	r4, [pc, #44]	; (8002378 <LoopFillZerobss+0x26>)
  movs r3, #0
 800234a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800234e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002356:	f7ff febf 	bl	80020d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235a:	f003 fcd9 	bl	8005d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235e:	f7ff fc89 	bl	8001c74 <main>
  bx  lr    
 8002362:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002364:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002370:	0800b5f0 	.word	0x0800b5f0
  ldr r2, =_sbss
 8002374:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002378:	20000264 	.word	0x20000264

0800237c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC_IRQHandler>
	...

08002380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <HAL_Init+0x40>)
 800238a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <HAL_Init+0x40>)
 8002396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800239a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HAL_Init+0x40>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_Init+0x40>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023a8:	2003      	movs	r0, #3
 80023aa:	f000 f94f 	bl	800264c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ae:	200f      	movs	r0, #15
 80023b0:	f000 f808 	bl	80023c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023b4:	f7ff fe2a 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023c00 	.word	0x40023c00

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_InitTick+0x54>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_InitTick+0x58>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023da:	fbb3 f3f1 	udiv	r3, r3, r1
 80023de:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f967 	bl	80026b6 <HAL_SYSTICK_Config>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00e      	b.n	8002410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0f      	cmp	r3, #15
 80023f6:	d80a      	bhi.n	800240e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f8:	2200      	movs	r2, #0
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f000 f92f 	bl	8002662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002404:	4a06      	ldr	r2, [pc, #24]	; (8002420 <HAL_InitTick+0x5c>)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e000      	b.n	8002410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000014 	.word	0x20000014
 800241c:	2000001c 	.word	0x2000001c
 8002420:	20000018 	.word	0x20000018

08002424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_IncTick+0x20>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_IncTick+0x24>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_IncTick+0x24>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	2000001c 	.word	0x2000001c
 8002448:	20000260 	.word	0x20000260

0800244c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return uwTick;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_GetTick+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000260 	.word	0x20000260

08002464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff ffee 	bl	800244c <HAL_GetTick>
 8002470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d005      	beq.n	800248a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_Delay+0x44>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800248a:	bf00      	nop
 800248c:	f7ff ffde 	bl	800244c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d8f7      	bhi.n	800248c <HAL_Delay+0x28>
  {
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000001c 	.word	0x2000001c

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4907      	ldr	r1, [pc, #28]	; (8002548 <__NVIC_EnableIRQ+0x38>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db0a      	blt.n	8002576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	490c      	ldr	r1, [pc, #48]	; (8002598 <__NVIC_SetPriority+0x4c>)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	0112      	lsls	r2, r2, #4
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	440b      	add	r3, r1
 8002570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002574:	e00a      	b.n	800258c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <__NVIC_SetPriority+0x50>)
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	3b04      	subs	r3, #4
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	440b      	add	r3, r1
 800258a:	761a      	strb	r2, [r3, #24]
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b089      	sub	sp, #36	; 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f1c3 0307 	rsb	r3, r3, #7
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	bf28      	it	cs
 80025be:	2304      	movcs	r3, #4
 80025c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3304      	adds	r3, #4
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d902      	bls.n	80025d0 <NVIC_EncodePriority+0x30>
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3b03      	subs	r3, #3
 80025ce:	e000      	b.n	80025d2 <NVIC_EncodePriority+0x32>
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	f04f 32ff 	mov.w	r2, #4294967295
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	401a      	ands	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa01 f303 	lsl.w	r3, r1, r3
 80025f2:	43d9      	mvns	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f8:	4313      	orrs	r3, r2
         );
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	; 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002618:	d301      	bcc.n	800261e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800261a:	2301      	movs	r3, #1
 800261c:	e00f      	b.n	800263e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <SysTick_Config+0x40>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002626:	210f      	movs	r1, #15
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f7ff ff8e 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <SysTick_Config+0x40>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002636:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SysTick_Config+0x40>)
 8002638:	2207      	movs	r2, #7
 800263a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000e010 	.word	0xe000e010

0800264c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff ff29 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002662:	b580      	push	{r7, lr}
 8002664:	b086      	sub	sp, #24
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002674:	f7ff ff3e 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff ff8e 	bl	80025a0 <NVIC_EncodePriority>
 8002684:	4602      	mov	r2, r0
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>
}
 8002692:	bf00      	nop
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	4603      	mov	r3, r0
 80026a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff31 	bl	8002510 <__NVIC_EnableIRQ>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff ffa2 	bl	8002608 <SysTick_Config>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff feb6 	bl	800244c <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d008      	beq.n	8002700 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e052      	b.n	80027a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0216 	bic.w	r2, r2, #22
 800270e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800271e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <HAL_DMA_Abort+0x62>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0208 	bic.w	r2, r2, #8
 800273e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002750:	e013      	b.n	800277a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002752:	f7ff fe7b 	bl	800244c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b05      	cmp	r3, #5
 800275e:	d90c      	bls.n	800277a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2203      	movs	r2, #3
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e015      	b.n	80027a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1e4      	bne.n	8002752 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278c:	223f      	movs	r2, #63	; 0x3f
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d004      	beq.n	80027cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2280      	movs	r2, #128	; 0x80
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e00c      	b.n	80027e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2205      	movs	r2, #5
 80027d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e16b      	b.n	8002ae8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 815a 	bne.w	8002ae2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80b4 	beq.w	8002ae2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b60      	ldr	r3, [pc, #384]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a5f      	ldr	r2, [pc, #380]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b5d      	ldr	r3, [pc, #372]	; (8002b00 <HAL_GPIO_Init+0x30c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <HAL_GPIO_Init+0x310>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x314>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d02b      	beq.n	8002a1a <HAL_GPIO_Init+0x226>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a51      	ldr	r2, [pc, #324]	; (8002b0c <HAL_GPIO_Init+0x318>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d025      	beq.n	8002a16 <HAL_GPIO_Init+0x222>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a50      	ldr	r2, [pc, #320]	; (8002b10 <HAL_GPIO_Init+0x31c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01f      	beq.n	8002a12 <HAL_GPIO_Init+0x21e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a4f      	ldr	r2, [pc, #316]	; (8002b14 <HAL_GPIO_Init+0x320>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d019      	beq.n	8002a0e <HAL_GPIO_Init+0x21a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a4e      	ldr	r2, [pc, #312]	; (8002b18 <HAL_GPIO_Init+0x324>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d013      	beq.n	8002a0a <HAL_GPIO_Init+0x216>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a4d      	ldr	r2, [pc, #308]	; (8002b1c <HAL_GPIO_Init+0x328>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d00d      	beq.n	8002a06 <HAL_GPIO_Init+0x212>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a4c      	ldr	r2, [pc, #304]	; (8002b20 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d007      	beq.n	8002a02 <HAL_GPIO_Init+0x20e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a4b      	ldr	r2, [pc, #300]	; (8002b24 <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d101      	bne.n	80029fe <HAL_GPIO_Init+0x20a>
 80029fa:	2307      	movs	r3, #7
 80029fc:	e00e      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e00c      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a02:	2306      	movs	r3, #6
 8002a04:	e00a      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a06:	2305      	movs	r3, #5
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x228>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2c:	4935      	ldr	r1, [pc, #212]	; (8002b04 <HAL_GPIO_Init+0x310>)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4013      	ands	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a5e:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a64:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a88:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_GPIO_Init+0x334>)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	61fb      	str	r3, [r7, #28]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	f67f ae90 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3724      	adds	r7, #36	; 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40013800 	.word	0x40013800
 8002b08:	40020000 	.word	0x40020000
 8002b0c:	40020400 	.word	0x40020400
 8002b10:	40020800 	.word	0x40020800
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40021400 	.word	0x40021400
 8002b20:	40021800 	.word	0x40021800
 8002b24:	40021c00 	.word	0x40021c00
 8002b28:	40013c00 	.word	0x40013c00

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b48:	e003      	b.n	8002b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	619a      	str	r2, [r3, #24]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b70:	887a      	ldrh	r2, [r7, #2]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4013      	ands	r3, r2
 8002b76:	041a      	lsls	r2, r3, #16
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	400b      	ands	r3, r1
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e12b      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe fa6e 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f000 fd5c 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a81      	ldr	r2, [pc, #516]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d807      	bhi.n	8002c18 <HAL_I2C_Init+0x84>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4a80      	ldr	r2, [pc, #512]	; (8002e0c <HAL_I2C_Init+0x278>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	bf94      	ite	ls
 8002c10:	2301      	movls	r3, #1
 8002c12:	2300      	movhi	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e006      	b.n	8002c26 <HAL_I2C_Init+0x92>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a7d      	ldr	r2, [pc, #500]	; (8002e10 <HAL_I2C_Init+0x27c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0e7      	b.n	8002dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a78      	ldr	r2, [pc, #480]	; (8002e14 <HAL_I2C_Init+0x280>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d802      	bhi.n	8002c68 <HAL_I2C_Init+0xd4>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3301      	adds	r3, #1
 8002c66:	e009      	b.n	8002c7c <HAL_I2C_Init+0xe8>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_I2C_Init+0x284>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	099b      	lsrs	r3, r3, #6
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	495c      	ldr	r1, [pc, #368]	; (8002e08 <HAL_I2C_Init+0x274>)
 8002c98:	428b      	cmp	r3, r1
 8002c9a:	d819      	bhi.n	8002cd0 <HAL_I2C_Init+0x13c>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e59      	subs	r1, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_I2C_Init+0x138>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1e59      	subs	r1, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cca:	e051      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e04f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d111      	bne.n	8002cfc <HAL_I2C_Init+0x168>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1e58      	subs	r0, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6859      	ldr	r1, [r3, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e012      	b.n	8002d22 <HAL_I2C_Init+0x18e>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	0099      	lsls	r1, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d12:	3301      	adds	r3, #1
 8002d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x196>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e022      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10e      	bne.n	8002d50 <HAL_I2C_Init+0x1bc>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e58      	subs	r0, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6859      	ldr	r1, [r3, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	440b      	add	r3, r1
 8002d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Init+0x1dc>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	0099      	lsls	r1, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	6809      	ldr	r1, [r1, #0]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6911      	ldr	r1, [r2, #16]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	68d2      	ldr	r2, [r2, #12]
 8002daa:	4311      	orrs	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	000186a0 	.word	0x000186a0
 8002e0c:	001e847f 	.word	0x001e847f
 8002e10:	003d08ff 	.word	0x003d08ff
 8002e14:	431bde83 	.word	0x431bde83
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e264      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d075      	beq.n	8002f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3a:	4ba3      	ldr	r3, [pc, #652]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4ba0      	ldr	r3, [pc, #640]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d112      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b9d      	ldr	r3, [pc, #628]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b99      	ldr	r3, [pc, #612]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x108>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d157      	bne.n	8002f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e23f      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x74>
 8002e82:	4b91      	ldr	r3, [pc, #580]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a90      	ldr	r2, [pc, #576]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a8a      	ldr	r2, [pc, #552]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a87      	ldr	r2, [pc, #540]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002eb4:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a83      	ldr	r2, [pc, #524]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a80      	ldr	r2, [pc, #512]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7ff faba 	bl	800244c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7ff fab6 	bl	800244c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e204      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xc0>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7ff faa6 	bl	800244c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f04:	f7ff faa2 	bl	800244c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1f0      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b6c      	ldr	r3, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0xe8>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b5f      	ldr	r3, [pc, #380]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b5c      	ldr	r3, [pc, #368]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1c4      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b56      	ldr	r3, [pc, #344]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4952      	ldr	r1, [pc, #328]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b4f      	ldr	r3, [pc, #316]	; (80030cc <HAL_RCC_OscConfig+0x2b0>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7ff fa5b 	bl	800244c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7ff fa57 	bl	800244c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1a5      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4940      	ldr	r1, [pc, #256]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_OscConfig+0x2b0>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fa3a 	bl	800244c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7ff fa36 	bl	800244c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e184      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d030      	beq.n	8003068 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_RCC_OscConfig+0x2b4>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7ff fa1a 	bl	800244c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301c:	f7ff fa16 	bl	800244c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e164      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x200>
 800303a:	e015      	b.n	8003068 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <HAL_RCC_OscConfig+0x2b4>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7ff fa03 	bl	800244c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304a:	f7ff f9ff 	bl	800244c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e14d      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a0 	beq.w	80031b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x2ac>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x2b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d121      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b2:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_RCC_OscConfig+0x2b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_RCC_OscConfig+0x2b8>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030be:	f7ff f9c5 	bl	800244c <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e011      	b.n	80030ea <HAL_RCC_OscConfig+0x2ce>
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	42470000 	.word	0x42470000
 80030d0:	42470e80 	.word	0x42470e80
 80030d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7ff f9b8 	bl	800244c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e106      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	4b85      	ldr	r3, [pc, #532]	; (8003300 <HAL_RCC_OscConfig+0x4e4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x2f0>
 80030fe:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003102:	4a80      	ldr	r2, [pc, #512]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6713      	str	r3, [r2, #112]	; 0x70
 800310a:	e01c      	b.n	8003146 <HAL_RCC_OscConfig+0x32a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b05      	cmp	r3, #5
 8003112:	d10c      	bne.n	800312e <HAL_RCC_OscConfig+0x312>
 8003114:	4b7b      	ldr	r3, [pc, #492]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a7a      	ldr	r2, [pc, #488]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	4b78      	ldr	r3, [pc, #480]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a77      	ldr	r2, [pc, #476]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	e00b      	b.n	8003146 <HAL_RCC_OscConfig+0x32a>
 800312e:	4b75      	ldr	r3, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a74      	ldr	r2, [pc, #464]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	4b72      	ldr	r3, [pc, #456]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 800313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313e:	4a71      	ldr	r2, [pc, #452]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d015      	beq.n	800317a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7ff f97d 	bl	800244c <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7ff f979 	bl	800244c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e0c5      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 800316e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ee      	beq.n	8003156 <HAL_RCC_OscConfig+0x33a>
 8003178:	e014      	b.n	80031a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317a:	f7ff f967 	bl	800244c <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7ff f963 	bl	800244c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0af      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003198:	4b5a      	ldr	r3, [pc, #360]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 800319a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1ee      	bne.n	8003182 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a55      	ldr	r2, [pc, #340]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 809b 	beq.w	80032f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c0:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 030c 	and.w	r3, r3, #12
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d05c      	beq.n	8003286 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d141      	bne.n	8003258 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <HAL_RCC_OscConfig+0x4ec>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7ff f937 	bl	800244c <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e2:	f7ff f933 	bl	800244c <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e081      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	019b      	lsls	r3, r3, #6
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	4937      	ldr	r1, [pc, #220]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003226:	4313      	orrs	r3, r2
 8003228:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322a:	4b37      	ldr	r3, [pc, #220]	; (8003308 <HAL_RCC_OscConfig+0x4ec>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7ff f90c 	bl	800244c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7ff f908 	bl	800244c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e056      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x41c>
 8003256:	e04e      	b.n	80032f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003258:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <HAL_RCC_OscConfig+0x4ec>)
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7ff f8f5 	bl	800244c <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003264:	e008      	b.n	8003278 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003266:	f7ff f8f1 	bl	800244c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e03f      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003278:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f0      	bne.n	8003266 <HAL_RCC_OscConfig+0x44a>
 8003284:	e037      	b.n	80032f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e032      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003292:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_RCC_OscConfig+0x4e8>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d028      	beq.n	80032f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d121      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d11a      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032c2:	4013      	ands	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d111      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40007000 	.word	0x40007000
 8003304:	40023800 	.word	0x40023800
 8003308:	42470060 	.word	0x42470060

0800330c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0cc      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b68      	ldr	r3, [pc, #416]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d90c      	bls.n	8003348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b65      	ldr	r3, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800336a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d044      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d119      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3b      	ldr	r3, [pc, #236]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e067      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4934      	ldr	r1, [pc, #208]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7ff f826 	bl	800244c <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7ff f822 	bl	800244c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e04f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2b      	ldr	r3, [pc, #172]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b25      	ldr	r3, [pc, #148]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d20c      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe ff86 	bl	80023c4 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	0800b5c8 	.word	0x0800b5c8
 80034d0:	20000014 	.word	0x20000014
 80034d4:	20000018 	.word	0x20000018

080034d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
 80034e8:	2300      	movs	r3, #0
 80034ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f0:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d00d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	f200 80bd 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x34>
 8003506:	2b04      	cmp	r3, #4
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x3a>
 800350a:	e0b7      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b61      	ldr	r3, [pc, #388]	; (8003694 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800350e:	60bb      	str	r3, [r7, #8]
       break;
 8003510:	e0b7      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003512:	4b61      	ldr	r3, [pc, #388]	; (8003698 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003514:	60bb      	str	r3, [r7, #8]
      break;
 8003516:	e0b4      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003518:	4b5d      	ldr	r3, [pc, #372]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003520:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003522:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04d      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b58      	ldr	r3, [pc, #352]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	461a      	mov	r2, r3
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	ea02 0800 	and.w	r8, r2, r0
 8003546:	ea03 0901 	and.w	r9, r3, r1
 800354a:	4640      	mov	r0, r8
 800354c:	4649      	mov	r1, r9
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	014b      	lsls	r3, r1, #5
 8003558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800355c:	0142      	lsls	r2, r0, #5
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	ebb0 0008 	subs.w	r0, r0, r8
 8003566:	eb61 0109 	sbc.w	r1, r1, r9
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	018b      	lsls	r3, r1, #6
 8003574:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003578:	0182      	lsls	r2, r0, #6
 800357a:	1a12      	subs	r2, r2, r0
 800357c:	eb63 0301 	sbc.w	r3, r3, r1
 8003580:	f04f 0000 	mov.w	r0, #0
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	00d9      	lsls	r1, r3, #3
 800358a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800358e:	00d0      	lsls	r0, r2, #3
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	eb12 0208 	adds.w	r2, r2, r8
 8003598:	eb43 0309 	adc.w	r3, r3, r9
 800359c:	f04f 0000 	mov.w	r0, #0
 80035a0:	f04f 0100 	mov.w	r1, #0
 80035a4:	0259      	lsls	r1, r3, #9
 80035a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035aa:	0250      	lsls	r0, r2, #9
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	461a      	mov	r2, r3
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	f7fc fe04 	bl	80001c8 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4613      	mov	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e04a      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	461a      	mov	r2, r3
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	ea02 0400 	and.w	r4, r2, r0
 80035e2:	ea03 0501 	and.w	r5, r3, r1
 80035e6:	4620      	mov	r0, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	014b      	lsls	r3, r1, #5
 80035f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035f8:	0142      	lsls	r2, r0, #5
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	1b00      	subs	r0, r0, r4
 8003600:	eb61 0105 	sbc.w	r1, r1, r5
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	018b      	lsls	r3, r1, #6
 800360e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003612:	0182      	lsls	r2, r0, #6
 8003614:	1a12      	subs	r2, r2, r0
 8003616:	eb63 0301 	sbc.w	r3, r3, r1
 800361a:	f04f 0000 	mov.w	r0, #0
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	00d9      	lsls	r1, r3, #3
 8003624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003628:	00d0      	lsls	r0, r2, #3
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	1912      	adds	r2, r2, r4
 8003630:	eb45 0303 	adc.w	r3, r5, r3
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	0299      	lsls	r1, r3, #10
 800363e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003642:	0290      	lsls	r0, r2, #10
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4610      	mov	r0, r2
 800364a:	4619      	mov	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	461a      	mov	r2, r3
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	f7fc fdb8 	bl	80001c8 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	60bb      	str	r3, [r7, #8]
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800367e:	60bb      	str	r3, [r7, #8]
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	68bb      	ldr	r3, [r7, #8]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	00f42400 	.word	0x00f42400
 8003698:	007a1200 	.word	0x007a1200

0800369c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000014 	.word	0x20000014

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff0 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	0800b5d8 	.word	0x0800b5d8

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffdc 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0b5b      	lsrs	r3, r3, #13
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800b5d8 	.word	0x0800b5d8

08003704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07b      	b.n	800380e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003726:	d009      	beq.n	800373c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	61da      	str	r2, [r3, #28]
 800372e:	e005      	b.n	800373c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fe fc10 	bl	8001f7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c0:	ea42 0103 	orr.w	r1, r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	0c1b      	lsrs	r3, r3, #16
 80037da:	f003 0104 	and.w	r1, r3, #4
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0210 	and.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	69da      	ldr	r2, [r3, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_SPI_Transmit+0x22>
 8003834:	2302      	movs	r3, #2
 8003836:	e126      	b.n	8003a86 <HAL_SPI_Transmit+0x270>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003840:	f7fe fe04 	bl	800244c <HAL_GetTick>
 8003844:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	77fb      	strb	r3, [r7, #31]
    goto error;
 800385a:	e10b      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_SPI_Transmit+0x52>
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800386c:	e102      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2203      	movs	r2, #3
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	d10f      	bne.n	80038d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d007      	beq.n	80038f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fc:	d14b      	bne.n	8003996 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_SPI_Transmit+0xf6>
 8003906:	8afb      	ldrh	r3, [r7, #22]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d13e      	bne.n	800398a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003930:	e02b      	b.n	800398a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d112      	bne.n	8003966 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	86da      	strh	r2, [r3, #54]	; 0x36
 8003964:	e011      	b.n	800398a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003966:	f7fe fd71 	bl	800244c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d803      	bhi.n	800397e <HAL_SPI_Transmit+0x168>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d102      	bne.n	8003984 <HAL_SPI_Transmit+0x16e>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003988:	e074      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ce      	bne.n	8003932 <HAL_SPI_Transmit+0x11c>
 8003994:	e04c      	b.n	8003a30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <HAL_SPI_Transmit+0x18e>
 800399e:	8afb      	ldrh	r3, [r7, #22]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d140      	bne.n	8003a26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039ca:	e02c      	b.n	8003a26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d113      	bne.n	8003a02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	1c5a      	adds	r2, r3, #1
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a00:	e011      	b.n	8003a26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a02:	f7fe fd23 	bl	800244c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d803      	bhi.n	8003a1a <HAL_SPI_Transmit+0x204>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d102      	bne.n	8003a20 <HAL_SPI_Transmit+0x20a>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a24:	e026      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1cd      	bne.n	80039cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fbcb 	bl	80041d0 <SPI_EndRxTxTransaction>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e000      	b.n	8003a74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b088      	sub	sp, #32
 8003a92:	af02      	add	r7, sp, #8
 8003a94:	60f8      	str	r0, [r7, #12]
 8003a96:	60b9      	str	r1, [r7, #8]
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aaa:	d112      	bne.n	8003ad2 <HAL_SPI_Receive+0x44>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10e      	bne.n	8003ad2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f8f1 	bl	8003cb0 <HAL_SPI_TransmitReceive>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	e0ea      	b.n	8003ca8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_SPI_Receive+0x52>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0e3      	b.n	8003ca8 <HAL_SPI_Receive+0x21a>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ae8:	f7fe fcb0 	bl	800244c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d002      	beq.n	8003b00 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003afe:	e0ca      	b.n	8003c96 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Receive+0x7e>
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b10:	e0c1      	b.n	8003c96 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2204      	movs	r2, #4
 8003b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	88fa      	ldrh	r2, [r7, #6]
 8003b30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d10f      	bne.n	8003b7a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	d007      	beq.n	8003b98 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d162      	bne.n	8003c66 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ba0:	e02e      	b.n	8003c00 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d115      	bne.n	8003bdc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f103 020c 	add.w	r2, r3, #12
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bda:	e011      	b.n	8003c00 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bdc:	f7fe fc36 	bl	800244c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d803      	bhi.n	8003bf4 <HAL_SPI_Receive+0x166>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d102      	bne.n	8003bfa <HAL_SPI_Receive+0x16c>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bfe:	e04a      	b.n	8003c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1cb      	bne.n	8003ba2 <HAL_SPI_Receive+0x114>
 8003c0a:	e031      	b.n	8003c70 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d113      	bne.n	8003c42 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	b292      	uxth	r2, r2
 8003c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	1c9a      	adds	r2, r3, #2
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c40:	e011      	b.n	8003c66 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c42:	f7fe fc03 	bl	800244c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d803      	bhi.n	8003c5a <HAL_SPI_Receive+0x1cc>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d102      	bne.n	8003c60 <HAL_SPI_Receive+0x1d2>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c64:	e017      	b.n	8003c96 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1cd      	bne.n	8003c0c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	6839      	ldr	r1, [r7, #0]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fa45 	bl	8004104 <SPI_EndRxTransaction>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
 8003c92:	e000      	b.n	8003c96 <HAL_SPI_Receive+0x208>
  }

error :
 8003c94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	; 0x30
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x26>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e18a      	b.n	8003fec <HAL_SPI_TransmitReceive+0x33c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cde:	f7fe fbb5 	bl	800244c <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d00f      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x70>
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d06:	d107      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <HAL_SPI_TransmitReceive+0x68>
 8003d10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d003      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d1e:	e15b      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x82>
 8003d2c:	887b      	ldrh	r3, [r7, #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d38:	e14e      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d003      	beq.n	8003d4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2205      	movs	r2, #5
 8003d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	887a      	ldrh	r2, [r7, #2]
 8003d70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	887a      	ldrh	r2, [r7, #2]
 8003d76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d007      	beq.n	8003da2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d178      	bne.n	8003e9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x10a>
 8003db4:	8b7b      	ldrh	r3, [r7, #26]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d166      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dde:	e053      	b.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d11b      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x176>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d016      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x176>
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d113      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	881a      	ldrh	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	1c9a      	adds	r2, r3, #2
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d119      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x1b8>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d014      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	b292      	uxth	r2, r2
 8003e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e64:	2301      	movs	r3, #1
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e68:	f7fe faf0 	bl	800244c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d807      	bhi.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d003      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e86:	e0a7      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1a6      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x130>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1a1      	bne.n	8003de0 <HAL_SPI_TransmitReceive+0x130>
 8003e9c:	e07c      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_TransmitReceive+0x1fc>
 8003ea6:	8b7b      	ldrh	r3, [r7, #26]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d16b      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	7812      	ldrb	r2, [r2, #0]
 8003eb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed2:	e057      	b.n	8003f84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d11c      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x26c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d017      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x26c>
 8003eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d114      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	330c      	adds	r3, #12
 8003efc:	7812      	ldrb	r2, [r2, #0]
 8003efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d119      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x2ae>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d014      	beq.n	8003f5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f5e:	f7fe fa75 	bl	800244c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d803      	bhi.n	8003f76 <HAL_SPI_TransmitReceive+0x2c6>
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x2cc>
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d103      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f82:	e029      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1a2      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x224>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d19d      	bne.n	8003ed4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f917 	bl	80041d0 <SPI_EndRxTxTransaction>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fb4:	e010      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10b      	bne.n	8003fd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	e000      	b.n	8003fd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3730      	adds	r7, #48	; 0x30
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004004:	f7fe fa22 	bl	800244c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	4413      	add	r3, r2
 8004012:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004014:	f7fe fa1a 	bl	800244c <HAL_GetTick>
 8004018:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	015b      	lsls	r3, r3, #5
 8004020:	0d1b      	lsrs	r3, r3, #20
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402a:	e054      	b.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d050      	beq.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004034:	f7fe fa0a 	bl	800244c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	429a      	cmp	r2, r3
 8004042:	d902      	bls.n	800404a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d13d      	bne.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004058:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004062:	d111      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406c:	d004      	beq.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004076:	d107      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004090:	d10f      	bne.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e017      	b.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d19b      	bne.n	800402c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000014 	.word	0x20000014

08004104 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af02      	add	r7, sp, #8
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004118:	d111      	bne.n	800413e <SPI_EndRxTransaction+0x3a>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004122:	d004      	beq.n	800412e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412c:	d107      	bne.n	800413e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800413c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004146:	d12a      	bne.n	800419e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d012      	beq.n	8004178 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2200      	movs	r2, #0
 800415a:	2180      	movs	r1, #128	; 0x80
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff ff49 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02d      	beq.n	80041c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e026      	b.n	80041c6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	2101      	movs	r1, #1
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff ff36 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01a      	beq.n	80041c4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f043 0220 	orr.w	r2, r3, #32
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e013      	b.n	80041c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2101      	movs	r1, #1
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f7ff ff23 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d007      	beq.n	80041c4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e000      	b.n	80041c6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af02      	add	r7, sp, #8
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041dc:	4b1b      	ldr	r3, [pc, #108]	; (800424c <SPI_EndRxTxTransaction+0x7c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <SPI_EndRxTxTransaction+0x80>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0d5b      	lsrs	r3, r3, #21
 80041e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fa:	d112      	bne.n	8004222 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2200      	movs	r2, #0
 8004204:	2180      	movs	r1, #128	; 0x80
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fef4 	bl	8003ff4 <SPI_WaitFlagStateUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e00f      	b.n	8004242 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	3b01      	subs	r3, #1
 800422c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d0f2      	beq.n	8004222 <SPI_EndRxTxTransaction+0x52>
 800423c:	e000      	b.n	8004240 <SPI_EndRxTxTransaction+0x70>
        break;
 800423e:	bf00      	nop
  }

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20000014 	.word	0x20000014
 8004250:	165e9f81 	.word	0x165e9f81

08004254 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e034      	b.n	80042d4 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f7fc fddc 	bl	8000e3c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	3308      	adds	r3, #8
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f001 fc6e 	bl	8005b70 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	461a      	mov	r2, r3
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	f001 fcb8 	bl	8005c14 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6858      	ldr	r0, [r3, #4]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	f001 fced 	bl	8005c90 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	6892      	ldr	r2, [r2, #8]
 80042be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6892      	ldr	r2, [r2, #8]
 80042ca:	f041 0101 	orr.w	r1, r1, #1
 80042ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e041      	b.n	8004372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd ff46 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 fa96 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e04e      	b.n	8004432 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a23      	ldr	r2, [pc, #140]	; (8004440 <HAL_TIM_Base_Start_IT+0xc4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d022      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x80>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043be:	d01d      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <HAL_TIM_Base_Start_IT+0xc8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d018      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x80>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1e      	ldr	r2, [pc, #120]	; (8004448 <HAL_TIM_Base_Start_IT+0xcc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x80>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1c      	ldr	r2, [pc, #112]	; (800444c <HAL_TIM_Base_Start_IT+0xd0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x80>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_TIM_Base_Start_IT+0xd4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x80>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_TIM_Base_Start_IT+0xd8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0x80>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_TIM_Base_Start_IT+0xdc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d111      	bne.n	8004420 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b06      	cmp	r3, #6
 800440c:	d010      	beq.n	8004430 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441e:	e007      	b.n	8004430 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800
 800444c:	40000c00 	.word	0x40000c00
 8004450:	40010400 	.word	0x40010400
 8004454:	40014000 	.word	0x40014000
 8004458:	40001800 	.word	0x40001800

0800445c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b02      	cmp	r3, #2
 8004470:	d122      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b02      	cmp	r3, #2
 800447e:	d11b      	bne.n	80044b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0202 	mvn.w	r2, #2
 8004488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9b5 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 80044a4:	e005      	b.n	80044b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f9a7 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f9b8 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d122      	bne.n	800450c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d11b      	bne.n	800450c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0204 	mvn.w	r2, #4
 80044dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2202      	movs	r2, #2
 80044e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f98b 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 80044f8:	e005      	b.n	8004506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f97d 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f98e 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b08      	cmp	r3, #8
 8004518:	d122      	bne.n	8004560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b08      	cmp	r3, #8
 8004526:	d11b      	bne.n	8004560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f06f 0208 	mvn.w	r2, #8
 8004530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2204      	movs	r2, #4
 8004536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f961 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 800454c:	e005      	b.n	800455a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f953 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f964 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b10      	cmp	r3, #16
 800456c:	d122      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b10      	cmp	r3, #16
 800457a:	d11b      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0210 	mvn.w	r2, #16
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2208      	movs	r2, #8
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f937 	bl	800480e <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f929 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f93a 	bl	8004822 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d10e      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0201 	mvn.w	r2, #1
 80045d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fd fc52 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	d10e      	bne.n	800460c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f8:	2b80      	cmp	r3, #128	; 0x80
 80045fa:	d107      	bne.n	800460c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fae0 	bl	8004bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b40      	cmp	r3, #64	; 0x40
 8004618:	d10e      	bne.n	8004638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d107      	bne.n	8004638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f8ff 	bl	8004836 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b20      	cmp	r3, #32
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b20      	cmp	r3, #32
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0220 	mvn.w	r2, #32
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 faaa 	bl	8004bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_TIM_ConfigClockSource+0x1c>
 8004684:	2302      	movs	r3, #2
 8004686:	e0b4      	b.n	80047f2 <HAL_TIM_ConfigClockSource+0x186>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c0:	d03e      	beq.n	8004740 <HAL_TIM_ConfigClockSource+0xd4>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	f200 8087 	bhi.w	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	f000 8086 	beq.w	80047de <HAL_TIM_ConfigClockSource+0x172>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	d87f      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046d8:	2b70      	cmp	r3, #112	; 0x70
 80046da:	d01a      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0xa6>
 80046dc:	2b70      	cmp	r3, #112	; 0x70
 80046de:	d87b      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b60      	cmp	r3, #96	; 0x60
 80046e2:	d050      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x11a>
 80046e4:	2b60      	cmp	r3, #96	; 0x60
 80046e6:	d877      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b50      	cmp	r3, #80	; 0x50
 80046ea:	d03c      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0xfa>
 80046ec:	2b50      	cmp	r3, #80	; 0x50
 80046ee:	d873      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d058      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0x13a>
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d86f      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b30      	cmp	r3, #48	; 0x30
 80046fa:	d064      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 80046fc:	2b30      	cmp	r3, #48	; 0x30
 80046fe:	d86b      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d060      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004704:	2b20      	cmp	r3, #32
 8004706:	d867      	bhi.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d05c      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	2b10      	cmp	r3, #16
 800470e:	d05a      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004710:	e062      	b.n	80047d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6899      	ldr	r1, [r3, #8]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f000 f9ad 	bl	8004a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	609a      	str	r2, [r3, #8]
      break;
 800473e:	e04f      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	6899      	ldr	r1, [r3, #8]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f000 f996 	bl	8004a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004762:	609a      	str	r2, [r3, #8]
      break;
 8004764:	e03c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	461a      	mov	r2, r3
 8004774:	f000 f90a 	bl	800498c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2150      	movs	r1, #80	; 0x50
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f963 	bl	8004a4a <TIM_ITRx_SetConfig>
      break;
 8004784:	e02c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	461a      	mov	r2, r3
 8004794:	f000 f929 	bl	80049ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2160      	movs	r1, #96	; 0x60
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f953 	bl	8004a4a <TIM_ITRx_SetConfig>
      break;
 80047a4:	e01c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f000 f8ea 	bl	800498c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2140      	movs	r1, #64	; 0x40
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f943 	bl	8004a4a <TIM_ITRx_SetConfig>
      break;
 80047c4:	e00c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4619      	mov	r1, r3
 80047d0:	4610      	mov	r0, r2
 80047d2:	f000 f93a 	bl	8004a4a <TIM_ITRx_SetConfig>
      break;
 80047d6:	e003      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e000      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a40      	ldr	r2, [pc, #256]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d013      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a3d      	ldr	r2, [pc, #244]	; (8004964 <TIM_Base_SetConfig+0x118>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a3c      	ldr	r2, [pc, #240]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a3b      	ldr	r2, [pc, #236]	; (800496c <TIM_Base_SetConfig+0x120>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <TIM_Base_SetConfig+0x114>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d027      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a2c      	ldr	r2, [pc, #176]	; (8004964 <TIM_Base_SetConfig+0x118>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d023      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <TIM_Base_SetConfig+0x11c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a2a      	ldr	r2, [pc, #168]	; (800496c <TIM_Base_SetConfig+0x120>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a29      	ldr	r2, [pc, #164]	; (8004970 <TIM_Base_SetConfig+0x124>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d017      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <TIM_Base_SetConfig+0x128>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d013      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <TIM_Base_SetConfig+0x12c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a26      	ldr	r2, [pc, #152]	; (800497c <TIM_Base_SetConfig+0x130>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a25      	ldr	r2, [pc, #148]	; (8004980 <TIM_Base_SetConfig+0x134>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a24      	ldr	r2, [pc, #144]	; (8004984 <TIM_Base_SetConfig+0x138>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a23      	ldr	r2, [pc, #140]	; (8004988 <TIM_Base_SetConfig+0x13c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <TIM_Base_SetConfig+0x114>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <TIM_Base_SetConfig+0xf8>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0c      	ldr	r2, [pc, #48]	; (8004970 <TIM_Base_SetConfig+0x124>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d103      	bne.n	800494c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	615a      	str	r2, [r3, #20]
}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40010000 	.word	0x40010000
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800
 800496c:	40000c00 	.word	0x40000c00
 8004970:	40010400 	.word	0x40010400
 8004974:	40014000 	.word	0x40014000
 8004978:	40014400 	.word	0x40014400
 800497c:	40014800 	.word	0x40014800
 8004980:	40001800 	.word	0x40001800
 8004984:	40001c00 	.word	0x40001c00
 8004988:	40002000 	.word	0x40002000

0800498c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f023 0201 	bic.w	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 030a 	bic.w	r3, r3, #10
 80049c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	621a      	str	r2, [r3, #32]
}
 80049de:	bf00      	nop
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b087      	sub	sp, #28
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0210 	bic.w	r2, r3, #16
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	031b      	lsls	r3, r3, #12
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f043 0307 	orr.w	r3, r3, #7
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	609a      	str	r2, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	609a      	str	r2, [r3, #8]
}
 8004ab4:	bf00      	nop
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e05a      	b.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b24:	d01d      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a1b      	ldr	r2, [pc, #108]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a18      	ldr	r2, [pc, #96]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10c      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800
 8004ba8:	40000c00 	.word	0x40000c00
 8004bac:	40010400 	.word	0x40010400
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	40001800 	.word	0x40001800

08004bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e03f      	b.n	8004c72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd fb40 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2224      	movs	r2, #36	; 0x24
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fddb 	bl	80057e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691a      	ldr	r2, [r3, #16]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b08a      	sub	sp, #40	; 0x28
 8004c7e:	af02      	add	r7, sp, #8
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d17c      	bne.n	8004d94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_UART_Transmit+0x2c>
 8004ca0:	88fb      	ldrh	r3, [r7, #6]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e075      	b.n	8004d96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_UART_Transmit+0x3e>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e06e      	b.n	8004d96 <HAL_UART_Transmit+0x11c>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2221      	movs	r2, #33	; 0x21
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cce:	f7fd fbbd 	bl	800244c <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce8:	d108      	bne.n	8004cfc <HAL_UART_Transmit+0x82>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e003      	b.n	8004d04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d0c:	e02a      	b.n	8004d64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fb1f 	bl	800535c <UART_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e036      	b.n	8004d96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	3302      	adds	r3, #2
 8004d42:	61bb      	str	r3, [r7, #24]
 8004d44:	e007      	b.n	8004d56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	781a      	ldrb	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	3301      	adds	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1cf      	bne.n	8004d0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	2140      	movs	r1, #64	; 0x40
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 faef 	bl	800535c <UART_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e006      	b.n	8004d96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	4613      	mov	r3, r2
 8004daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d11d      	bne.n	8004df4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_UART_Receive_IT+0x26>
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e016      	b.n	8004df6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Receive_IT+0x38>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e00f      	b.n	8004df6 <HAL_UART_Receive_IT+0x58>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004de4:	88fb      	ldrh	r3, [r7, #6]
 8004de6:	461a      	mov	r2, r3
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fb24 	bl	8005438 <UART_Start_Receive_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	e000      	b.n	8004df6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b0ba      	sub	sp, #232	; 0xe8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d009      	beq.n	8004e66 <HAL_UART_IRQHandler+0x66>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fc03 	bl	800566a <UART_Receive_IT>
      return;
 8004e64:	e256      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f000 80de 	beq.w	800502c <HAL_UART_IRQHandler+0x22c>
 8004e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d106      	bne.n	8004e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e80:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 80d1 	beq.w	800502c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00b      	beq.n	8004eae <HAL_UART_IRQHandler+0xae>
 8004e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00b      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xd2>
 8004eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0202 	orr.w	r2, r3, #2
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xf6>
 8004ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f043 0204 	orr.w	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d011      	beq.n	8004f26 <HAL_UART_IRQHandler+0x126>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d105      	bne.n	8004f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0208 	orr.w	r2, r3, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 81ed 	beq.w	800530a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_UART_IRQHandler+0x14e>
 8004f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fb8e 	bl	800566a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f58:	2b40      	cmp	r3, #64	; 0x40
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d103      	bne.n	8004f7a <HAL_UART_IRQHandler+0x17a>
 8004f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04f      	beq.n	800501a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa96 	bl	80054ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8a:	2b40      	cmp	r3, #64	; 0x40
 8004f8c:	d141      	bne.n	8005012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3314      	adds	r3, #20
 8004f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1d9      	bne.n	8004f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d013      	beq.n	800500a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe6:	4a7d      	ldr	r2, [pc, #500]	; (80051dc <HAL_UART_IRQHandler+0x3dc>)
 8004fe8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd fbdd 	bl	80027ae <HAL_DMA_Abort_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d016      	beq.n	8005028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005004:	4610      	mov	r0, r2
 8005006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005008:	e00e      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f990 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	e00a      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f98c 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005018:	e006      	b.n	8005028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f988 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005026:	e170      	b.n	800530a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005028:	bf00      	nop
    return;
 800502a:	e16e      	b.n	800530a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	2b01      	cmp	r3, #1
 8005032:	f040 814a 	bne.w	80052ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503a:	f003 0310 	and.w	r3, r3, #16
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 8143 	beq.w	80052ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 813c 	beq.w	80052ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005052:	2300      	movs	r3, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	f040 80b4 	bne.w	80051e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8140 	beq.w	800530e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005096:	429a      	cmp	r2, r3
 8005098:	f080 8139 	bcs.w	800530e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	f000 8088 	beq.w	80051c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	330c      	adds	r3, #12
 80050da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ee:	e841 2300 	strex	r3, r2, [r1]
 80050f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1d9      	bne.n	80050b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	3314      	adds	r3, #20
 8005104:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800510e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3314      	adds	r3, #20
 800511e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005122:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005126:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800512a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e1      	bne.n	80050fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3314      	adds	r3, #20
 8005140:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800514a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800514c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	3314      	adds	r3, #20
 800515a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800515e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005160:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005164:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800516c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e3      	bne.n	800513a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	f023 0310 	bic.w	r3, r3, #16
 8005196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80051a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80051a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e3      	bne.n	8005180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fd fa86 	bl	80026ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8b6 	bl	8005344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051d8:	e099      	b.n	800530e <HAL_UART_IRQHandler+0x50e>
 80051da:	bf00      	nop
 80051dc:	08005573 	.word	0x08005573
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 808b 	beq.w	8005312 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80051fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 8086 	beq.w	8005312 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800521c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800522a:	647a      	str	r2, [r7, #68]	; 0x44
 800522c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005230:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e3      	bne.n	8005206 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3314      	adds	r3, #20
 8005244:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	623b      	str	r3, [r7, #32]
   return(result);
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005262:	633a      	str	r2, [r7, #48]	; 0x30
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e3      	bne.n	800523e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2220      	movs	r2, #32
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	60fb      	str	r3, [r7, #12]
   return(result);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0310 	bic.w	r3, r3, #16
 800529a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	330c      	adds	r3, #12
 80052a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80052a8:	61fa      	str	r2, [r7, #28]
 80052aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	69b9      	ldr	r1, [r7, #24]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	617b      	str	r3, [r7, #20]
   return(result);
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e3      	bne.n	8005284 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f83e 	bl	8005344 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052c8:	e023      	b.n	8005312 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_UART_IRQHandler+0x4ea>
 80052d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f959 	bl	800559a <UART_Transmit_IT>
    return;
 80052e8:	e014      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <HAL_UART_IRQHandler+0x514>
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f999 	bl	800563a <UART_EndTransmit_IT>
    return;
 8005308:	e004      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
    return;
 800530a:	bf00      	nop
 800530c:	e002      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
      return;
 800530e:	bf00      	nop
 8005310:	e000      	b.n	8005314 <HAL_UART_IRQHandler+0x514>
      return;
 8005312:	bf00      	nop
  }
}
 8005314:	37e8      	adds	r7, #232	; 0xe8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop

0800531c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b090      	sub	sp, #64	; 0x40
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536c:	e050      	b.n	8005410 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005374:	d04c      	beq.n	8005410 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <UART_WaitOnFlagUntilTimeout+0x30>
 800537c:	f7fd f866 	bl	800244c <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005388:	429a      	cmp	r2, r3
 800538a:	d241      	bcs.n	8005410 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80053ac:	637a      	str	r2, [r7, #52]	; 0x34
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3314      	adds	r3, #20
 80053c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	613b      	str	r3, [r7, #16]
   return(result);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e0:	623a      	str	r2, [r7, #32]
 80053e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	69f9      	ldr	r1, [r7, #28]
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e00f      	b.n	8005430 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4013      	ands	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	429a      	cmp	r2, r3
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	429a      	cmp	r2, r3
 800542c:	d09f      	beq.n	800536e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3740      	adds	r7, #64	; 0x40
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	4613      	mov	r3, r2
 8005444:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2222      	movs	r2, #34	; 0x22
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0220 	orr.w	r2, r2, #32
 800549c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b095      	sub	sp, #84	; 0x54
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d4:	643a      	str	r2, [r7, #64]	; 0x40
 80054d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e5      	bne.n	80054b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e5      	bne.n	80054e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005520:	2b01      	cmp	r3, #1
 8005522:	d119      	bne.n	8005558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	60bb      	str	r3, [r7, #8]
   return(result);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f023 0310 	bic.w	r3, r3, #16
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005544:	61ba      	str	r2, [r7, #24]
 8005546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	613b      	str	r3, [r7, #16]
   return(result);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e5      	bne.n	8005524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005566:	bf00      	nop
 8005568:	3754      	adds	r7, #84	; 0x54
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff fecf 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b21      	cmp	r3, #33	; 0x21
 80055ac:	d13e      	bne.n	800562c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b6:	d114      	bne.n	80055e2 <UART_Transmit_IT+0x48>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d110      	bne.n	80055e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	621a      	str	r2, [r3, #32]
 80055e0:	e008      	b.n	80055f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	1c59      	adds	r1, r3, #1
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6211      	str	r1, [r2, #32]
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4619      	mov	r1, r3
 8005602:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10f      	bne.n	8005628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	e000      	b.n	800562e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fe5e 	bl	800531c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08c      	sub	sp, #48	; 0x30
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b22      	cmp	r3, #34	; 0x22
 800567c:	f040 80ab 	bne.w	80057d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005688:	d117      	bne.n	80056ba <UART_Receive_IT+0x50>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d113      	bne.n	80056ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	1c9a      	adds	r2, r3, #2
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	629a      	str	r2, [r3, #40]	; 0x28
 80056b8:	e026      	b.n	8005708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056cc:	d007      	beq.n	80056de <UART_Receive_IT+0x74>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <UART_Receive_IT+0x82>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e008      	b.n	80056fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4619      	mov	r1, r3
 8005716:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005718:	2b00      	cmp	r3, #0
 800571a:	d15a      	bne.n	80057d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0220 	bic.w	r2, r2, #32
 800572a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	2b01      	cmp	r3, #1
 800575a:	d135      	bne.n	80057c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	613b      	str	r3, [r7, #16]
   return(result);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f023 0310 	bic.w	r3, r3, #16
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005782:	623a      	str	r2, [r7, #32]
 8005784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	69f9      	ldr	r1, [r7, #28]
 8005788:	6a3a      	ldr	r2, [r7, #32]
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e5      	bne.n	8005762 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d10a      	bne.n	80057ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fdbf 	bl	8005344 <HAL_UARTEx_RxEventCallback>
 80057c6:	e002      	b.n	80057ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7fc fd17 	bl	80021fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e002      	b.n	80057d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
  }
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3730      	adds	r7, #48	; 0x30
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	b09f      	sub	sp, #124	; 0x7c
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f6:	68d9      	ldr	r1, [r3, #12]
 80057f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	ea40 0301 	orr.w	r3, r0, r1
 8005800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	431a      	orrs	r2, r3
 800580c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	431a      	orrs	r2, r3
 8005812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	4313      	orrs	r3, r2
 8005818:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800581a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005824:	f021 010c 	bic.w	r1, r1, #12
 8005828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800582e:	430b      	orrs	r3, r1
 8005830:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800583c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583e:	6999      	ldr	r1, [r3, #24]
 8005840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	ea40 0301 	orr.w	r3, r0, r1
 8005848:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800584a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4bc5      	ldr	r3, [pc, #788]	; (8005b64 <UART_SetConfig+0x384>)
 8005850:	429a      	cmp	r2, r3
 8005852:	d004      	beq.n	800585e <UART_SetConfig+0x7e>
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4bc3      	ldr	r3, [pc, #780]	; (8005b68 <UART_SetConfig+0x388>)
 800585a:	429a      	cmp	r2, r3
 800585c:	d103      	bne.n	8005866 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800585e:	f7fd ff3d 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8005862:	6778      	str	r0, [r7, #116]	; 0x74
 8005864:	e002      	b.n	800586c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005866:	f7fd ff25 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 800586a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	f040 80b6 	bne.w	80059e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800587a:	461c      	mov	r4, r3
 800587c:	f04f 0500 	mov.w	r5, #0
 8005880:	4622      	mov	r2, r4
 8005882:	462b      	mov	r3, r5
 8005884:	1891      	adds	r1, r2, r2
 8005886:	6439      	str	r1, [r7, #64]	; 0x40
 8005888:	415b      	adcs	r3, r3
 800588a:	647b      	str	r3, [r7, #68]	; 0x44
 800588c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005890:	1912      	adds	r2, r2, r4
 8005892:	eb45 0303 	adc.w	r3, r5, r3
 8005896:	f04f 0000 	mov.w	r0, #0
 800589a:	f04f 0100 	mov.w	r1, #0
 800589e:	00d9      	lsls	r1, r3, #3
 80058a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058a4:	00d0      	lsls	r0, r2, #3
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	1911      	adds	r1, r2, r4
 80058ac:	6639      	str	r1, [r7, #96]	; 0x60
 80058ae:	416b      	adcs	r3, r5
 80058b0:	667b      	str	r3, [r7, #100]	; 0x64
 80058b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	1891      	adds	r1, r2, r2
 80058be:	63b9      	str	r1, [r7, #56]	; 0x38
 80058c0:	415b      	adcs	r3, r3
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058cc:	f7fa fc7c 	bl	80001c8 <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4ba5      	ldr	r3, [pc, #660]	; (8005b6c <UART_SetConfig+0x38c>)
 80058d6:	fba3 2302 	umull	r2, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	011e      	lsls	r6, r3, #4
 80058de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e0:	461c      	mov	r4, r3
 80058e2:	f04f 0500 	mov.w	r5, #0
 80058e6:	4622      	mov	r2, r4
 80058e8:	462b      	mov	r3, r5
 80058ea:	1891      	adds	r1, r2, r2
 80058ec:	6339      	str	r1, [r7, #48]	; 0x30
 80058ee:	415b      	adcs	r3, r3
 80058f0:	637b      	str	r3, [r7, #52]	; 0x34
 80058f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058f6:	1912      	adds	r2, r2, r4
 80058f8:	eb45 0303 	adc.w	r3, r5, r3
 80058fc:	f04f 0000 	mov.w	r0, #0
 8005900:	f04f 0100 	mov.w	r1, #0
 8005904:	00d9      	lsls	r1, r3, #3
 8005906:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800590a:	00d0      	lsls	r0, r2, #3
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	1911      	adds	r1, r2, r4
 8005912:	65b9      	str	r1, [r7, #88]	; 0x58
 8005914:	416b      	adcs	r3, r5
 8005916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	461a      	mov	r2, r3
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	1891      	adds	r1, r2, r2
 8005924:	62b9      	str	r1, [r7, #40]	; 0x28
 8005926:	415b      	adcs	r3, r3
 8005928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800592e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005932:	f7fa fc49 	bl	80001c8 <__aeabi_uldivmod>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4b8c      	ldr	r3, [pc, #560]	; (8005b6c <UART_SetConfig+0x38c>)
 800593c:	fba3 1302 	umull	r1, r3, r3, r2
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	2164      	movs	r1, #100	; 0x64
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	3332      	adds	r3, #50	; 0x32
 800594e:	4a87      	ldr	r2, [pc, #540]	; (8005b6c <UART_SetConfig+0x38c>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800595c:	441e      	add	r6, r3
 800595e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005960:	4618      	mov	r0, r3
 8005962:	f04f 0100 	mov.w	r1, #0
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	1894      	adds	r4, r2, r2
 800596c:	623c      	str	r4, [r7, #32]
 800596e:	415b      	adcs	r3, r3
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
 8005972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005976:	1812      	adds	r2, r2, r0
 8005978:	eb41 0303 	adc.w	r3, r1, r3
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	f04f 0500 	mov.w	r5, #0
 8005984:	00dd      	lsls	r5, r3, #3
 8005986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800598a:	00d4      	lsls	r4, r2, #3
 800598c:	4622      	mov	r2, r4
 800598e:	462b      	mov	r3, r5
 8005990:	1814      	adds	r4, r2, r0
 8005992:	653c      	str	r4, [r7, #80]	; 0x50
 8005994:	414b      	adcs	r3, r1
 8005996:	657b      	str	r3, [r7, #84]	; 0x54
 8005998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	461a      	mov	r2, r3
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	61b9      	str	r1, [r7, #24]
 80059a6:	415b      	adcs	r3, r3
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059b2:	f7fa fc09 	bl	80001c8 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4b6c      	ldr	r3, [pc, #432]	; (8005b6c <UART_SetConfig+0x38c>)
 80059bc:	fba3 1302 	umull	r1, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	2164      	movs	r1, #100	; 0x64
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	3332      	adds	r3, #50	; 0x32
 80059ce:	4a67      	ldr	r2, [pc, #412]	; (8005b6c <UART_SetConfig+0x38c>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	f003 0207 	and.w	r2, r3, #7
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4432      	add	r2, r6
 80059e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059e2:	e0b9      	b.n	8005b58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059e6:	461c      	mov	r4, r3
 80059e8:	f04f 0500 	mov.w	r5, #0
 80059ec:	4622      	mov	r2, r4
 80059ee:	462b      	mov	r3, r5
 80059f0:	1891      	adds	r1, r2, r2
 80059f2:	6139      	str	r1, [r7, #16]
 80059f4:	415b      	adcs	r3, r3
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80059fc:	1912      	adds	r2, r2, r4
 80059fe:	eb45 0303 	adc.w	r3, r5, r3
 8005a02:	f04f 0000 	mov.w	r0, #0
 8005a06:	f04f 0100 	mov.w	r1, #0
 8005a0a:	00d9      	lsls	r1, r3, #3
 8005a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a10:	00d0      	lsls	r0, r2, #3
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	eb12 0804 	adds.w	r8, r2, r4
 8005a1a:	eb43 0905 	adc.w	r9, r3, r5
 8005a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f04f 0100 	mov.w	r1, #0
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	008b      	lsls	r3, r1, #2
 8005a32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a36:	0082      	lsls	r2, r0, #2
 8005a38:	4640      	mov	r0, r8
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	f7fa fbc4 	bl	80001c8 <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4b49      	ldr	r3, [pc, #292]	; (8005b6c <UART_SetConfig+0x38c>)
 8005a46:	fba3 2302 	umull	r2, r3, r3, r2
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	011e      	lsls	r6, r3, #4
 8005a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a50:	4618      	mov	r0, r3
 8005a52:	f04f 0100 	mov.w	r1, #0
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	1894      	adds	r4, r2, r2
 8005a5c:	60bc      	str	r4, [r7, #8]
 8005a5e:	415b      	adcs	r3, r3
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a66:	1812      	adds	r2, r2, r0
 8005a68:	eb41 0303 	adc.w	r3, r1, r3
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	f04f 0500 	mov.w	r5, #0
 8005a74:	00dd      	lsls	r5, r3, #3
 8005a76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a7a:	00d4      	lsls	r4, r2, #3
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	462b      	mov	r3, r5
 8005a80:	1814      	adds	r4, r2, r0
 8005a82:	64bc      	str	r4, [r7, #72]	; 0x48
 8005a84:	414b      	adcs	r3, r1
 8005a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f04f 0100 	mov.w	r1, #0
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	008b      	lsls	r3, r1, #2
 8005a9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005aa0:	0082      	lsls	r2, r0, #2
 8005aa2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005aa6:	f7fa fb8f 	bl	80001c8 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4b2f      	ldr	r3, [pc, #188]	; (8005b6c <UART_SetConfig+0x38c>)
 8005ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab4:	095b      	lsrs	r3, r3, #5
 8005ab6:	2164      	movs	r1, #100	; 0x64
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	3332      	adds	r3, #50	; 0x32
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	; (8005b6c <UART_SetConfig+0x38c>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ace:	441e      	add	r6, r3
 8005ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f04f 0100 	mov.w	r1, #0
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	1894      	adds	r4, r2, r2
 8005ade:	603c      	str	r4, [r7, #0]
 8005ae0:	415b      	adcs	r3, r3
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ae8:	1812      	adds	r2, r2, r0
 8005aea:	eb41 0303 	adc.w	r3, r1, r3
 8005aee:	f04f 0400 	mov.w	r4, #0
 8005af2:	f04f 0500 	mov.w	r5, #0
 8005af6:	00dd      	lsls	r5, r3, #3
 8005af8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005afc:	00d4      	lsls	r4, r2, #3
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	eb12 0a00 	adds.w	sl, r2, r0
 8005b06:	eb43 0b01 	adc.w	fp, r3, r1
 8005b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f04f 0100 	mov.w	r1, #0
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	008b      	lsls	r3, r1, #2
 8005b1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b22:	0082      	lsls	r2, r0, #2
 8005b24:	4650      	mov	r0, sl
 8005b26:	4659      	mov	r1, fp
 8005b28:	f7fa fb4e 	bl	80001c8 <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <UART_SetConfig+0x38c>)
 8005b32:	fba3 1302 	umull	r1, r3, r3, r2
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	2164      	movs	r1, #100	; 0x64
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	3332      	adds	r3, #50	; 0x32
 8005b44:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <UART_SetConfig+0x38c>)
 8005b46:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4a:	095b      	lsrs	r3, r3, #5
 8005b4c:	f003 020f 	and.w	r2, r3, #15
 8005b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4432      	add	r2, r6
 8005b56:	609a      	str	r2, [r3, #8]
}
 8005b58:	bf00      	nop
 8005b5a:	377c      	adds	r7, #124	; 0x7c
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	bf00      	nop
 8005b64:	40011000 	.word	0x40011000
 8005b68:	40011400 	.word	0x40011400
 8005b6c:	51eb851f 	.word	0x51eb851f

08005b70 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b88:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <FSMC_NORSRAM_Init+0xa0>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005b9a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005ba0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005ba6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005bac:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005bb2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005bb8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005bbe:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005bc4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005bca:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005bd0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005bd6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005bdc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d103      	bne.n	8005bf4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	fff00080 	.word	0xfff00080

08005c14 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005c36:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c42:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005c4a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005c52:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005c5c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	3b02      	subs	r3, #2
 8005c64:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005c66:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6979      	ldr	r1, [r7, #20]
 8005c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ca8:	d122      	bne.n	8005cf0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005cb8:	4013      	ands	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005cc6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005cce:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005cd6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005cdc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6979      	ldr	r1, [r7, #20]
 8005cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cee:	e005      	b.n	8005cfc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	cff00000 	.word	0xcff00000

08005d10 <__libc_init_array>:
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	4d0d      	ldr	r5, [pc, #52]	; (8005d48 <__libc_init_array+0x38>)
 8005d14:	4c0d      	ldr	r4, [pc, #52]	; (8005d4c <__libc_init_array+0x3c>)
 8005d16:	1b64      	subs	r4, r4, r5
 8005d18:	10a4      	asrs	r4, r4, #2
 8005d1a:	2600      	movs	r6, #0
 8005d1c:	42a6      	cmp	r6, r4
 8005d1e:	d109      	bne.n	8005d34 <__libc_init_array+0x24>
 8005d20:	4d0b      	ldr	r5, [pc, #44]	; (8005d50 <__libc_init_array+0x40>)
 8005d22:	4c0c      	ldr	r4, [pc, #48]	; (8005d54 <__libc_init_array+0x44>)
 8005d24:	f000 f820 	bl	8005d68 <_init>
 8005d28:	1b64      	subs	r4, r4, r5
 8005d2a:	10a4      	asrs	r4, r4, #2
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	42a6      	cmp	r6, r4
 8005d30:	d105      	bne.n	8005d3e <__libc_init_array+0x2e>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d38:	4798      	blx	r3
 8005d3a:	3601      	adds	r6, #1
 8005d3c:	e7ee      	b.n	8005d1c <__libc_init_array+0xc>
 8005d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d42:	4798      	blx	r3
 8005d44:	3601      	adds	r6, #1
 8005d46:	e7f2      	b.n	8005d2e <__libc_init_array+0x1e>
 8005d48:	0800b5e8 	.word	0x0800b5e8
 8005d4c:	0800b5e8 	.word	0x0800b5e8
 8005d50:	0800b5e8 	.word	0x0800b5e8
 8005d54:	0800b5ec 	.word	0x0800b5ec

08005d58 <memset>:
 8005d58:	4402      	add	r2, r0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d100      	bne.n	8005d62 <memset+0xa>
 8005d60:	4770      	bx	lr
 8005d62:	f803 1b01 	strb.w	r1, [r3], #1
 8005d66:	e7f9      	b.n	8005d5c <memset+0x4>

08005d68 <_init>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr

08005d74 <_fini>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr
