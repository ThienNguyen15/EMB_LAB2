
EMB_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a014  0800a014  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  0800a014  0800a014  0001a014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a01c  0800a01c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a01c  0800a01c  0001a01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800a024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          00000268  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f553  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f39  00000000  00000000  0003f5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  000434f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c0  00000000  00000000  00044a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253b9  00000000  00000000  00045e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d31d  00000000  00000000  0006b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a76  00000000  00000000  000884ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015bf64  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057bc  00000000  00000000  0015bfb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800701c 	.word	0x0800701c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	0800701c 	.word	0x0800701c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fe05 	bl	80030e8 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 fdf8 	bl	80030e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fdf3 	bl	80030e8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f004 fc1a 	bl	8004d42 <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000050 	.word	0x20000050
 80005b8:	200001b4 	.word	0x200001b4
 80005bc:	200000a4 	.word	0x200000a4

080005c0 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af04      	add	r7, sp, #16
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f964 	bl	80028a0 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	230a      	movs	r3, #10
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f107 030f 	add.w	r3, r7, #15
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	21d0      	movs	r1, #208	; 0xd0
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <ds3231_Write+0x40>)
 80005f4:	f002 fef0 	bl	80033d8 <HAL_I2C_Mem_Write>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000124 	.word	0x20000124

08000604 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800060a:	230a      	movs	r3, #10
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2307      	movs	r3, #7
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	2200      	movs	r2, #0
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <ds3231_ReadTime+0xa8>)
 800061e:	f002 ffd5 	bl	80035cc <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f920 	bl	800286c <BCD2DEC>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <ds3231_ReadTime+0xac>)
 8000632:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	4618      	mov	r0, r3
 800063a:	f002 f917 	bl	800286c <BCD2DEC>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <ds3231_ReadTime+0xb0>)
 8000644:	701a      	strb	r2, [r3, #0]
	ds3231_hour = BCD2DEC(ds3231_buffer[2]);
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f90e 	bl	800286c <BCD2DEC>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <ds3231_ReadTime+0xb4>)
 8000656:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800065a:	78db      	ldrb	r3, [r3, #3]
 800065c:	4618      	mov	r0, r3
 800065e:	f002 f905 	bl	800286c <BCD2DEC>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <ds3231_ReadTime+0xb8>)
 8000668:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f8fc 	bl	800286c <BCD2DEC>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <ds3231_ReadTime+0xbc>)
 800067a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f8f3 	bl	800286c <BCD2DEC>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <ds3231_ReadTime+0xc0>)
 800068c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f8ea 	bl	800286c <BCD2DEC>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <ds3231_ReadTime+0xc4>)
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000cc 	.word	0x200000cc
 80006ac:	20000124 	.word	0x20000124
 80006b0:	200000c4 	.word	0x200000c4
 80006b4:	200000c7 	.word	0x200000c7
 80006b8:	200000c6 	.word	0x200000c6
 80006bc:	200000c9 	.word	0x200000c9
 80006c0:	200000c8 	.word	0x200000c8
 80006c4:	200000ca 	.word	0x200000ca
 80006c8:	200000c5 	.word	0x200000c5

080006cc <initializeTime>:
 */

#include "global.h"

void initializeTime()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80006d0:	2118      	movs	r1, #24
 80006d2:	2006      	movs	r0, #6
 80006d4:	f7ff ff74 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80006d8:	210b      	movs	r1, #11
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff70 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 80006e0:	210f      	movs	r1, #15
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff ff6c 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80006e8:	2106      	movs	r1, #6
 80006ea:	2003      	movs	r0, #3
 80006ec:	f7ff ff68 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 15);
 80006f0:	210f      	movs	r1, #15
 80006f2:	2002      	movs	r0, #2
 80006f4:	f7ff ff64 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 15);
 80006f8:	210f      	movs	r1, #15
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ff60 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 15);
 8000700:	210f      	movs	r1, #15
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ff5c 	bl	80005c0 <ds3231_Write>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <updateTime>:

void updateTime(int new_year, int new_month, int new_date, int new_day, int new_hour, int new_min, int new_sec)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	603b      	str	r3, [r7, #0]
	ds3231_Write(ADDRESS_YEAR, new_year);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	2006      	movs	r0, #6
 8000722:	f7ff ff4d 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, new_month);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	2005      	movs	r0, #5
 800072e:	f7ff ff47 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, new_date);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	2004      	movs	r0, #4
 800073a:	f7ff ff41 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, new_day);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff ff3b 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, new_hour);
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff ff35 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, new_min);
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4619      	mov	r1, r3
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ff2f 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, new_sec);
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ff29 	bl	80005c0 <ds3231_Write>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <updateAlarmTime>:

void updateAlarmTime(int new_year, int new_month, int new_date, int new_day, int new_hour, int new_min, int new_sec)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
    year_alarm = new_year;
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <updateAlarmTime+0x44>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6013      	str	r3, [r2, #0]
    month_alarm = new_month;
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <updateAlarmTime+0x48>)
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	6013      	str	r3, [r2, #0]
    date_alarm = new_date;
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <updateAlarmTime+0x4c>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6013      	str	r3, [r2, #0]
    day_alarm = new_day;
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <updateAlarmTime+0x50>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	6013      	str	r3, [r2, #0]
    hour_alarm = new_hour;
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <updateAlarmTime+0x54>)
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	6013      	str	r3, [r2, #0]
    min_alarm = new_min;
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <updateAlarmTime+0x58>)
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	6013      	str	r3, [r2, #0]
    sec_alarm = new_sec;
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <updateAlarmTime+0x5c>)
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000008 	.word	0x20000008
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	20000014 	.word	0x20000014
 80007d4:	20000018 	.word	0x20000018

080007d8 <displayTime>:
void displayTime()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	; 0x38
 80007dc:	af04      	add	r7, sp, #16
    int blinkColor1, blinkColor2;
    if(timer1 % 10 == 0)
 80007de:	4b86      	ldr	r3, [pc, #536]	; (80009f8 <displayTime+0x220>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	4b86      	ldr	r3, [pc, #536]	; (80009fc <displayTime+0x224>)
 80007e4:	fb83 2301 	smull	r2, r3, r3, r1
 80007e8:	109a      	asrs	r2, r3, #2
 80007ea:	17cb      	asrs	r3, r1, #31
 80007ec:	1ad2      	subs	r2, r2, r3
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	1aca      	subs	r2, r1, r3
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 818e 	bne.w	8000b1a <displayTime+0x342>
    {
    	if ((mode == SettingMode || mode == AlarmSettingMode))
 80007fe:	4b80      	ldr	r3, [pc, #512]	; (8000a00 <displayTime+0x228>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d004      	beq.n	8000810 <displayTime+0x38>
 8000806:	4b7e      	ldr	r3, [pc, #504]	; (8000a00 <displayTime+0x228>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b03      	cmp	r3, #3
 800080c:	f040 811c 	bne.w	8000a48 <displayTime+0x270>
    	{
    		blinkstate ^= 1;
 8000810:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <displayTime+0x22c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	4a7a      	ldr	r2, [pc, #488]	; (8000a04 <displayTime+0x22c>)
 800081a:	6013      	str	r3, [r2, #0]
    		blinkColor1 = (blinkstate == 1) ? GREEN : BLACK;
 800081c:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <displayTime+0x22c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d102      	bne.n	800082a <displayTime+0x52>
 8000824:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000828:	e000      	b.n	800082c <displayTime+0x54>
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
    		blinkColor2 = (blinkstate == 1) ? YELLOW : BLACK;
 800082e:	4b75      	ldr	r3, [pc, #468]	; (8000a04 <displayTime+0x22c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d102      	bne.n	800083c <displayTime+0x64>
 8000836:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800083a:	e000      	b.n	800083e <displayTime+0x66>
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]

    		int hour_value = (state == 0) ? hour_temp : hour_alarm;
 8000840:	4b71      	ldr	r3, [pc, #452]	; (8000a08 <displayTime+0x230>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <displayTime+0x76>
 8000848:	4b70      	ldr	r3, [pc, #448]	; (8000a0c <displayTime+0x234>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	e001      	b.n	8000852 <displayTime+0x7a>
 800084e:	4b70      	ldr	r3, [pc, #448]	; (8000a10 <displayTime+0x238>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	61fb      	str	r3, [r7, #28]
    		int min_value = (state == 0) ? min_temp : min_alarm;
 8000854:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <displayTime+0x230>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d102      	bne.n	8000862 <displayTime+0x8a>
 800085c:	4b6d      	ldr	r3, [pc, #436]	; (8000a14 <displayTime+0x23c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	e001      	b.n	8000866 <displayTime+0x8e>
 8000862:	4b6d      	ldr	r3, [pc, #436]	; (8000a18 <displayTime+0x240>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	61bb      	str	r3, [r7, #24]
    		int sec_value = (state == 0) ? sec_temp : sec_alarm;
 8000868:	4b67      	ldr	r3, [pc, #412]	; (8000a08 <displayTime+0x230>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <displayTime+0x9e>
 8000870:	4b6a      	ldr	r3, [pc, #424]	; (8000a1c <displayTime+0x244>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	e001      	b.n	800087a <displayTime+0xa2>
 8000876:	4b6a      	ldr	r3, [pc, #424]	; (8000a20 <displayTime+0x248>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	617b      	str	r3, [r7, #20]

    		int day_value = (state == 0) ? day_temp : day_alarm;
 800087c:	4b62      	ldr	r3, [pc, #392]	; (8000a08 <displayTime+0x230>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d102      	bne.n	800088a <displayTime+0xb2>
 8000884:	4b67      	ldr	r3, [pc, #412]	; (8000a24 <displayTime+0x24c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	e001      	b.n	800088e <displayTime+0xb6>
 800088a:	4b67      	ldr	r3, [pc, #412]	; (8000a28 <displayTime+0x250>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	613b      	str	r3, [r7, #16]
    		int date_value = (state == 0) ? date_temp : date_alarm;
 8000890:	4b5d      	ldr	r3, [pc, #372]	; (8000a08 <displayTime+0x230>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d102      	bne.n	800089e <displayTime+0xc6>
 8000898:	4b64      	ldr	r3, [pc, #400]	; (8000a2c <displayTime+0x254>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	e001      	b.n	80008a2 <displayTime+0xca>
 800089e:	4b64      	ldr	r3, [pc, #400]	; (8000a30 <displayTime+0x258>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	60fb      	str	r3, [r7, #12]
    		int month_value = (state == 0) ? month_temp : month_alarm;
 80008a4:	4b58      	ldr	r3, [pc, #352]	; (8000a08 <displayTime+0x230>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d102      	bne.n	80008b2 <displayTime+0xda>
 80008ac:	4b61      	ldr	r3, [pc, #388]	; (8000a34 <displayTime+0x25c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	e001      	b.n	80008b6 <displayTime+0xde>
 80008b2:	4b61      	ldr	r3, [pc, #388]	; (8000a38 <displayTime+0x260>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	60bb      	str	r3, [r7, #8]
    		int year_value = (state == 0) ? year_temp : year_alarm;
 80008b8:	4b53      	ldr	r3, [pc, #332]	; (8000a08 <displayTime+0x230>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d102      	bne.n	80008c6 <displayTime+0xee>
 80008c0:	4b5e      	ldr	r3, [pc, #376]	; (8000a3c <displayTime+0x264>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	e001      	b.n	80008ca <displayTime+0xf2>
 80008c6:	4b5e      	ldr	r3, [pc, #376]	; (8000a40 <displayTime+0x268>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	607b      	str	r3, [r7, #4]

    		lcd_ShowIntNum(70, 130, hour_value, 2, (current_parameter == 2) ? blinkColor1 : GREEN, BLACK, 24);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	4b5c      	ldr	r3, [pc, #368]	; (8000a44 <displayTime+0x26c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d102      	bne.n	80008de <displayTime+0x106>
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	b29b      	uxth	r3, r3
 80008dc:	e001      	b.n	80008e2 <displayTime+0x10a>
 80008de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008e2:	2118      	movs	r1, #24
 80008e4:	9102      	str	r1, [sp, #8]
 80008e6:	2100      	movs	r1, #0
 80008e8:	9101      	str	r1, [sp, #4]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	2302      	movs	r3, #2
 80008ee:	2182      	movs	r1, #130	; 0x82
 80008f0:	2046      	movs	r0, #70	; 0x46
 80008f2:	f001 f925 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 130, min_value, 2, (current_parameter == 1) ? blinkColor1 : GREEN, BLACK, 24);
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	4b52      	ldr	r3, [pc, #328]	; (8000a44 <displayTime+0x26c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d102      	bne.n	8000908 <displayTime+0x130>
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	b29b      	uxth	r3, r3
 8000906:	e001      	b.n	800090c <displayTime+0x134>
 8000908:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800090c:	2118      	movs	r1, #24
 800090e:	9102      	str	r1, [sp, #8]
 8000910:	2100      	movs	r1, #0
 8000912:	9101      	str	r1, [sp, #4]
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	2182      	movs	r1, #130	; 0x82
 800091a:	206e      	movs	r0, #110	; 0x6e
 800091c:	f001 f910 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 130, sec_value, 2, (current_parameter == 0) ? blinkColor1 : GREEN, BLACK, 24);
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	b29a      	uxth	r2, r3
 8000924:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <displayTime+0x26c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <displayTime+0x15a>
 800092c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092e:	b29b      	uxth	r3, r3
 8000930:	e001      	b.n	8000936 <displayTime+0x15e>
 8000932:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000936:	2118      	movs	r1, #24
 8000938:	9102      	str	r1, [sp, #8]
 800093a:	2100      	movs	r1, #0
 800093c:	9101      	str	r1, [sp, #4]
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2302      	movs	r3, #2
 8000942:	2182      	movs	r1, #130	; 0x82
 8000944:	2096      	movs	r0, #150	; 0x96
 8000946:	f001 f8fb 	bl	8001b40 <lcd_ShowIntNum>

    		lcd_ShowIntNum(20, 100, day_value, 2, (current_parameter == 3) ? blinkColor2 : YELLOW, BLACK, 24);
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <displayTime+0x26c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d102      	bne.n	800095c <displayTime+0x184>
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	b29b      	uxth	r3, r3
 800095a:	e001      	b.n	8000960 <displayTime+0x188>
 800095c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000960:	2118      	movs	r1, #24
 8000962:	9102      	str	r1, [sp, #8]
 8000964:	2100      	movs	r1, #0
 8000966:	9101      	str	r1, [sp, #4]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	2164      	movs	r1, #100	; 0x64
 800096e:	2014      	movs	r0, #20
 8000970:	f001 f8e6 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, date_value, 2, (current_parameter == 4) ? blinkColor2 : YELLOW, BLACK, 24);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <displayTime+0x26c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b04      	cmp	r3, #4
 800097e:	d102      	bne.n	8000986 <displayTime+0x1ae>
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	b29b      	uxth	r3, r3
 8000984:	e001      	b.n	800098a <displayTime+0x1b2>
 8000986:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800098a:	2118      	movs	r1, #24
 800098c:	9102      	str	r1, [sp, #8]
 800098e:	2100      	movs	r1, #0
 8000990:	9101      	str	r1, [sp, #4]
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	2302      	movs	r3, #2
 8000996:	2164      	movs	r1, #100	; 0x64
 8000998:	2046      	movs	r0, #70	; 0x46
 800099a:	f001 f8d1 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 100, month_value, 2, (current_parameter == 5) ? blinkColor2 : YELLOW, BLACK, 24);
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <displayTime+0x26c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b05      	cmp	r3, #5
 80009a8:	d102      	bne.n	80009b0 <displayTime+0x1d8>
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	e001      	b.n	80009b4 <displayTime+0x1dc>
 80009b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009b4:	2118      	movs	r1, #24
 80009b6:	9102      	str	r1, [sp, #8]
 80009b8:	2100      	movs	r1, #0
 80009ba:	9101      	str	r1, [sp, #4]
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	2302      	movs	r3, #2
 80009c0:	2164      	movs	r1, #100	; 0x64
 80009c2:	206e      	movs	r0, #110	; 0x6e
 80009c4:	f001 f8bc 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 100, year_value, 2, (current_parameter == 6) ? blinkColor2 : YELLOW, BLACK, 24);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <displayTime+0x26c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b06      	cmp	r3, #6
 80009d2:	d102      	bne.n	80009da <displayTime+0x202>
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	e001      	b.n	80009de <displayTime+0x206>
 80009da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009de:	2118      	movs	r1, #24
 80009e0:	9102      	str	r1, [sp, #8]
 80009e2:	2100      	movs	r1, #0
 80009e4:	9101      	str	r1, [sp, #4]
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2302      	movs	r3, #2
 80009ea:	2164      	movs	r1, #100	; 0x64
 80009ec:	2096      	movs	r0, #150	; 0x96
 80009ee:	f001 f8a7 	bl	8001b40 <lcd_ShowIntNum>
    	{
 80009f2:	bf00      	nop
    		lcd_ShowIntNum(70, 100, ds3231_date, 2, YELLOW, BLACK, 24);
    		lcd_ShowIntNum(110, 100, ds3231_month, 2, YELLOW, BLACK, 24);
    		lcd_ShowIntNum(150, 100, ds3231_year, 2, YELLOW, BLACK, 24);
    	}
    }
}
 80009f4:	e091      	b.n	8000b1a <displayTime+0x342>
 80009f6:	bf00      	nop
 80009f8:	2000005c 	.word	0x2000005c
 80009fc:	66666667 	.word	0x66666667
 8000a00:	20000058 	.word	0x20000058
 8000a04:	2000008c 	.word	0x2000008c
 8000a08:	20000084 	.word	0x20000084
 8000a0c:	20000078 	.word	0x20000078
 8000a10:	20000010 	.word	0x20000010
 8000a14:	2000007c 	.word	0x2000007c
 8000a18:	20000014 	.word	0x20000014
 8000a1c:	20000080 	.word	0x20000080
 8000a20:	20000018 	.word	0x20000018
 8000a24:	20000074 	.word	0x20000074
 8000a28:	2000000c 	.word	0x2000000c
 8000a2c:	20000070 	.word	0x20000070
 8000a30:	20000008 	.word	0x20000008
 8000a34:	2000006c 	.word	0x2000006c
 8000a38:	20000004 	.word	0x20000004
 8000a3c:	20000068 	.word	0x20000068
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000088 	.word	0x20000088
    		lcd_ShowIntNum(70, 130, ds3231_hour, 2, GREEN, BLACK, 24);
 8000a48:	4b36      	ldr	r3, [pc, #216]	; (8000b24 <displayTime+0x34c>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	2318      	movs	r3, #24
 8000a50:	9302      	str	r3, [sp, #8]
 8000a52:	2300      	movs	r3, #0
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	2182      	movs	r1, #130	; 0x82
 8000a60:	2046      	movs	r0, #70	; 0x46
 8000a62:	f001 f86d 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 130, ds3231_min, 2, GREEN, BLACK, 24);
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <displayTime+0x350>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	2318      	movs	r3, #24
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	2300      	movs	r3, #0
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	2182      	movs	r1, #130	; 0x82
 8000a7e:	206e      	movs	r0, #110	; 0x6e
 8000a80:	f001 f85e 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 130, ds3231_sec, 2, GREEN, BLACK, 24);
 8000a84:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <displayTime+0x354>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	2318      	movs	r3, #24
 8000a8c:	9302      	str	r3, [sp, #8]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	9301      	str	r3, [sp, #4]
 8000a92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	2182      	movs	r1, #130	; 0x82
 8000a9c:	2096      	movs	r0, #150	; 0x96
 8000a9e:	f001 f84f 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(20, 100, ds3231_day, 2, YELLOW, BLACK, 24);
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <displayTime+0x358>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	2318      	movs	r3, #24
 8000aaa:	9302      	str	r3, [sp, #8]
 8000aac:	2300      	movs	r3, #0
 8000aae:	9301      	str	r3, [sp, #4]
 8000ab0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	2164      	movs	r1, #100	; 0x64
 8000aba:	2014      	movs	r0, #20
 8000abc:	f001 f840 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, ds3231_date, 2, YELLOW, BLACK, 24);
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <displayTime+0x35c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	2318      	movs	r3, #24
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	2300      	movs	r3, #0
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	2164      	movs	r1, #100	; 0x64
 8000ad8:	2046      	movs	r0, #70	; 0x46
 8000ada:	f001 f831 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 100, ds3231_month, 2, YELLOW, BLACK, 24);
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <displayTime+0x360>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	2318      	movs	r3, #24
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2302      	movs	r3, #2
 8000af4:	2164      	movs	r1, #100	; 0x64
 8000af6:	206e      	movs	r0, #110	; 0x6e
 8000af8:	f001 f822 	bl	8001b40 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 100, ds3231_year, 2, YELLOW, BLACK, 24);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <displayTime+0x364>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	2318      	movs	r3, #24
 8000b04:	9302      	str	r3, [sp, #8]
 8000b06:	2300      	movs	r3, #0
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2302      	movs	r3, #2
 8000b12:	2164      	movs	r1, #100	; 0x64
 8000b14:	2096      	movs	r0, #150	; 0x96
 8000b16:	f001 f813 	bl	8001b40 <lcd_ShowIntNum>
}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000c6 	.word	0x200000c6
 8000b28:	200000c7 	.word	0x200000c7
 8000b2c:	200000c4 	.word	0x200000c4
 8000b30:	200000c9 	.word	0x200000c9
 8000b34:	200000c8 	.word	0x200000c8
 8000b38:	200000ca 	.word	0x200000ca
 8000b3c:	200000c5 	.word	0x200000c5

08000b40 <displayStatus>:

void displayStatus()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af04      	add	r7, sp, #16
    lcd_Fill(0, 0, 240, 20, BLUE);
 8000b46:	231f      	movs	r3, #31
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	2314      	movs	r3, #20
 8000b4c:	22f0      	movs	r2, #240	; 0xf0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f000 febb 	bl	80018cc <lcd_Fill>

    switch (mode)
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <displayStatus+0x88>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d022      	beq.n	8000ba4 <displayStatus+0x64>
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	dc2e      	bgt.n	8000bc0 <displayStatus+0x80>
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d002      	beq.n	8000b6c <displayStatus+0x2c>
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d00e      	beq.n	8000b88 <displayStatus+0x48>
            break;
        case AlarmSettingMode:
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Alarm Setting", RED, BLUE, 16, 1);
            break;
        default:
            break;
 8000b6a:	e029      	b.n	8000bc0 <displayStatus+0x80>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Normal", RED, BLUE, 16, 1);
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2310      	movs	r3, #16
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	231f      	movs	r3, #31
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <displayStatus+0x8c>)
 8000b7e:	2102      	movs	r1, #2
 8000b80:	2000      	movs	r0, #0
 8000b82:	f001 fa43 	bl	800200c <lcd_StrCenter>
            break;
 8000b86:	e01c      	b.n	8000bc2 <displayStatus+0x82>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Time Setting", RED, BLUE, 16, 1);
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9302      	str	r3, [sp, #8]
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	231f      	movs	r3, #31
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <displayStatus+0x90>)
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f001 fa35 	bl	800200c <lcd_StrCenter>
            break;
 8000ba2:	e00e      	b.n	8000bc2 <displayStatus+0x82>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Alarm Setting", RED, BLUE, 16, 1);
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	2310      	movs	r3, #16
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	231f      	movs	r3, #31
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <displayStatus+0x94>)
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f001 fa27 	bl	800200c <lcd_StrCenter>
            break;
 8000bbe:	e000      	b.n	8000bc2 <displayStatus+0x82>
            break;
 8000bc0:	bf00      	nop
    }
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000058 	.word	0x20000058
 8000bcc:	08007034 	.word	0x08007034
 8000bd0:	08007044 	.word	0x08007044
 8000bd4:	08007058 	.word	0x08007058

08000bd8 <checkAlarmTime>:

int checkAlarmTime()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	return (ds3231_hour == hour_alarm && ((ds3231_min == min_alarm && ds3231_sec == sec_alarm)
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <checkAlarmTime+0xb0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <checkAlarmTime+0xb4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
			|| (ds3231_sec >= sec_alarm && ds3231_min == min_alarm)
			|| (ds3231_sec <= sec_alarm && ds3231_min == min_alarm + 1))
			&& ds3231_year == year_alarm && ds3231_month == month_alarm && ds3231_date == date_alarm
			&& ds3231_day == day_alarm) ? 1 : 0;
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d148      	bne.n	8000c7c <checkAlarmTime+0xa4>
	return (ds3231_hour == hour_alarm && ((ds3231_min == min_alarm && ds3231_sec == sec_alarm)
 8000bea:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <checkAlarmTime+0xb8>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <checkAlarmTime+0xbc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d106      	bne.n	8000c06 <checkAlarmTime+0x2e>
 8000bf8:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <checkAlarmTime+0xc0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <checkAlarmTime+0xc4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d01c      	beq.n	8000c40 <checkAlarmTime+0x68>
			|| (ds3231_sec >= sec_alarm && ds3231_min == min_alarm)
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <checkAlarmTime+0xc0>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <checkAlarmTime+0xc4>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	db06      	blt.n	8000c22 <checkAlarmTime+0x4a>
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <checkAlarmTime+0xb8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <checkAlarmTime+0xbc>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d00e      	beq.n	8000c40 <checkAlarmTime+0x68>
			|| (ds3231_sec <= sec_alarm && ds3231_min == min_alarm + 1))
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <checkAlarmTime+0xc0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <checkAlarmTime+0xc4>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dc25      	bgt.n	8000c7c <checkAlarmTime+0xa4>
 8000c30:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <checkAlarmTime+0xb8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <checkAlarmTime+0xbc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d11d      	bne.n	8000c7c <checkAlarmTime+0xa4>
			&& ds3231_year == year_alarm && ds3231_month == month_alarm && ds3231_date == date_alarm
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <checkAlarmTime+0xc8>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <checkAlarmTime+0xcc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d116      	bne.n	8000c7c <checkAlarmTime+0xa4>
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <checkAlarmTime+0xd0>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <checkAlarmTime+0xd4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d10f      	bne.n	8000c7c <checkAlarmTime+0xa4>
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <checkAlarmTime+0xd8>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <checkAlarmTime+0xdc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d108      	bne.n	8000c7c <checkAlarmTime+0xa4>
			&& ds3231_day == day_alarm) ? 1 : 0;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <checkAlarmTime+0xe0>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <checkAlarmTime+0xe4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d101      	bne.n	8000c7c <checkAlarmTime+0xa4>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e000      	b.n	8000c7e <checkAlarmTime+0xa6>
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	200000c6 	.word	0x200000c6
 8000c8c:	20000010 	.word	0x20000010
 8000c90:	200000c7 	.word	0x200000c7
 8000c94:	20000014 	.word	0x20000014
 8000c98:	200000c4 	.word	0x200000c4
 8000c9c:	20000018 	.word	0x20000018
 8000ca0:	200000c5 	.word	0x200000c5
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	200000ca 	.word	0x200000ca
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	200000c8 	.word	0x200000c8
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	200000c9 	.word	0x200000c9
 8000cbc:	2000000c 	.word	0x2000000c

08000cc0 <warnAlarmTime>:

void warnAlarmTime(){lcd_ShowStr(70, 160, (unsigned char *)"ALARM!", WHITE, RED, 16, 0);}
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af04      	add	r7, sp, #16
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	2310      	movs	r3, #16
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <warnAlarmTime+0x28>)
 8000cda:	21a0      	movs	r1, #160	; 0xa0
 8000cdc:	2046      	movs	r0, #70	; 0x46
 8000cde:	f001 f931 	bl	8001f44 <lcd_ShowStr>
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	0800706c 	.word	0x0800706c

08000cec <increment>:

void increment()
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
	if(state == 0)
 8000cf0:	4b93      	ldr	r3, [pc, #588]	; (8000f40 <increment+0x254>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <increment+0x12c>
	{
		switch (current_parameter)
 8000cfa:	4b92      	ldr	r3, [pc, #584]	; (8000f44 <increment+0x258>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	f200 8118 	bhi.w	8000f34 <increment+0x248>
 8000d04:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <increment+0x20>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d29 	.word	0x08000d29
 8000d10:	08000d4d 	.word	0x08000d4d
 8000d14:	08000d71 	.word	0x08000d71
 8000d18:	08000d93 	.word	0x08000d93
 8000d1c:	08000db5 	.word	0x08000db5
 8000d20:	08000dd7 	.word	0x08000dd7
 8000d24:	08000df9 	.word	0x08000df9
		{
		case 0: sec_temp = (sec_temp + 1) % 60; 		break;
 8000d28:	4b87      	ldr	r3, [pc, #540]	; (8000f48 <increment+0x25c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	4b87      	ldr	r3, [pc, #540]	; (8000f4c <increment+0x260>)
 8000d30:	fb83 1302 	smull	r1, r3, r3, r2
 8000d34:	4413      	add	r3, r2
 8000d36:	1159      	asrs	r1, r3, #5
 8000d38:	17d3      	asrs	r3, r2, #31
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	1a5b      	subs	r3, r3, r1
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	1ad1      	subs	r1, r2, r3
 8000d46:	4b80      	ldr	r3, [pc, #512]	; (8000f48 <increment+0x25c>)
 8000d48:	6019      	str	r1, [r3, #0]
 8000d4a:	e0f3      	b.n	8000f34 <increment+0x248>
		case 1: min_temp = (min_temp + 1) % 60; 		break;
 8000d4c:	4b80      	ldr	r3, [pc, #512]	; (8000f50 <increment+0x264>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	4b7e      	ldr	r3, [pc, #504]	; (8000f4c <increment+0x260>)
 8000d54:	fb83 1302 	smull	r1, r3, r3, r2
 8000d58:	4413      	add	r3, r2
 8000d5a:	1159      	asrs	r1, r3, #5
 8000d5c:	17d3      	asrs	r3, r2, #31
 8000d5e:	1ac9      	subs	r1, r1, r3
 8000d60:	460b      	mov	r3, r1
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	1ad1      	subs	r1, r2, r3
 8000d6a:	4b79      	ldr	r3, [pc, #484]	; (8000f50 <increment+0x264>)
 8000d6c:	6019      	str	r1, [r3, #0]
 8000d6e:	e0e1      	b.n	8000f34 <increment+0x248>
		case 2: hour_temp = (hour_temp + 1) % 24; 		break;
 8000d70:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <increment+0x268>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	1c59      	adds	r1, r3, #1
 8000d76:	4b78      	ldr	r3, [pc, #480]	; (8000f58 <increment+0x26c>)
 8000d78:	fb83 2301 	smull	r2, r3, r3, r1
 8000d7c:	109a      	asrs	r2, r3, #2
 8000d7e:	17cb      	asrs	r3, r1, #31
 8000d80:	1ad2      	subs	r2, r2, r3
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	1aca      	subs	r2, r1, r3
 8000d8c:	4b71      	ldr	r3, [pc, #452]	; (8000f54 <increment+0x268>)
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e0d0      	b.n	8000f34 <increment+0x248>
		case 3: day_temp = (day_temp % 7) + 1; 			break;
 8000d92:	4b72      	ldr	r3, [pc, #456]	; (8000f5c <increment+0x270>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b72      	ldr	r3, [pc, #456]	; (8000f60 <increment+0x274>)
 8000d98:	fb83 1302 	smull	r1, r3, r3, r2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	1099      	asrs	r1, r3, #2
 8000da0:	17d3      	asrs	r3, r2, #31
 8000da2:	1ac9      	subs	r1, r1, r3
 8000da4:	460b      	mov	r3, r1
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	1ad1      	subs	r1, r2, r3
 8000dac:	1c4b      	adds	r3, r1, #1
 8000dae:	4a6b      	ldr	r2, [pc, #428]	; (8000f5c <increment+0x270>)
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e0bf      	b.n	8000f34 <increment+0x248>
		case 4: date_temp = (date_temp % 31) + 1; 		break;
 8000db4:	4b6b      	ldr	r3, [pc, #428]	; (8000f64 <increment+0x278>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b6b      	ldr	r3, [pc, #428]	; (8000f68 <increment+0x27c>)
 8000dba:	fb83 1302 	smull	r1, r3, r3, r2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	1119      	asrs	r1, r3, #4
 8000dc2:	17d3      	asrs	r3, r2, #31
 8000dc4:	1ac9      	subs	r1, r1, r3
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	1a5b      	subs	r3, r3, r1
 8000dcc:	1ad1      	subs	r1, r2, r3
 8000dce:	1c4b      	adds	r3, r1, #1
 8000dd0:	4a64      	ldr	r2, [pc, #400]	; (8000f64 <increment+0x278>)
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e0ae      	b.n	8000f34 <increment+0x248>
		case 5: month_temp = (month_temp % 12) + 1; 	break;
 8000dd6:	4b65      	ldr	r3, [pc, #404]	; (8000f6c <increment+0x280>)
 8000dd8:	6819      	ldr	r1, [r3, #0]
 8000dda:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <increment+0x26c>)
 8000ddc:	fb83 2301 	smull	r2, r3, r3, r1
 8000de0:	105a      	asrs	r2, r3, #1
 8000de2:	17cb      	asrs	r3, r1, #31
 8000de4:	1ad2      	subs	r2, r2, r3
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	1aca      	subs	r2, r1, r3
 8000df0:	1c53      	adds	r3, r2, #1
 8000df2:	4a5e      	ldr	r2, [pc, #376]	; (8000f6c <increment+0x280>)
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e09d      	b.n	8000f34 <increment+0x248>
		case 6: year_temp = (year_temp % 100) + 1; 		break;
 8000df8:	4b5d      	ldr	r3, [pc, #372]	; (8000f70 <increment+0x284>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b5d      	ldr	r3, [pc, #372]	; (8000f74 <increment+0x288>)
 8000dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8000e02:	1159      	asrs	r1, r3, #5
 8000e04:	17d3      	asrs	r3, r2, #31
 8000e06:	1acb      	subs	r3, r1, r3
 8000e08:	2164      	movs	r1, #100	; 0x64
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	3301      	adds	r3, #1
 8000e12:	4a57      	ldr	r2, [pc, #348]	; (8000f70 <increment+0x284>)
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e08d      	b.n	8000f34 <increment+0x248>
		}
	}
	else
	{
		switch (current_parameter)
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <increment+0x258>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b06      	cmp	r3, #6
 8000e1e:	f200 8089 	bhi.w	8000f34 <increment+0x248>
 8000e22:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <increment+0x13c>)
 8000e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e28:	08000e45 	.word	0x08000e45
 8000e2c:	08000e69 	.word	0x08000e69
 8000e30:	08000e8d 	.word	0x08000e8d
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000ed1 	.word	0x08000ed1
 8000e3c:	08000ef3 	.word	0x08000ef3
 8000e40:	08000f15 	.word	0x08000f15
		{
		case 0: sec_alarm = (sec_alarm + 1) % 60; 		break;
 8000e44:	4b4c      	ldr	r3, [pc, #304]	; (8000f78 <increment+0x28c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <increment+0x260>)
 8000e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e50:	4413      	add	r3, r2
 8000e52:	1159      	asrs	r1, r3, #5
 8000e54:	17d3      	asrs	r3, r2, #31
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	460b      	mov	r3, r1
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	1a5b      	subs	r3, r3, r1
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	1ad1      	subs	r1, r2, r3
 8000e62:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <increment+0x28c>)
 8000e64:	6019      	str	r1, [r3, #0]
 8000e66:	e065      	b.n	8000f34 <increment+0x248>
		case 1: min_alarm = (min_alarm + 1) % 60; 		break;
 8000e68:	4b44      	ldr	r3, [pc, #272]	; (8000f7c <increment+0x290>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <increment+0x260>)
 8000e70:	fb83 1302 	smull	r1, r3, r3, r2
 8000e74:	4413      	add	r3, r2
 8000e76:	1159      	asrs	r1, r3, #5
 8000e78:	17d3      	asrs	r3, r2, #31
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	1a5b      	subs	r3, r3, r1
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	1ad1      	subs	r1, r2, r3
 8000e86:	4b3d      	ldr	r3, [pc, #244]	; (8000f7c <increment+0x290>)
 8000e88:	6019      	str	r1, [r3, #0]
 8000e8a:	e053      	b.n	8000f34 <increment+0x248>
		case 2: hour_alarm = (hour_alarm + 1) % 24; 	break;
 8000e8c:	4b3c      	ldr	r3, [pc, #240]	; (8000f80 <increment+0x294>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1c59      	adds	r1, r3, #1
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <increment+0x26c>)
 8000e94:	fb83 2301 	smull	r2, r3, r3, r1
 8000e98:	109a      	asrs	r2, r3, #2
 8000e9a:	17cb      	asrs	r3, r1, #31
 8000e9c:	1ad2      	subs	r2, r2, r3
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	1aca      	subs	r2, r1, r3
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <increment+0x294>)
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e042      	b.n	8000f34 <increment+0x248>
		case 3: day_alarm = (day_alarm % 7) + 1; 		break;
 8000eae:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <increment+0x298>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <increment+0x274>)
 8000eb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb8:	4413      	add	r3, r2
 8000eba:	1099      	asrs	r1, r3, #2
 8000ebc:	17d3      	asrs	r3, r2, #31
 8000ebe:	1ac9      	subs	r1, r1, r3
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	1ad1      	subs	r1, r2, r3
 8000ec8:	1c4b      	adds	r3, r1, #1
 8000eca:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <increment+0x298>)
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	e031      	b.n	8000f34 <increment+0x248>
		case 4: date_alarm = (date_alarm % 31) + 1; 	break;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <increment+0x29c>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <increment+0x27c>)
 8000ed6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eda:	4413      	add	r3, r2
 8000edc:	1119      	asrs	r1, r3, #4
 8000ede:	17d3      	asrs	r3, r2, #31
 8000ee0:	1ac9      	subs	r1, r1, r3
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	015b      	lsls	r3, r3, #5
 8000ee6:	1a5b      	subs	r3, r3, r1
 8000ee8:	1ad1      	subs	r1, r2, r3
 8000eea:	1c4b      	adds	r3, r1, #1
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <increment+0x29c>)
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	e020      	b.n	8000f34 <increment+0x248>
		case 5: month_alarm = (month_alarm % 12) + 1; 	break;
 8000ef2:	4b26      	ldr	r3, [pc, #152]	; (8000f8c <increment+0x2a0>)
 8000ef4:	6819      	ldr	r1, [r3, #0]
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <increment+0x26c>)
 8000ef8:	fb83 2301 	smull	r2, r3, r3, r1
 8000efc:	105a      	asrs	r2, r3, #1
 8000efe:	17cb      	asrs	r3, r1, #31
 8000f00:	1ad2      	subs	r2, r2, r3
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	1aca      	subs	r2, r1, r3
 8000f0c:	1c53      	adds	r3, r2, #1
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <increment+0x2a0>)
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	e00f      	b.n	8000f34 <increment+0x248>
		case 6: year_alarm = (year_alarm % 100) + 1; 	break;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <increment+0x2a4>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <increment+0x288>)
 8000f1a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f1e:	1159      	asrs	r1, r3, #5
 8000f20:	17d3      	asrs	r3, r2, #31
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	2164      	movs	r1, #100	; 0x64
 8000f26:	fb01 f303 	mul.w	r3, r1, r3
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <increment+0x2a4>)
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	bf00      	nop
		}
	}
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000084 	.word	0x20000084
 8000f44:	20000088 	.word	0x20000088
 8000f48:	20000080 	.word	0x20000080
 8000f4c:	88888889 	.word	0x88888889
 8000f50:	2000007c 	.word	0x2000007c
 8000f54:	20000078 	.word	0x20000078
 8000f58:	2aaaaaab 	.word	0x2aaaaaab
 8000f5c:	20000074 	.word	0x20000074
 8000f60:	92492493 	.word	0x92492493
 8000f64:	20000070 	.word	0x20000070
 8000f68:	84210843 	.word	0x84210843
 8000f6c:	2000006c 	.word	0x2000006c
 8000f70:	20000068 	.word	0x20000068
 8000f74:	51eb851f 	.word	0x51eb851f
 8000f78:	20000018 	.word	0x20000018
 8000f7c:	20000014 	.word	0x20000014
 8000f80:	20000010 	.word	0x20000010
 8000f84:	2000000c 	.word	0x2000000c
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000004 	.word	0x20000004
 8000f90:	20000000 	.word	0x20000000

08000f94 <incrementParameter>:

void incrementParameter()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	if(timer2 == 0 && is_pressed == 0)
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <incrementParameter+0x60>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d105      	bne.n	8000fac <incrementParameter+0x18>
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <incrementParameter+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <incrementParameter+0x18>
		increment();
 8000fa8:	f7ff fea0 	bl	8000cec <increment>
	if(is_pressed == 0)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <incrementParameter+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d111      	bne.n	8000fd8 <incrementParameter+0x44>
	{
		timer2++;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <incrementParameter+0x60>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <incrementParameter+0x60>)
 8000fbc:	6013      	str	r3, [r2, #0]
		if(timer2 >= 40)
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <incrementParameter+0x60>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b27      	cmp	r3, #39	; 0x27
 8000fc4:	dd08      	ble.n	8000fd8 <incrementParameter+0x44>
		{
			timer1 = 0;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <incrementParameter+0x68>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
			timer2 = 0;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <incrementParameter+0x60>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
			is_pressed = 1;
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <incrementParameter+0x64>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]
		}
	}
	if(is_pressed == 1)
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <incrementParameter+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <incrementParameter+0x5c>
	{
		if((timer1 % 4) == 0)
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <incrementParameter+0x68>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <incrementParameter+0x5c>
			increment();
 8000fec:	f7ff fe7e 	bl	8000cec <increment>
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000060 	.word	0x20000060
 8000ff8:	20000064 	.word	0x20000064
 8000ffc:	2000005c 	.word	0x2000005c

08001000 <fsm_mode>:

void fsm_mode()
{
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	b085      	sub	sp, #20
 8001004:	af04      	add	r7, sp, #16
	ds3231_ReadTime();
 8001006:	f7ff fafd 	bl	8000604 <ds3231_ReadTime>
	if(checkAlarmTime() && alarm_on == 1)
 800100a:	f7ff fde5 	bl	8000bd8 <checkAlarmTime>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <fsm_mode+0x22>
 8001014:	4b95      	ldr	r3, [pc, #596]	; (800126c <fsm_mode+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d102      	bne.n	8001022 <fsm_mode+0x22>
		warnAlarmTime();
 800101c:	f7ff fe50 	bl	8000cc0 <warnAlarmTime>
 8001020:	e00b      	b.n	800103a <fsm_mode+0x3a>
	else
		lcd_ShowStr(70, 160, (unsigned char *)"      ", BLACK, BLACK, 16, 0);
 8001022:	2300      	movs	r3, #0
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2310      	movs	r3, #16
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	4a8f      	ldr	r2, [pc, #572]	; (8001270 <fsm_mode+0x270>)
 8001032:	21a0      	movs	r1, #160	; 0xa0
 8001034:	2046      	movs	r0, #70	; 0x46
 8001036:	f000 ff85 	bl	8001f44 <lcd_ShowStr>

    switch (mode)
 800103a:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <fsm_mode+0x274>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b03      	cmp	r3, #3
 8001040:	f200 810e 	bhi.w	8001260 <fsm_mode+0x260>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <fsm_mode+0x4c>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	0800105d 	.word	0x0800105d
 8001050:	0800106d 	.word	0x0800106d
 8001054:	080010dd 	.word	0x080010dd
 8001058:	08001199 	.word	0x08001199
    {
        case ModeInit:
            initializeTime();
 800105c:	f7ff fb36 	bl	80006cc <initializeTime>
            ds3231_ReadTime();
 8001060:	f7ff fad0 	bl	8000604 <ds3231_ReadTime>
            mode = NormalMode;
 8001064:	4b83      	ldr	r3, [pc, #524]	; (8001274 <fsm_mode+0x274>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
            break;
 800106a:	e0fa      	b.n	8001262 <fsm_mode+0x262>

        case NormalMode:
        	displayStatus();
 800106c:	f7ff fd68 	bl	8000b40 <displayStatus>
            if(button_count[0] >= 3)
 8001070:	4b81      	ldr	r3, [pc, #516]	; (8001278 <fsm_mode+0x278>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d92e      	bls.n	80010d6 <fsm_mode+0xd6>
            {
                timer1 = 0;
 8001078:	4b80      	ldr	r3, [pc, #512]	; (800127c <fsm_mode+0x27c>)
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
                current_parameter = 0;
 800107e:	4b80      	ldr	r3, [pc, #512]	; (8001280 <fsm_mode+0x280>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
                hour_temp = ds3231_hour;
 8001084:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <fsm_mode+0x284>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <fsm_mode+0x288>)
 800108c:	601a      	str	r2, [r3, #0]
                min_temp = ds3231_min;
 800108e:	4b7f      	ldr	r3, [pc, #508]	; (800128c <fsm_mode+0x28c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4b7e      	ldr	r3, [pc, #504]	; (8001290 <fsm_mode+0x290>)
 8001096:	601a      	str	r2, [r3, #0]
                sec_temp = ds3231_sec;
 8001098:	4b7e      	ldr	r3, [pc, #504]	; (8001294 <fsm_mode+0x294>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b7e      	ldr	r3, [pc, #504]	; (8001298 <fsm_mode+0x298>)
 80010a0:	601a      	str	r2, [r3, #0]
                day_temp = ds3231_day;
 80010a2:	4b7e      	ldr	r3, [pc, #504]	; (800129c <fsm_mode+0x29c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b7d      	ldr	r3, [pc, #500]	; (80012a0 <fsm_mode+0x2a0>)
 80010aa:	601a      	str	r2, [r3, #0]
                date_temp = ds3231_date;
 80010ac:	4b7d      	ldr	r3, [pc, #500]	; (80012a4 <fsm_mode+0x2a4>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b7d      	ldr	r3, [pc, #500]	; (80012a8 <fsm_mode+0x2a8>)
 80010b4:	601a      	str	r2, [r3, #0]
                month_temp = ds3231_month;
 80010b6:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <fsm_mode+0x2ac>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <fsm_mode+0x2b0>)
 80010be:	601a      	str	r2, [r3, #0]
                year_temp = ds3231_year;
 80010c0:	4b7c      	ldr	r3, [pc, #496]	; (80012b4 <fsm_mode+0x2b4>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b7c      	ldr	r3, [pc, #496]	; (80012b8 <fsm_mode+0x2b8>)
 80010c8:	601a      	str	r2, [r3, #0]
                mode = SettingMode;
 80010ca:	4b6a      	ldr	r3, [pc, #424]	; (8001274 <fsm_mode+0x274>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	601a      	str	r2, [r3, #0]
                state = 0;
 80010d0:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <fsm_mode+0x2bc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 80010d6:	f7ff fb7f 	bl	80007d8 <displayTime>
            break;
 80010da:	e0c2      	b.n	8001262 <fsm_mode+0x262>

        case SettingMode:
        	displayStatus();
 80010dc:	f7ff fd30 	bl	8000b40 <displayStatus>
            if(button_count[4] >= 3)
 80010e0:	4b65      	ldr	r3, [pc, #404]	; (8001278 <fsm_mode+0x278>)
 80010e2:	891b      	ldrh	r3, [r3, #8]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d902      	bls.n	80010ee <fsm_mode+0xee>
            	incrementParameter();
 80010e8:	f7ff ff54 	bl	8000f94 <incrementParameter>
 80010ec:	e002      	b.n	80010f4 <fsm_mode+0xf4>
            else
            	timer2 = 0;
 80010ee:	4b74      	ldr	r3, [pc, #464]	; (80012c0 <fsm_mode+0x2c0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

            if(button_count[12] >= 3)
 80010f4:	4b60      	ldr	r3, [pc, #384]	; (8001278 <fsm_mode+0x278>)
 80010f6:	8b1b      	ldrh	r3, [r3, #24]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d93d      	bls.n	8001178 <fsm_mode+0x178>
            {
                current_parameter++;
 80010fc:	4b60      	ldr	r3, [pc, #384]	; (8001280 <fsm_mode+0x280>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	4a5f      	ldr	r2, [pc, #380]	; (8001280 <fsm_mode+0x280>)
 8001104:	6013      	str	r3, [r2, #0]
                if(current_parameter > 6)
 8001106:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <fsm_mode+0x280>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b06      	cmp	r3, #6
 800110c:	dd1e      	ble.n	800114c <fsm_mode+0x14c>
                {
                	timer1 = 0;
 800110e:	4b5b      	ldr	r3, [pc, #364]	; (800127c <fsm_mode+0x27c>)
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
                    current_parameter = 0;
 8001114:	4b5a      	ldr	r3, [pc, #360]	; (8001280 <fsm_mode+0x280>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
                    updateTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 800111a:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <fsm_mode+0x2b8>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <fsm_mode+0x2b0>)
 8001120:	681c      	ldr	r4, [r3, #0]
 8001122:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <fsm_mode+0x2a8>)
 8001124:	681d      	ldr	r5, [r3, #0]
 8001126:	4b5e      	ldr	r3, [pc, #376]	; (80012a0 <fsm_mode+0x2a0>)
 8001128:	681e      	ldr	r6, [r3, #0]
 800112a:	4b57      	ldr	r3, [pc, #348]	; (8001288 <fsm_mode+0x288>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a58      	ldr	r2, [pc, #352]	; (8001290 <fsm_mode+0x290>)
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	4959      	ldr	r1, [pc, #356]	; (8001298 <fsm_mode+0x298>)
 8001134:	6809      	ldr	r1, [r1, #0]
 8001136:	9102      	str	r1, [sp, #8]
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4633      	mov	r3, r6
 800113e:	462a      	mov	r2, r5
 8001140:	4621      	mov	r1, r4
 8001142:	f7ff fae3 	bl	800070c <updateTime>
                    mode = NormalMode;
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <fsm_mode+0x274>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
                }
                updateTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 800114c:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <fsm_mode+0x2b8>)
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <fsm_mode+0x2b0>)
 8001152:	681c      	ldr	r4, [r3, #0]
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <fsm_mode+0x2a8>)
 8001156:	681d      	ldr	r5, [r3, #0]
 8001158:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <fsm_mode+0x2a0>)
 800115a:	681e      	ldr	r6, [r3, #0]
 800115c:	4b4a      	ldr	r3, [pc, #296]	; (8001288 <fsm_mode+0x288>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a4b      	ldr	r2, [pc, #300]	; (8001290 <fsm_mode+0x290>)
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	494c      	ldr	r1, [pc, #304]	; (8001298 <fsm_mode+0x298>)
 8001166:	6809      	ldr	r1, [r1, #0]
 8001168:	9102      	str	r1, [sp, #8]
 800116a:	9201      	str	r2, [sp, #4]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	4633      	mov	r3, r6
 8001170:	462a      	mov	r2, r5
 8001172:	4621      	mov	r1, r4
 8001174:	f7ff faca 	bl	800070c <updateTime>
            }

            if(button_count[0] >= 3)
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <fsm_mode+0x278>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d908      	bls.n	8001192 <fsm_mode+0x192>
            {
            	timer1 = 0;
 8001180:	4b3e      	ldr	r3, [pc, #248]	; (800127c <fsm_mode+0x27c>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
            	current_parameter = 0;
 8001186:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <fsm_mode+0x280>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
            	state = 1;
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <fsm_mode+0x2bc>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 8001192:	f7ff fb21 	bl	80007d8 <displayTime>
            break;
 8001196:	e064      	b.n	8001262 <fsm_mode+0x262>

        case AlarmSettingMode:
        	displayStatus();
 8001198:	f7ff fcd2 	bl	8000b40 <displayStatus>
            if(button_count[4] >= 3)
 800119c:	4b36      	ldr	r3, [pc, #216]	; (8001278 <fsm_mode+0x278>)
 800119e:	891b      	ldrh	r3, [r3, #8]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d902      	bls.n	80011aa <fsm_mode+0x1aa>
            	incrementParameter();
 80011a4:	f7ff fef6 	bl	8000f94 <incrementParameter>
 80011a8:	e002      	b.n	80011b0 <fsm_mode+0x1b0>
            else
            	timer2 = 0;
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <fsm_mode+0x2c0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]

            if(button_count[12] >= 3)
 80011b0:	4b31      	ldr	r3, [pc, #196]	; (8001278 <fsm_mode+0x278>)
 80011b2:	8b1b      	ldrh	r3, [r3, #24]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d943      	bls.n	8001240 <fsm_mode+0x240>
            {
            	current_parameter++;
 80011b8:	4b31      	ldr	r3, [pc, #196]	; (8001280 <fsm_mode+0x280>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a30      	ldr	r2, [pc, #192]	; (8001280 <fsm_mode+0x280>)
 80011c0:	6013      	str	r3, [r2, #0]
            	if(current_parameter > 6)
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <fsm_mode+0x280>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	dd21      	ble.n	800120e <fsm_mode+0x20e>
            	{
            		timer1 = 0;
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <fsm_mode+0x27c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
            		current_parameter = 0;
 80011d0:	4b2b      	ldr	r3, [pc, #172]	; (8001280 <fsm_mode+0x280>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
            		updateAlarmTime(year_alarm, month_alarm, date_alarm, day_alarm, hour_alarm, min_alarm, sec_alarm);
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <fsm_mode+0x2c4>)
 80011d8:	6818      	ldr	r0, [r3, #0]
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <fsm_mode+0x2c8>)
 80011dc:	681c      	ldr	r4, [r3, #0]
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <fsm_mode+0x2cc>)
 80011e0:	681d      	ldr	r5, [r3, #0]
 80011e2:	4b3b      	ldr	r3, [pc, #236]	; (80012d0 <fsm_mode+0x2d0>)
 80011e4:	681e      	ldr	r6, [r3, #0]
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <fsm_mode+0x2d4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a3b      	ldr	r2, [pc, #236]	; (80012d8 <fsm_mode+0x2d8>)
 80011ec:	6812      	ldr	r2, [r2, #0]
 80011ee:	493b      	ldr	r1, [pc, #236]	; (80012dc <fsm_mode+0x2dc>)
 80011f0:	6809      	ldr	r1, [r1, #0]
 80011f2:	9102      	str	r1, [sp, #8]
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	4633      	mov	r3, r6
 80011fa:	462a      	mov	r2, r5
 80011fc:	4621      	mov	r1, r4
 80011fe:	f7ff fabb 	bl	8000778 <updateAlarmTime>
            		alarm_on = 1;
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <fsm_mode+0x26c>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]
            		mode = NormalMode;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <fsm_mode+0x274>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
            	}
            	alarm_on = 1;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <fsm_mode+0x26c>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
            	updateAlarmTime(year_alarm, month_alarm, date_alarm, day_alarm, hour_alarm, min_alarm, sec_alarm);
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <fsm_mode+0x2c4>)
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <fsm_mode+0x2c8>)
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <fsm_mode+0x2cc>)
 800121e:	681d      	ldr	r5, [r3, #0]
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <fsm_mode+0x2d0>)
 8001222:	681e      	ldr	r6, [r3, #0]
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <fsm_mode+0x2d4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <fsm_mode+0x2d8>)
 800122a:	6812      	ldr	r2, [r2, #0]
 800122c:	492b      	ldr	r1, [pc, #172]	; (80012dc <fsm_mode+0x2dc>)
 800122e:	6809      	ldr	r1, [r1, #0]
 8001230:	9102      	str	r1, [sp, #8]
 8001232:	9201      	str	r2, [sp, #4]
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	4633      	mov	r3, r6
 8001238:	462a      	mov	r2, r5
 800123a:	4621      	mov	r1, r4
 800123c:	f7ff fa9c 	bl	8000778 <updateAlarmTime>
            }

            if(button_count[0] >= 3)
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <fsm_mode+0x278>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d908      	bls.n	800125a <fsm_mode+0x25a>
            {
            	timer1 = 0;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <fsm_mode+0x27c>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
            	current_parameter = 0;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <fsm_mode+0x280>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
            	mode = NormalMode;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <fsm_mode+0x274>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 800125a:	f7ff fabd 	bl	80007d8 <displayTime>
            break;
 800125e:	e000      	b.n	8001262 <fsm_mode+0x262>

        default:
            break;
 8001260:	bf00      	nop
    }
}
 8001262:	bf00      	nop
 8001264:	3704      	adds	r7, #4
 8001266:	46bd      	mov	sp, r7
 8001268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126a:	bf00      	nop
 800126c:	2000001c 	.word	0x2000001c
 8001270:	08007074 	.word	0x08007074
 8001274:	20000058 	.word	0x20000058
 8001278:	200000a4 	.word	0x200000a4
 800127c:	2000005c 	.word	0x2000005c
 8001280:	20000088 	.word	0x20000088
 8001284:	200000c6 	.word	0x200000c6
 8001288:	20000078 	.word	0x20000078
 800128c:	200000c7 	.word	0x200000c7
 8001290:	2000007c 	.word	0x2000007c
 8001294:	200000c4 	.word	0x200000c4
 8001298:	20000080 	.word	0x20000080
 800129c:	200000c9 	.word	0x200000c9
 80012a0:	20000074 	.word	0x20000074
 80012a4:	200000c8 	.word	0x200000c8
 80012a8:	20000070 	.word	0x20000070
 80012ac:	200000ca 	.word	0x200000ca
 80012b0:	2000006c 	.word	0x2000006c
 80012b4:	200000c5 	.word	0x200000c5
 80012b8:	20000068 	.word	0x20000068
 80012bc:	20000084 	.word	0x20000084
 80012c0:	20000060 	.word	0x20000060
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004
 80012cc:	20000008 	.word	0x20000008
 80012d0:	2000000c 	.word	0x2000000c
 80012d4:	20000010 	.word	0x20000010
 80012d8:	20000014 	.word	0x20000014
 80012dc:	20000018 	.word	0x20000018

080012e0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <MX_FSMC_Init+0xec>)
 800130e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001312:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <MX_FSMC_Init+0xec>)
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <MX_FSMC_Init+0xf0>)
 8001318:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <MX_FSMC_Init+0xec>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <MX_FSMC_Init+0xec>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <MX_FSMC_Init+0xec>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <MX_FSMC_Init+0xec>)
 800132e:	2210      	movs	r2, #16
 8001330:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <MX_FSMC_Init+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <MX_FSMC_Init+0xec>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800133e:	4b23      	ldr	r3, [pc, #140]	; (80013cc <MX_FSMC_Init+0xec>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_FSMC_Init+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800134a:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_FSMC_Init+0xec>)
 800134c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001352:	4b1e      	ldr	r3, [pc, #120]	; (80013cc <MX_FSMC_Init+0xec>)
 8001354:	2200      	movs	r2, #0
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_FSMC_Init+0xec>)
 800135a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_FSMC_Init+0xec>)
 8001362:	2200      	movs	r2, #0
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_FSMC_Init+0xec>)
 8001368:	2200      	movs	r2, #0
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_FSMC_Init+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001372:	230f      	movs	r3, #15
 8001374:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001376:	230f      	movs	r3, #15
 8001378:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800137a:	233c      	movs	r3, #60	; 0x3c
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001382:	2310      	movs	r3, #16
 8001384:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001386:	2311      	movs	r3, #17
 8001388:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800138a:	2300      	movs	r3, #0
 800138c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800138e:	2308      	movs	r3, #8
 8001390:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001392:	230f      	movs	r3, #15
 8001394:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001396:	2309      	movs	r3, #9
 8001398:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800139e:	2310      	movs	r3, #16
 80013a0:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80013a2:	2311      	movs	r3, #17
 80013a4:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80013aa:	463a      	mov	r2, r7
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <MX_FSMC_Init+0xec>)
 80013b4:	f004 f8a8 	bl	8005508 <HAL_SRAM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80013be:	f000 ffd5 	bl	800236c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013c2:	bf00      	nop
 80013c4:	3738      	adds	r7, #56	; 0x38
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200000d4 	.word	0x200000d4
 80013d0:	a0000104 	.word	0xa0000104

080013d4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_FSMC_MspInit+0x88>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d131      	bne.n	8001454 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_FSMC_MspInit+0x88>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_FSMC_MspInit+0x8c>)
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <HAL_FSMC_MspInit+0x8c>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6393      	str	r3, [r2, #56]	; 0x38
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_FSMC_MspInit+0x8c>)
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001412:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001416:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001424:	230c      	movs	r3, #12
 8001426:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <HAL_FSMC_MspInit+0x90>)
 800142e:	f001 fcbf 	bl	8002db0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001432:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001436:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001444:	230c      	movs	r3, #12
 8001446:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <HAL_FSMC_MspInit+0x94>)
 800144e:	f001 fcaf 	bl	8002db0 <HAL_GPIO_Init>
 8001452:	e000      	b.n	8001456 <HAL_FSMC_MspInit+0x82>
    return;
 8001454:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000054 	.word	0x20000054
 8001460:	40023800 	.word	0x40023800
 8001464:	40021000 	.word	0x40021000
 8001468:	40020c00 	.word	0x40020c00

0800146c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001474:	f7ff ffae 	bl	80013d4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <MX_GPIO_Init+0x1d8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a6e      	ldr	r2, [pc, #440]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b6c      	ldr	r3, [pc, #432]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a67      	ldr	r2, [pc, #412]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b65      	ldr	r3, [pc, #404]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b61      	ldr	r3, [pc, #388]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a60      	ldr	r2, [pc, #384]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b5a      	ldr	r3, [pc, #360]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a59      	ldr	r2, [pc, #356]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b57      	ldr	r3, [pc, #348]	; (8001658 <MX_GPIO_Init+0x1d8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <MX_GPIO_Init+0x1d8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a52      	ldr	r2, [pc, #328]	; (8001658 <MX_GPIO_Init+0x1d8>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b50      	ldr	r3, [pc, #320]	; (8001658 <MX_GPIO_Init+0x1d8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <MX_GPIO_Init+0x1d8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a4b      	ldr	r2, [pc, #300]	; (8001658 <MX_GPIO_Init+0x1d8>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b49      	ldr	r3, [pc, #292]	; (8001658 <MX_GPIO_Init+0x1d8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <MX_GPIO_Init+0x1d8>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a44      	ldr	r2, [pc, #272]	; (8001658 <MX_GPIO_Init+0x1d8>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <MX_GPIO_Init+0x1d8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2170      	movs	r1, #112	; 0x70
 800155e:	483f      	ldr	r0, [pc, #252]	; (800165c <MX_GPIO_Init+0x1dc>)
 8001560:	f001 fdc2 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	483d      	ldr	r0, [pc, #244]	; (8001660 <MX_GPIO_Init+0x1e0>)
 800156c:	f001 fdbc 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	483b      	ldr	r0, [pc, #236]	; (8001664 <MX_GPIO_Init+0x1e4>)
 8001576:	f001 fdb7 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001580:	4839      	ldr	r0, [pc, #228]	; (8001668 <MX_GPIO_Init+0x1e8>)
 8001582:	f001 fdb1 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	2108      	movs	r1, #8
 800158a:	4838      	ldr	r0, [pc, #224]	; (800166c <MX_GPIO_Init+0x1ec>)
 800158c:	f001 fdac 	bl	80030e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001590:	2370      	movs	r3, #112	; 0x70
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	482d      	ldr	r0, [pc, #180]	; (800165c <MX_GPIO_Init+0x1dc>)
 80015a8:	f001 fc02 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80015ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4826      	ldr	r0, [pc, #152]	; (8001660 <MX_GPIO_Init+0x1e0>)
 80015c6:	f001 fbf3 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80015ca:	23c0      	movs	r3, #192	; 0xc0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4822      	ldr	r0, [pc, #136]	; (8001668 <MX_GPIO_Init+0x1e8>)
 80015de:	f001 fbe7 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80015e2:	2330      	movs	r3, #48	; 0x30
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	481a      	ldr	r0, [pc, #104]	; (8001660 <MX_GPIO_Init+0x1e0>)
 80015f6:	f001 fbdb 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80015fa:	2340      	movs	r3, #64	; 0x40
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4814      	ldr	r0, [pc, #80]	; (8001664 <MX_GPIO_Init+0x1e4>)
 8001612:	f001 fbcd 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <MX_GPIO_Init+0x1e8>)
 8001630:	f001 fbbe 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001634:	2308      	movs	r3, #8
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <MX_GPIO_Init+0x1ec>)
 800164c:	f001 fbb0 	bl	8002db0 <HAL_GPIO_Init>

}
 8001650:	bf00      	nop
 8001652:	3730      	adds	r7, #48	; 0x30
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40021000 	.word	0x40021000
 8001660:	40020800 	.word	0x40020800
 8001664:	40021800 	.word	0x40021800
 8001668:	40020000 	.word	0x40020000
 800166c:	40020c00 	.word	0x40020c00

08001670 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <MX_I2C1_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_I2C1_Init+0x50>)
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_I2C1_Init+0x58>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_I2C1_Init+0x50>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016ae:	f001 fd4f 	bl	8003150 <HAL_I2C_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b8:	f000 fe58 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000124 	.word	0x20000124
 80016c4:	40005400 	.word	0x40005400
 80016c8:	000186a0 	.word	0x000186a0

080016cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a19      	ldr	r2, [pc, #100]	; (8001750 <HAL_I2C_MspInit+0x84>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d12b      	bne.n	8001746 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_I2C_MspInit+0x88>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <HAL_I2C_MspInit+0x88>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_I2C_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170e:	2312      	movs	r3, #18
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800171a:	2304      	movs	r3, #4
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	; (8001758 <HAL_I2C_MspInit+0x8c>)
 8001726:	f001 fb43 	bl	8002db0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_I2C_MspInit+0x88>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_I2C_MspInit+0x88>)
 8001734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_I2C_MspInit+0x88>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40005400 	.word	0x40005400
 8001754:	40023800 	.word	0x40023800
 8001758:	40020400 	.word	0x40020400

0800175c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001766:	4a04      	ldr	r2, [pc, #16]	; (8001778 <LCD_WR_REG+0x1c>)
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	8013      	strh	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	600ffffe 	.word	0x600ffffe

0800177c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <LCD_WR_DATA+0x1c>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	8053      	strh	r3, [r2, #2]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	600ffffe 	.word	0x600ffffe

0800179c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <LCD_RD_DATA+0x20>)
 80017a4:	885b      	ldrh	r3, [r3, #2]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	80fb      	strh	r3, [r7, #6]
	return ram;
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	b29b      	uxth	r3, r3
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	600ffffe 	.word	0x600ffffe

080017c0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4604      	mov	r4, r0
 80017c8:	4608      	mov	r0, r1
 80017ca:	4611      	mov	r1, r2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4623      	mov	r3, r4
 80017d0:	80fb      	strh	r3, [r7, #6]
 80017d2:	4603      	mov	r3, r0
 80017d4:	80bb      	strh	r3, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
 80017da:	4613      	mov	r3, r2
 80017dc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80017de:	202a      	movs	r0, #42	; 0x2a
 80017e0:	f7ff ffbc 	bl	800175c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff ffc6 	bl	800177c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ffc0 	bl	800177c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff ffba 	bl	800177c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffb4 	bl	800177c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001814:	202b      	movs	r0, #43	; 0x2b
 8001816:	f7ff ffa1 	bl	800175c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	0a1b      	lsrs	r3, r3, #8
 800181e:	b29b      	uxth	r3, r3
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ffab 	bl	800177c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ffa5 	bl	800177c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8001832:	883b      	ldrh	r3, [r7, #0]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff9f 	bl	800177c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800183e:	883b      	ldrh	r3, [r7, #0]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff99 	bl	800177c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800184a:	202c      	movs	r0, #44	; 0x2c
 800184c:	f7ff ff86 	bl	800175c <LCD_WR_REG>
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	b29b      	uxth	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <lcd_Clear+0x70>)
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <lcd_Clear+0x70>)
 800187c:	885b      	ldrh	r3, [r3, #2]
 800187e:	3b01      	subs	r3, #1
 8001880:	b29b      	uxth	r3, r3
 8001882:	2100      	movs	r1, #0
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff ff9b 	bl	80017c0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800188a:	2300      	movs	r3, #0
 800188c:	81fb      	strh	r3, [r7, #14]
 800188e:	e011      	b.n	80018b4 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001890:	2300      	movs	r3, #0
 8001892:	81bb      	strh	r3, [r7, #12]
 8001894:	e006      	b.n	80018a4 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff6f 	bl	800177c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800189e:	89bb      	ldrh	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	81bb      	strh	r3, [r7, #12]
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <lcd_Clear+0x70>)
 80018a6:	885b      	ldrh	r3, [r3, #2]
 80018a8:	89ba      	ldrh	r2, [r7, #12]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d3f3      	bcc.n	8001896 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	3301      	adds	r3, #1
 80018b2:	81fb      	strh	r3, [r7, #14]
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <lcd_Clear+0x70>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	89fa      	ldrh	r2, [r7, #14]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3e8      	bcc.n	8001890 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 80018be:	bf00      	nop
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000178 	.word	0x20000178

080018cc <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	88b9      	ldrh	r1, [r7, #4]
 80018f8:	88f8      	ldrh	r0, [r7, #6]
 80018fa:	f7ff ff61 	bl	80017c0 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	81fb      	strh	r3, [r7, #14]
 8001902:	e010      	b.n	8001926 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001904:	88fb      	ldrh	r3, [r7, #6]
 8001906:	81bb      	strh	r3, [r7, #12]
 8001908:	e006      	b.n	8001918 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800190a:	8c3b      	ldrh	r3, [r7, #32]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff35 	bl	800177c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001912:	89bb      	ldrh	r3, [r7, #12]
 8001914:	3301      	adds	r3, #1
 8001916:	81bb      	strh	r3, [r7, #12]
 8001918:	89ba      	ldrh	r2, [r7, #12]
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	429a      	cmp	r2, r3
 800191e:	d3f4      	bcc.n	800190a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	3301      	adds	r3, #1
 8001924:	81fb      	strh	r3, [r7, #14]
 8001926:	89fa      	ldrh	r2, [r7, #14]
 8001928:	883b      	ldrh	r3, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d3ea      	bcc.n	8001904 <lcd_Fill+0x38>
		}
	}
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
 8001942:	460b      	mov	r3, r1
 8001944:	80bb      	strh	r3, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	88fa      	ldrh	r2, [r7, #6]
 800194e:	88b9      	ldrh	r1, [r7, #4]
 8001950:	88f8      	ldrh	r0, [r7, #6]
 8001952:	f7ff ff35 	bl	80017c0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff0f 	bl	800177c <LCD_WR_DATA>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	4604      	mov	r4, r0
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4623      	mov	r3, r4
 8001978:	80fb      	strh	r3, [r7, #6]
 800197a:	4603      	mov	r3, r0
 800197c:	80bb      	strh	r3, [r7, #4]
 800197e:	460b      	mov	r3, r1
 8001980:	70fb      	strb	r3, [r7, #3]
 8001982:	4613      	mov	r3, r2
 8001984:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001986:	2300      	movs	r3, #0
 8001988:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800198e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bf14      	ite	ne
 80019aa:	2301      	movne	r3, #1
 80019ac:	2300      	moveq	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	fb12 f303 	smulbb	r3, r2, r3
 80019be:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	3b20      	subs	r3, #32
 80019c4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	4413      	add	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	3b01      	subs	r3, #1
 80019d2:	b29c      	uxth	r4, r3
 80019d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019d8:	b29a      	uxth	r2, r3
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	88b9      	ldrh	r1, [r7, #4]
 80019e6:	88f8      	ldrh	r0, [r7, #6]
 80019e8:	4622      	mov	r2, r4
 80019ea:	f7ff fee9 	bl	80017c0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	827b      	strh	r3, [r7, #18]
 80019f2:	e07a      	b.n	8001aea <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80019f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d028      	beq.n	8001a4e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 80019fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	d108      	bne.n	8001a16 <lcd_ShowChar+0xae>
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	8a7b      	ldrh	r3, [r7, #18]
 8001a08:	493c      	ldr	r1, [pc, #240]	; (8001afc <lcd_ShowChar+0x194>)
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	440a      	add	r2, r1
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	75fb      	strb	r3, [r7, #23]
 8001a14:	e01b      	b.n	8001a4e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001a16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a1a:	2b18      	cmp	r3, #24
 8001a1c:	d10b      	bne.n	8001a36 <lcd_ShowChar+0xce>
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	8a79      	ldrh	r1, [r7, #18]
 8001a22:	4837      	ldr	r0, [pc, #220]	; (8001b00 <lcd_ShowChar+0x198>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	4403      	add	r3, r0
 8001a2e:	440b      	add	r3, r1
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	75fb      	strb	r3, [r7, #23]
 8001a34:	e00b      	b.n	8001a4e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001a36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	d15a      	bne.n	8001af4 <lcd_ShowChar+0x18c>
 8001a3e:	78fa      	ldrb	r2, [r7, #3]
 8001a40:	8a7b      	ldrh	r3, [r7, #18]
 8001a42:	4930      	ldr	r1, [pc, #192]	; (8001b04 <lcd_ShowChar+0x19c>)
 8001a44:	0192      	lsls	r2, r2, #6
 8001a46:	440a      	add	r2, r1
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75bb      	strb	r3, [r7, #22]
 8001a52:	e044      	b.n	8001ade <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d120      	bne.n	8001a9e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a5c:	7dfa      	ldrb	r2, [r7, #23]
 8001a5e:	7dbb      	ldrb	r3, [r7, #22]
 8001a60:	fa42 f303 	asr.w	r3, r2, r3
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <lcd_ShowChar+0x10e>
 8001a6c:	883b      	ldrh	r3, [r7, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fe84 	bl	800177c <LCD_WR_DATA>
 8001a74:	e003      	b.n	8001a7e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe7f 	bl	800177c <LCD_WR_DATA>
				m++;
 8001a7e:	7d7b      	ldrb	r3, [r7, #21]
 8001a80:	3301      	adds	r3, #1
 8001a82:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a84:	7d7b      	ldrb	r3, [r7, #21]
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a8c:	fb02 f201 	mul.w	r2, r2, r1
 8001a90:	1a9b      	subs	r3, r3, r2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d11f      	bne.n	8001ad8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	757b      	strb	r3, [r7, #21]
					break;
 8001a9c:	e022      	b.n	8001ae4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a9e:	7dfa      	ldrb	r2, [r7, #23]
 8001aa0:	7dbb      	ldrb	r3, [r7, #22]
 8001aa2:	fa42 f303 	asr.w	r3, r2, r3
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <lcd_ShowChar+0x152>
 8001aae:	883a      	ldrh	r2, [r7, #0]
 8001ab0:	88b9      	ldrh	r1, [r7, #4]
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff3f 	bl	8001938 <lcd_DrawPoint>
				x++;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	3301      	adds	r3, #1
 8001abe:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	8a3b      	ldrh	r3, [r7, #16]
 8001ac4:	1ad2      	subs	r2, r2, r3
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d105      	bne.n	8001ad8 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001acc:	8a3b      	ldrh	r3, [r7, #16]
 8001ace:	80fb      	strh	r3, [r7, #6]
					y++;
 8001ad0:	88bb      	ldrh	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	80bb      	strh	r3, [r7, #4]
					break;
 8001ad6:	e005      	b.n	8001ae4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001ad8:	7dbb      	ldrb	r3, [r7, #22]
 8001ada:	3301      	adds	r3, #1
 8001adc:	75bb      	strb	r3, [r7, #22]
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	2b07      	cmp	r3, #7
 8001ae2:	d9b7      	bls.n	8001a54 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001ae4:	8a7b      	ldrh	r3, [r7, #18]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	827b      	strh	r3, [r7, #18]
 8001aea:	8a7a      	ldrh	r2, [r7, #18]
 8001aec:	89bb      	ldrh	r3, [r7, #12]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d380      	bcc.n	80019f4 <lcd_ShowChar+0x8c>
 8001af2:	e000      	b.n	8001af6 <lcd_ShowChar+0x18e>
		else return;
 8001af4:	bf00      	nop
				}
			}
		}
	}
}
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	0800707c 	.word	0x0800707c
 8001b00:	0800766c 	.word	0x0800766c
 8001b04:	0800883c 	.word	0x0800883c

08001b08 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4613      	mov	r3, r2
 8001b16:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001b1c:	e004      	b.n	8001b28 <mypow+0x20>
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	79bb      	ldrb	r3, [r7, #6]
 8001b2a:	1e5a      	subs	r2, r3, #1
 8001b2c:	71ba      	strb	r2, [r7, #6]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f5      	bne.n	8001b1e <mypow+0x16>
	return result;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af04      	add	r7, sp, #16
 8001b46:	4604      	mov	r4, r0
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4623      	mov	r3, r4
 8001b50:	80fb      	strh	r3, [r7, #6]
 8001b52:	4603      	mov	r3, r0
 8001b54:	80bb      	strh	r3, [r7, #4]
 8001b56:	460b      	mov	r3, r1
 8001b58:	807b      	strh	r3, [r7, #2]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	e059      	b.n	8001c24 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001b70:	887c      	ldrh	r4, [r7, #2]
 8001b72:	787a      	ldrb	r2, [r7, #1]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	4619      	mov	r1, r3
 8001b80:	200a      	movs	r0, #10
 8001b82:	f7ff ffc1 	bl	8001b08 <mypow>
 8001b86:	4603      	mov	r3, r0
 8001b88:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <lcd_ShowIntNum+0xf8>)
 8001b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	1aca      	subs	r2, r1, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d121      	bne.n	8001bec <lcd_ShowIntNum+0xac>
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	787b      	ldrb	r3, [r7, #1]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	da1c      	bge.n	8001bec <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001bb2:	7b3b      	ldrb	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d117      	bne.n	8001be8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	7b7b      	ldrb	r3, [r7, #13]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	fb12 f303 	smulbb	r3, r2, r3
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b298      	uxth	r0, r3
 8001bcc:	8c3a      	ldrh	r2, [r7, #32]
 8001bce:	88b9      	ldrh	r1, [r7, #4]
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	4613      	mov	r3, r2
 8001be0:	2220      	movs	r2, #32
 8001be2:	f7ff fec1 	bl	8001968 <lcd_ShowChar>
				continue;
 8001be6:	e01a      	b.n	8001c1e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	7b7b      	ldrb	r3, [r7, #13]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	fb12 f303 	smulbb	r3, r2, r3
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b298      	uxth	r0, r3
 8001c00:	7b3b      	ldrb	r3, [r7, #12]
 8001c02:	3330      	adds	r3, #48	; 0x30
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	8c3c      	ldrh	r4, [r7, #32]
 8001c08:	88b9      	ldrh	r1, [r7, #4]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4623      	mov	r3, r4
 8001c1a:	f7ff fea5 	bl	8001968 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	3301      	adds	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	787b      	ldrb	r3, [r7, #1]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d3a1      	bcc.n	8001b70 <lcd_ShowIntNum+0x30>
	}
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	cccccccd 	.word	0xcccccccd

08001c3c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d007      	beq.n	8001c66 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <lcd_SetDir+0x44>)
 8001c58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c5c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <lcd_SetDir+0x44>)
 8001c60:	22f0      	movs	r2, #240	; 0xf0
 8001c62:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c64:	e006      	b.n	8001c74 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <lcd_SetDir+0x44>)
 8001c68:	22f0      	movs	r2, #240	; 0xf0
 8001c6a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <lcd_SetDir+0x44>)
 8001c6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c72:	805a      	strh	r2, [r3, #2]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	20000178 	.word	0x20000178

08001c84 <lcd_init>:


void lcd_init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8e:	48aa      	ldr	r0, [pc, #680]	; (8001f38 <lcd_init+0x2b4>)
 8001c90:	f001 fa2a 	bl	80030e8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c98:	f000 fec2 	bl	8002a20 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca2:	48a5      	ldr	r0, [pc, #660]	; (8001f38 <lcd_init+0x2b4>)
 8001ca4:	f001 fa20 	bl	80030e8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001ca8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cac:	f000 feb8 	bl	8002a20 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff ffc3 	bl	8001c3c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001cb6:	20d3      	movs	r0, #211	; 0xd3
 8001cb8:	f7ff fd50 	bl	800175c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001cbc:	f7ff fd6e 	bl	800179c <LCD_RD_DATA>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b9d      	ldr	r3, [pc, #628]	; (8001f3c <lcd_init+0x2b8>)
 8001cc6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cc8:	f7ff fd68 	bl	800179c <LCD_RD_DATA>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b9a      	ldr	r3, [pc, #616]	; (8001f3c <lcd_init+0x2b8>)
 8001cd2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001cd4:	f7ff fd62 	bl	800179c <LCD_RD_DATA>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b97      	ldr	r3, [pc, #604]	; (8001f3c <lcd_init+0x2b8>)
 8001cde:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001ce0:	4b96      	ldr	r3, [pc, #600]	; (8001f3c <lcd_init+0x2b8>)
 8001ce2:	889b      	ldrh	r3, [r3, #4]
 8001ce4:	021b      	lsls	r3, r3, #8
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b94      	ldr	r3, [pc, #592]	; (8001f3c <lcd_init+0x2b8>)
 8001cea:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001cec:	f7ff fd56 	bl	800179c <LCD_RD_DATA>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b91      	ldr	r3, [pc, #580]	; (8001f3c <lcd_init+0x2b8>)
 8001cf6:	889b      	ldrh	r3, [r3, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	; (8001f3c <lcd_init+0x2b8>)
 8001cfe:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d00:	20cf      	movs	r0, #207	; 0xcf
 8001d02:	f7ff fd2b 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff fd38 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d0c:	20c1      	movs	r0, #193	; 0xc1
 8001d0e:	f7ff fd35 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d12:	2030      	movs	r0, #48	; 0x30
 8001d14:	f7ff fd32 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d18:	20ed      	movs	r0, #237	; 0xed
 8001d1a:	f7ff fd1f 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d1e:	2064      	movs	r0, #100	; 0x64
 8001d20:	f7ff fd2c 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f7ff fd29 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001d2a:	2012      	movs	r0, #18
 8001d2c:	f7ff fd26 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001d30:	2081      	movs	r0, #129	; 0x81
 8001d32:	f7ff fd23 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001d36:	20e8      	movs	r0, #232	; 0xe8
 8001d38:	f7ff fd10 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001d3c:	2085      	movs	r0, #133	; 0x85
 8001d3e:	f7ff fd1d 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001d42:	2010      	movs	r0, #16
 8001d44:	f7ff fd1a 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001d48:	207a      	movs	r0, #122	; 0x7a
 8001d4a:	f7ff fd17 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001d4e:	20cb      	movs	r0, #203	; 0xcb
 8001d50:	f7ff fd04 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d54:	2039      	movs	r0, #57	; 0x39
 8001d56:	f7ff fd11 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d5a:	202c      	movs	r0, #44	; 0x2c
 8001d5c:	f7ff fd0e 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7ff fd0b 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d66:	2034      	movs	r0, #52	; 0x34
 8001d68:	f7ff fd08 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f7ff fd05 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d72:	20f7      	movs	r0, #247	; 0xf7
 8001d74:	f7ff fcf2 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d78:	2020      	movs	r0, #32
 8001d7a:	f7ff fcff 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d7e:	20ea      	movs	r0, #234	; 0xea
 8001d80:	f7ff fcec 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fcf9 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fcf6 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d90:	20c0      	movs	r0, #192	; 0xc0
 8001d92:	f7ff fce3 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d96:	201b      	movs	r0, #27
 8001d98:	f7ff fcf0 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d9c:	20c1      	movs	r0, #193	; 0xc1
 8001d9e:	f7ff fcdd 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff fcea 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001da8:	20c5      	movs	r0, #197	; 0xc5
 8001daa:	f7ff fcd7 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001dae:	2030      	movs	r0, #48	; 0x30
 8001db0:	f7ff fce4 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001db4:	2030      	movs	r0, #48	; 0x30
 8001db6:	f7ff fce1 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001dba:	20c7      	movs	r0, #199	; 0xc7
 8001dbc:	f7ff fcce 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001dc0:	20b7      	movs	r0, #183	; 0xb7
 8001dc2:	f7ff fcdb 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001dc6:	2036      	movs	r0, #54	; 0x36
 8001dc8:	f7ff fcc8 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001dcc:	2008      	movs	r0, #8
 8001dce:	f7ff fcd5 	bl	800177c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001dd2:	203a      	movs	r0, #58	; 0x3a
 8001dd4:	f7ff fcc2 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001dd8:	2055      	movs	r0, #85	; 0x55
 8001dda:	f7ff fccf 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001dde:	20b1      	movs	r0, #177	; 0xb1
 8001de0:	f7ff fcbc 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7ff fcc9 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001dea:	201a      	movs	r0, #26
 8001dec:	f7ff fcc6 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001df0:	20b6      	movs	r0, #182	; 0xb6
 8001df2:	f7ff fcb3 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001df6:	200a      	movs	r0, #10
 8001df8:	f7ff fcc0 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001dfc:	20a2      	movs	r0, #162	; 0xa2
 8001dfe:	f7ff fcbd 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e02:	20f2      	movs	r0, #242	; 0xf2
 8001e04:	f7ff fcaa 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff fcb7 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e0e:	2026      	movs	r0, #38	; 0x26
 8001e10:	f7ff fca4 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff fcb1 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e1a:	20e0      	movs	r0, #224	; 0xe0
 8001e1c:	f7ff fc9e 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e20:	200f      	movs	r0, #15
 8001e22:	f7ff fcab 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001e26:	202a      	movs	r0, #42	; 0x2a
 8001e28:	f7ff fca8 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001e2c:	2028      	movs	r0, #40	; 0x28
 8001e2e:	f7ff fca5 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e32:	2008      	movs	r0, #8
 8001e34:	f7ff fca2 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001e38:	200e      	movs	r0, #14
 8001e3a:	f7ff fc9f 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001e3e:	2008      	movs	r0, #8
 8001e40:	f7ff fc9c 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001e44:	2054      	movs	r0, #84	; 0x54
 8001e46:	f7ff fc99 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001e4a:	20a9      	movs	r0, #169	; 0xa9
 8001e4c:	f7ff fc96 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e50:	2043      	movs	r0, #67	; 0x43
 8001e52:	f7ff fc93 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e56:	200a      	movs	r0, #10
 8001e58:	f7ff fc90 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f7ff fc8d 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fc8a 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fc87 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff fc84 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff fc81 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e7a:	20e1      	movs	r0, #225	; 0xe1
 8001e7c:	f7ff fc6e 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fc7b 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e86:	2015      	movs	r0, #21
 8001e88:	f7ff fc78 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e8c:	2017      	movs	r0, #23
 8001e8e:	f7ff fc75 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e92:	2007      	movs	r0, #7
 8001e94:	f7ff fc72 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e98:	2011      	movs	r0, #17
 8001e9a:	f7ff fc6f 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e9e:	2006      	movs	r0, #6
 8001ea0:	f7ff fc6c 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001ea4:	202b      	movs	r0, #43	; 0x2b
 8001ea6:	f7ff fc69 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001eaa:	2056      	movs	r0, #86	; 0x56
 8001eac:	f7ff fc66 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001eb0:	203c      	movs	r0, #60	; 0x3c
 8001eb2:	f7ff fc63 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001eb6:	2005      	movs	r0, #5
 8001eb8:	f7ff fc60 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001ebc:	2010      	movs	r0, #16
 8001ebe:	f7ff fc5d 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f7ff fc5a 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ec8:	203f      	movs	r0, #63	; 0x3f
 8001eca:	f7ff fc57 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001ece:	203f      	movs	r0, #63	; 0x3f
 8001ed0:	f7ff fc54 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ed4:	200f      	movs	r0, #15
 8001ed6:	f7ff fc51 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001eda:	202b      	movs	r0, #43	; 0x2b
 8001edc:	f7ff fc3e 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fc4b 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff fc48 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff fc45 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ef2:	203f      	movs	r0, #63	; 0x3f
 8001ef4:	f7ff fc42 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ef8:	202a      	movs	r0, #42	; 0x2a
 8001efa:	f7ff fc2f 	bl	800175c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001efe:	2000      	movs	r0, #0
 8001f00:	f7ff fc3c 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fc39 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f7ff fc36 	bl	800177c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f10:	20ef      	movs	r0, #239	; 0xef
 8001f12:	f7ff fc33 	bl	800177c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f16:	2011      	movs	r0, #17
 8001f18:	f7ff fc20 	bl	800175c <LCD_WR_REG>
	HAL_Delay(120);
 8001f1c:	2078      	movs	r0, #120	; 0x78
 8001f1e:	f000 fd7f 	bl	8002a20 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f22:	2029      	movs	r0, #41	; 0x29
 8001f24:	f7ff fc1a 	bl	800175c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2e:	4804      	ldr	r0, [pc, #16]	; (8001f40 <lcd_init+0x2bc>)
 8001f30:	f001 f8da 	bl	80030e8 <HAL_GPIO_WritePin>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	20000178 	.word	0x20000178
 8001f40:	40020000 	.word	0x40020000

08001f44 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f44:	b590      	push	{r4, r7, lr}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af04      	add	r7, sp, #16
 8001f4a:	60ba      	str	r2, [r7, #8]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	81fb      	strh	r3, [r7, #14]
 8001f52:	460b      	mov	r3, r1
 8001f54:	81bb      	strh	r3, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f5a:	89fb      	ldrh	r3, [r7, #14]
 8001f5c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f62:	e048      	b.n	8001ff6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d145      	bne.n	8001ff6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f6a:	89fa      	ldrh	r2, [r7, #14]
 8001f6c:	4b26      	ldr	r3, [pc, #152]	; (8002008 <lcd_ShowStr+0xc4>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	1acb      	subs	r3, r1, r3
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dc3f      	bgt.n	8002000 <lcd_ShowStr+0xbc>
 8001f80:	89ba      	ldrh	r2, [r7, #12]
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <lcd_ShowStr+0xc4>)
 8001f84:	885b      	ldrh	r3, [r3, #2]
 8001f86:	4619      	mov	r1, r3
 8001f88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f8c:	1acb      	subs	r3, r1, r3
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	dc36      	bgt.n	8002000 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b80      	cmp	r3, #128	; 0x80
 8001f98:	d902      	bls.n	8001fa0 <lcd_ShowStr+0x5c>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
 8001f9e:	e02a      	b.n	8001ff6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b0d      	cmp	r3, #13
 8001fa6:	d10b      	bne.n	8001fc0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	89bb      	ldrh	r3, [r7, #12]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001fb4:	8abb      	ldrh	r3, [r7, #20]
 8001fb6:	81fb      	strh	r3, [r7, #14]
					str++;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	e017      	b.n	8001ff0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	88fc      	ldrh	r4, [r7, #6]
 8001fc6:	89b9      	ldrh	r1, [r7, #12]
 8001fc8:	89f8      	ldrh	r0, [r7, #14]
 8001fca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4623      	mov	r3, r4
 8001fdc:	f7ff fcc4 	bl	8001968 <lcd_ShowChar>
					x+=sizey/2;
 8001fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	89fb      	ldrh	r3, [r7, #14]
 8001fec:	4413      	add	r3, r2
 8001fee:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1b2      	bne.n	8001f64 <lcd_ShowStr+0x20>
 8001ffe:	e000      	b.n	8002002 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002000:	bf00      	nop
			}
		}
	}
}
 8002002:	371c      	adds	r7, #28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	20000178 	.word	0x20000178

0800200c <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af04      	add	r7, sp, #16
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	461a      	mov	r2, r3
 8002016:	4603      	mov	r3, r0
 8002018:	81fb      	strh	r3, [r7, #14]
 800201a:	460b      	mov	r3, r1
 800201c:	81bb      	strh	r3, [r7, #12]
 800201e:	4613      	mov	r3, r2
 8002020:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8002022:	68b8      	ldr	r0, [r7, #8]
 8002024:	f7fe f8d0 	bl	80001c8 <strlen>
 8002028:	4603      	mov	r3, r0
 800202a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <lcd_StrCenter+0x60>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	0fda      	lsrs	r2, r3, #31
 800203a:	4413      	add	r3, r2
 800203c:	105b      	asrs	r3, r3, #1
 800203e:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8002040:	89fa      	ldrh	r2, [r7, #14]
 8002042:	8abb      	ldrh	r3, [r7, #20]
 8002044:	4413      	add	r3, r2
 8002046:	b298      	uxth	r0, r3
 8002048:	88fa      	ldrh	r2, [r7, #6]
 800204a:	89b9      	ldrh	r1, [r7, #12]
 800204c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002050:	9302      	str	r3, [sp, #8]
 8002052:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	8c3b      	ldrh	r3, [r7, #32]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	f7ff ff70 	bl	8001f44 <lcd_ShowStr>
}
 8002064:	bf00      	nop
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000178 	.word	0x20000178

08002070 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002074:	2201      	movs	r2, #1
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <led7_init+0x14>)
 800207a:	f001 f835 	bl	80030e8 <HAL_GPIO_WritePin>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021800 	.word	0x40021800

08002088 <led7_Scan>:

void led7_Scan(){
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800208c:	4b3f      	ldr	r3, [pc, #252]	; (800218c <led7_Scan+0x104>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b3d      	ldr	r3, [pc, #244]	; (800218c <led7_Scan+0x104>)
 8002096:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <led7_Scan+0x108>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a3d      	ldr	r2, [pc, #244]	; (8002194 <led7_Scan+0x10c>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	4b39      	ldr	r3, [pc, #228]	; (800218c <led7_Scan+0x104>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	4b36      	ldr	r3, [pc, #216]	; (800218c <led7_Scan+0x104>)
 80020b2:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <led7_Scan+0x108>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d847      	bhi.n	800214c <led7_Scan+0xc4>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <led7_Scan+0x3c>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020f3 	.word	0x080020f3
 80020cc:	08002111 	.word	0x08002111
 80020d0:	0800212f 	.word	0x0800212f
	case 0:
		spi_buffer |= 0x00b0;
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <led7_Scan+0x104>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <led7_Scan+0x104>)
 80020e0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <led7_Scan+0x104>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <led7_Scan+0x104>)
 80020ee:	801a      	strh	r2, [r3, #0]
		break;
 80020f0:	e02d      	b.n	800214e <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <led7_Scan+0x104>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b23      	ldr	r3, [pc, #140]	; (800218c <led7_Scan+0x104>)
 80020fe:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <led7_Scan+0x104>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	f023 0320 	bic.w	r3, r3, #32
 8002108:	b29a      	uxth	r2, r3
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <led7_Scan+0x104>)
 800210c:	801a      	strh	r2, [r3, #0]
		break;
 800210e:	e01e      	b.n	800214e <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <led7_Scan+0x104>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002118:	b29a      	uxth	r2, r3
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <led7_Scan+0x104>)
 800211c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <led7_Scan+0x104>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	f023 0310 	bic.w	r3, r3, #16
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <led7_Scan+0x104>)
 800212a:	801a      	strh	r2, [r3, #0]
		break;
 800212c:	e00f      	b.n	800214e <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <led7_Scan+0x104>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <led7_Scan+0x104>)
 800213a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <led7_Scan+0x104>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <led7_Scan+0x104>)
 8002148:	801a      	strh	r2, [r3, #0]
		break;
 800214a:	e000      	b.n	800214e <led7_Scan+0xc6>
	default:
		break;
 800214c:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <led7_Scan+0x108>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	425a      	negs	r2, r3
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	f002 0203 	and.w	r2, r2, #3
 800215e:	bf58      	it	pl
 8002160:	4253      	negpl	r3, r2
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <led7_Scan+0x108>)
 8002164:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2140      	movs	r1, #64	; 0x40
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <led7_Scan+0x110>)
 800216c:	f000 ffbc 	bl	80030e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002170:	2301      	movs	r3, #1
 8002172:	2202      	movs	r2, #2
 8002174:	4905      	ldr	r1, [pc, #20]	; (800218c <led7_Scan+0x104>)
 8002176:	4809      	ldr	r0, [pc, #36]	; (800219c <led7_Scan+0x114>)
 8002178:	f002 fca7 	bl	8004aca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800217c:	2201      	movs	r2, #1
 800217e:	2140      	movs	r1, #64	; 0x40
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <led7_Scan+0x110>)
 8002182:	f000 ffb1 	bl	80030e8 <HAL_GPIO_WritePin>
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000024 	.word	0x20000024
 8002190:	20000090 	.word	0x20000090
 8002194:	20000020 	.word	0x20000020
 8002198:	40021800 	.word	0x40021800
 800219c:	200001b4 	.word	0x200001b4

080021a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021a4:	f000 fbca 	bl	800293c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a8:	f000 f830 	bl	800220c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ac:	f7ff f968 	bl	8001480 <MX_GPIO_Init>
  MX_TIM2_Init();
 80021b0:	f000 fa44 	bl	800263c <MX_TIM2_Init>
  MX_SPI1_Init();
 80021b4:	f000 f94c 	bl	8002450 <MX_SPI1_Init>
  MX_FSMC_Init();
 80021b8:	f7ff f892 	bl	80012e0 <MX_FSMC_Init>
  MX_I2C1_Init();
 80021bc:	f7ff fa58 	bl	8001670 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021c0:	f000 fada 	bl	8002778 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80021c4:	f000 f88c 	bl	80022e0 <system_init>
  lcd_Clear(BLACK);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7ff fb45 	bl	8001858 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 80021ce:	bf00      	nop
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <main+0x64>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0fb      	beq.n	80021d0 <main+0x30>
	  flag_timer2 = 0;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <main+0x64>)
 80021da:	2200      	movs	r2, #0
 80021dc:	801a      	strh	r2, [r3, #0]
	  timer1++;
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <main+0x68>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a08      	ldr	r2, [pc, #32]	; (8002208 <main+0x68>)
 80021e6:	6013      	str	r3, [r2, #0]
	  if(timer1 >= 200)
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <main+0x68>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2bc7      	cmp	r3, #199	; 0xc7
 80021ee:	dd02      	ble.n	80021f6 <main+0x56>
		  timer1 = 0;
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <main+0x68>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
	  button_Scan();
 80021f6:	f7fe f977 	bl	80004e8 <button_Scan>
	  test_LedDebug();
 80021fa:	f000 f893 	bl	8002324 <test_LedDebug>
	  fsm_mode();
 80021fe:	f7fe feff 	bl	8001000 <fsm_mode>
	  while(!flag_timer2);
 8002202:	e7e4      	b.n	80021ce <main+0x2e>
 8002204:	2000009c 	.word	0x2000009c
 8002208:	2000005c 	.word	0x2000005c

0800220c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b094      	sub	sp, #80	; 0x50
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	f107 0320 	add.w	r3, r7, #32
 8002216:	2230      	movs	r2, #48	; 0x30
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f004 fef6 	bl	800700c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <SystemClock_Config+0xcc>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <SystemClock_Config+0xcc>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6413      	str	r3, [r2, #64]	; 0x40
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <SystemClock_Config+0xcc>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	4b22      	ldr	r3, [pc, #136]	; (80022dc <SystemClock_Config+0xd0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a21      	ldr	r2, [pc, #132]	; (80022dc <SystemClock_Config+0xd0>)
 8002256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <SystemClock_Config+0xd0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800226c:	2301      	movs	r3, #1
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002270:	2310      	movs	r3, #16
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002274:	2302      	movs	r3, #2
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002278:	2300      	movs	r3, #0
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800227c:	2308      	movs	r3, #8
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002280:	23a8      	movs	r3, #168	; 0xa8
 8002282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002284:	2302      	movs	r3, #2
 8002286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002288:	2304      	movs	r3, #4
 800228a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228c:	f107 0320 	add.w	r3, r7, #32
 8002290:	4618      	mov	r0, r3
 8002292:	f001 ff1d 	bl	80040d0 <HAL_RCC_OscConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800229c:	f000 f866 	bl	800236c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a0:	230f      	movs	r3, #15
 80022a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a4:	2302      	movs	r3, #2
 80022a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80022b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2105      	movs	r1, #5
 80022be:	4618      	mov	r0, r3
 80022c0:	f002 f97e 	bl	80045c0 <HAL_RCC_ClockConfig>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80022ca:	f000 f84f 	bl	800236c <Error_Handler>
  }
}
 80022ce:	bf00      	nop
 80022d0:	3750      	adds	r7, #80	; 0x50
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000

080022e0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2120      	movs	r1, #32
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <system_init+0x40>)
 80022ea:	f000 fefd 	bl	80030e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2140      	movs	r1, #64	; 0x40
 80022f2:	480b      	ldr	r0, [pc, #44]	; (8002320 <system_init+0x40>)
 80022f4:	f000 fef8 	bl	80030e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2110      	movs	r1, #16
 80022fc:	4808      	ldr	r0, [pc, #32]	; (8002320 <system_init+0x40>)
 80022fe:	f000 fef3 	bl	80030e8 <HAL_GPIO_WritePin>
	  timer_init();
 8002302:	f000 f839 	bl	8002378 <timer_init>
	  led7_init();
 8002306:	f7ff feb3 	bl	8002070 <led7_init>
	  button_init();
 800230a:	f7fe f8e1 	bl	80004d0 <button_init>
	  lcd_init();
 800230e:	f7ff fcb9 	bl	8001c84 <lcd_init>
	  uart_init_rs232();
 8002312:	f000 fa05 	bl	8002720 <uart_init_rs232>
	  setTimer2(50);
 8002316:	2032      	movs	r0, #50	; 0x32
 8002318:	f000 f838 	bl	800238c <setTimer2>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug(){
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <test_LedDebug+0x3c>)
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <test_LedDebug+0x40>)
 8002330:	fb83 1302 	smull	r1, r3, r3, r2
 8002334:	10d9      	asrs	r1, r3, #3
 8002336:	17d3      	asrs	r3, r2, #31
 8002338:	1ac9      	subs	r1, r1, r3
 800233a:	460b      	mov	r3, r1
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	1ad1      	subs	r1, r2, r3
 8002344:	b28a      	uxth	r2, r1
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <test_LedDebug+0x3c>)
 8002348:	801a      	strh	r2, [r3, #0]
	if(count_led_debug == 0){
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <test_LedDebug+0x3c>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002352:	2110      	movs	r1, #16
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <test_LedDebug+0x44>)
 8002356:	f000 fee0 	bl	800311a <HAL_GPIO_TogglePin>
	}
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000094 	.word	0x20000094
 8002364:	66666667 	.word	0x66666667
 8002368:	40021000 	.word	0x40021000

0800236c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002370:	b672      	cpsid	i
}
 8002372:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002374:	e7fe      	b.n	8002374 <Error_Handler+0x8>
	...

08002378 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <timer_init+0x10>)
 800237e:	f003 f957 	bl	8005630 <HAL_TIM_Base_Start_IT>
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000020c 	.word	0x2000020c

0800238c <setTimer2>:
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}

void setTimer2(uint16_t duration)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE;
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <setTimer2+0x2c>)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <setTimer2+0x2c>)
 800239e:	881a      	ldrh	r2, [r3, #0]
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <setTimer2+0x30>)
 80023a2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <setTimer2+0x34>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	801a      	strh	r2, [r3, #0]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	200000a0 	.word	0x200000a0
 80023bc:	2000009e 	.word	0x2000009e
 80023c0:	2000009c 	.word	0x2000009c

080023c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d12b      	bne.n	800242e <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		if(timer1_counter > 0)
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d010      	beq.n	8002400 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timer1_counter--;
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023e8:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0)
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				flag_timer1 = 1;
 80023f2:	4b12      	ldr	r3, [pc, #72]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80023fa:	881a      	ldrh	r2, [r3, #0]
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023fe:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0)
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d010      	beq.n	800242a <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer2_counter--;
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002412:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0)
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d106      	bne.n	800242a <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_timer2 = 1;
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800241e:	2201      	movs	r2, #1
 8002420:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002428:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800242a:	f7ff fe2d 	bl	8002088 <led7_Scan>
	}
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000098 	.word	0x20000098
 800243c:	20000096 	.word	0x20000096
 8002440:	2000009a 	.word	0x2000009a
 8002444:	2000009e 	.word	0x2000009e
 8002448:	2000009c 	.word	0x2000009c
 800244c:	200000a0 	.word	0x200000a0

08002450 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002456:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <MX_SPI1_Init+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_SPI1_Init+0x64>)
 800245c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002462:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_SPI1_Init+0x64>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_SPI1_Init+0x64>)
 800247c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002480:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002484:	2200      	movs	r2, #0
 8002486:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MX_SPI1_Init+0x64>)
 800248a:	2200      	movs	r2, #0
 800248c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002490:	2200      	movs	r2, #0
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_SPI1_Init+0x64>)
 8002496:	2200      	movs	r2, #0
 8002498:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_SPI1_Init+0x64>)
 800249c:	220a      	movs	r2, #10
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_SPI1_Init+0x64>)
 80024a2:	f002 fa89 	bl	80049b8 <HAL_SPI_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80024ac:	f7ff ff5e 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200001b4 	.word	0x200001b4
 80024b8:	40013000 	.word	0x40013000

080024bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_SPI_MspInit+0x84>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d12b      	bne.n	8002536 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_SPI_MspInit+0x88>)
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_SPI_MspInit+0x88>)
 80024e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ec:	6453      	str	r3, [r2, #68]	; 0x44
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_SPI_MspInit+0x88>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_SPI_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_SPI_MspInit+0x88>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_SPI_MspInit+0x88>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002516:	2338      	movs	r3, #56	; 0x38
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002526:	2305      	movs	r3, #5
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_SPI_MspInit+0x8c>)
 8002532:	f000 fc3d 	bl	8002db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40013000 	.word	0x40013000
 8002544:	40023800 	.word	0x40023800
 8002548:	40020400 	.word	0x40020400

0800254c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <HAL_MspInit+0x4c>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <HAL_MspInit+0x4c>)
 800255c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_MspInit+0x4c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_MspInit+0x4c>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800

0800259c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <NMI_Handler+0x4>

080025a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a2:	b480      	push	{r7}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025a6:	e7fe      	b.n	80025a6 <HardFault_Handler+0x4>

080025a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ac:	e7fe      	b.n	80025ac <MemManage_Handler+0x4>

080025ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <BusFault_Handler+0x4>

080025b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <UsageFault_Handler+0x4>

080025ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e8:	f000 f9fa 	bl	80029e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <TIM2_IRQHandler+0x10>)
 80025f6:	f003 f88b 	bl	8005710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	2000020c 	.word	0x2000020c

08002604 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <USART1_IRQHandler+0x10>)
 800260a:	f003 fd53 	bl	80060b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000254 	.word	0x20000254

08002618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002650:	463b      	mov	r3, r7
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <MX_TIM2_Init+0x94>)
 800265a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800265e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <MX_TIM2_Init+0x94>)
 8002662:	f240 3247 	movw	r2, #839	; 0x347
 8002666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <MX_TIM2_Init+0x94>)
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <MX_TIM2_Init+0x94>)
 8002670:	2263      	movs	r2, #99	; 0x63
 8002672:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <MX_TIM2_Init+0x94>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_TIM2_Init+0x94>)
 800267c:	2200      	movs	r2, #0
 800267e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002680:	4813      	ldr	r0, [pc, #76]	; (80026d0 <MX_TIM2_Init+0x94>)
 8002682:	f002 ff85 	bl	8005590 <HAL_TIM_Base_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800268c:	f7ff fe6e 	bl	800236c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002694:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	4619      	mov	r1, r3
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <MX_TIM2_Init+0x94>)
 800269e:	f003 f93f 	bl	8005920 <HAL_TIM_ConfigClockSource>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80026a8:	f7ff fe60 	bl	800236c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026b4:	463b      	mov	r3, r7
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_TIM2_Init+0x94>)
 80026ba:	f003 fb5b 	bl	8005d74 <HAL_TIMEx_MasterConfigSynchronization>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80026c4:	f7ff fe52 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000020c 	.word	0x2000020c

080026d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e4:	d115      	bne.n	8002712 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a0b      	ldr	r2, [pc, #44]	; (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <HAL_TIM_Base_MspInit+0x48>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2100      	movs	r1, #0
 8002706:	201c      	movs	r0, #28
 8002708:	f000 fa89 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800270c:	201c      	movs	r0, #28
 800270e:	f000 faa2 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002724:	2201      	movs	r2, #1
 8002726:	4903      	ldr	r1, [pc, #12]	; (8002734 <uart_init_rs232+0x14>)
 8002728:	4803      	ldr	r0, [pc, #12]	; (8002738 <uart_init_rs232+0x18>)
 800272a:	f003 fc92 	bl	8006052 <HAL_UART_Receive_IT>
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200000a2 	.word	0x200000a2
 8002738:	20000254 	.word	0x20000254

0800273c <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_UART_RxCpltCallback+0x30>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10a      	bne.n	8002764 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800274e:	230a      	movs	r3, #10
 8002750:	2201      	movs	r2, #1
 8002752:	4907      	ldr	r1, [pc, #28]	; (8002770 <HAL_UART_RxCpltCallback+0x34>)
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <HAL_UART_RxCpltCallback+0x38>)
 8002756:	f003 fbea 	bl	8005f2e <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800275a:	2201      	movs	r2, #1
 800275c:	4904      	ldr	r1, [pc, #16]	; (8002770 <HAL_UART_RxCpltCallback+0x34>)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <HAL_UART_RxCpltCallback+0x38>)
 8002760:	f003 fc77 	bl	8006052 <HAL_UART_Receive_IT>
	}
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40011000 	.word	0x40011000
 8002770:	200000a2 	.word	0x200000a2
 8002774:	20000254 	.word	0x20000254

08002778 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <MX_USART1_UART_Init+0x50>)
 8002780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 8002784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_USART1_UART_Init+0x4c>)
 80027b0:	f003 fb70 	bl	8005e94 <HAL_UART_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027ba:	f7ff fdd7 	bl	800236c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000254 	.word	0x20000254
 80027c8:	40011000 	.word	0x40011000

080027cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_UART_MspInit+0x94>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d134      	bne.n	8002858 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <HAL_UART_MspInit+0x98>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_UART_MspInit+0x98>)
 80027f8:	f043 0310 	orr.w	r3, r3, #16
 80027fc:	6453      	str	r3, [r2, #68]	; 0x44
 80027fe:	4b19      	ldr	r3, [pc, #100]	; (8002864 <HAL_UART_MspInit+0x98>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_UART_MspInit+0x98>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a14      	ldr	r2, [pc, #80]	; (8002864 <HAL_UART_MspInit+0x98>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b12      	ldr	r3, [pc, #72]	; (8002864 <HAL_UART_MspInit+0x98>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002826:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800282a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002838:	2307      	movs	r3, #7
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	4619      	mov	r1, r3
 8002842:	4809      	ldr	r0, [pc, #36]	; (8002868 <HAL_UART_MspInit+0x9c>)
 8002844:	f000 fab4 	bl	8002db0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2100      	movs	r1, #0
 800284c:	2025      	movs	r0, #37	; 0x25
 800284e:	f000 f9e6 	bl	8002c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002852:	2025      	movs	r0, #37	; 0x25
 8002854:	f000 f9ff 	bl	8002c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40011000 	.word	0x40011000
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000

0800286c <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4413      	add	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	b2da      	uxtb	r2, r3
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4413      	add	r3, r2
 8002890:	b2db      	uxtb	r3, r3
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	4a0d      	ldr	r2, [pc, #52]	; (80028e4 <DEC2BCD+0x44>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	b258      	sxtb	r0, r3
 80028ba:	79fa      	ldrb	r2, [r7, #7]
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <DEC2BCD+0x44>)
 80028be:	fba3 1302 	umull	r1, r3, r3, r2
 80028c2:	08d9      	lsrs	r1, r3, #3
 80028c4:	460b      	mov	r3, r1
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	b25b      	sxtb	r3, r3
 80028d2:	4303      	orrs	r3, r0
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	cccccccd 	.word	0xcccccccd

080028e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002920 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028ec:	480d      	ldr	r0, [pc, #52]	; (8002924 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028ee:	490e      	ldr	r1, [pc, #56]	; (8002928 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028f0:	4a0e      	ldr	r2, [pc, #56]	; (800292c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002904:	4c0b      	ldr	r4, [pc, #44]	; (8002934 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002912:	f7ff fe81 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002916:	f004 fb55 	bl	8006fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800291a:	f7ff fc41 	bl	80021a0 <main>
  bx  lr    
 800291e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002928:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800292c:	0800a024 	.word	0x0800a024
  ldr r2, =_sbss
 8002930:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8002934:	2000029c 	.word	0x2000029c

08002938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC_IRQHandler>
	...

0800293c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0d      	ldr	r2, [pc, #52]	; (800297c <HAL_Init+0x40>)
 8002946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800294a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_Init+0x40>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <HAL_Init+0x40>)
 8002952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_Init+0x40>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_Init+0x40>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002964:	2003      	movs	r0, #3
 8002966:	f000 f94f 	bl	8002c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800296a:	200f      	movs	r0, #15
 800296c:	f000 f808 	bl	8002980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002970:	f7ff fdec 	bl	800254c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023c00 	.word	0x40023c00

08002980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_InitTick+0x54>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_InitTick+0x58>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002996:	fbb3 f3f1 	udiv	r3, r3, r1
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f967 	bl	8002c72 <HAL_SYSTICK_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00e      	b.n	80029cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b0f      	cmp	r3, #15
 80029b2:	d80a      	bhi.n	80029ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b4:	2200      	movs	r2, #0
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f000 f92f 	bl	8002c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029c0:	4a06      	ldr	r2, [pc, #24]	; (80029dc <HAL_InitTick+0x5c>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	e000      	b.n	80029cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20000028 	.word	0x20000028
 80029d8:	20000030 	.word	0x20000030
 80029dc:	2000002c 	.word	0x2000002c

080029e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_IncTick+0x20>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_IncTick+0x24>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4413      	add	r3, r2
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_IncTick+0x24>)
 80029f2:	6013      	str	r3, [r2, #0]
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000030 	.word	0x20000030
 8002a04:	20000298 	.word	0x20000298

08002a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_GetTick+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000298 	.word	0x20000298

08002a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a28:	f7ff ffee 	bl	8002a08 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d005      	beq.n	8002a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_Delay+0x44>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a46:	bf00      	nop
 8002a48:	f7ff ffde 	bl	8002a08 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d8f7      	bhi.n	8002a48 <HAL_Delay+0x28>
  {
  }
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000030 	.word	0x20000030

08002a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a84:	4013      	ands	r3, r2
 8002a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9a:	4a04      	ldr	r2, [pc, #16]	; (8002aac <__NVIC_SetPriorityGrouping+0x44>)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60d3      	str	r3, [r2, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab4:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0a1b      	lsrs	r3, r3, #8
 8002aba:	f003 0307 	and.w	r3, r3, #7
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	db0b      	blt.n	8002af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4907      	ldr	r1, [pc, #28]	; (8002b04 <__NVIC_EnableIRQ+0x38>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2001      	movs	r0, #1
 8002aee:	fa00 f202 	lsl.w	r2, r0, r2
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000e100 	.word	0xe000e100

08002b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	6039      	str	r1, [r7, #0]
 8002b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	db0a      	blt.n	8002b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	490c      	ldr	r1, [pc, #48]	; (8002b54 <__NVIC_SetPriority+0x4c>)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	0112      	lsls	r2, r2, #4
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b30:	e00a      	b.n	8002b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	4908      	ldr	r1, [pc, #32]	; (8002b58 <__NVIC_SetPriority+0x50>)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	440b      	add	r3, r1
 8002b46:	761a      	strb	r2, [r3, #24]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000e100 	.word	0xe000e100
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f1c3 0307 	rsb	r3, r3, #7
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	bf28      	it	cs
 8002b7a:	2304      	movcs	r3, #4
 8002b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3304      	adds	r3, #4
 8002b82:	2b06      	cmp	r3, #6
 8002b84:	d902      	bls.n	8002b8c <NVIC_EncodePriority+0x30>
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3b03      	subs	r3, #3
 8002b8a:	e000      	b.n	8002b8e <NVIC_EncodePriority+0x32>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	f04f 32ff 	mov.w	r2, #4294967295
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	43d9      	mvns	r1, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	4313      	orrs	r3, r2
         );
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd4:	d301      	bcc.n	8002bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e00f      	b.n	8002bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bda:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <SysTick_Config+0x40>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be2:	210f      	movs	r1, #15
 8002be4:	f04f 30ff 	mov.w	r0, #4294967295
 8002be8:	f7ff ff8e 	bl	8002b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <SysTick_Config+0x40>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <SysTick_Config+0x40>)
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	e000e010 	.word	0xe000e010

08002c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ff29 	bl	8002a68 <__NVIC_SetPriorityGrouping>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff3e 	bl	8002ab0 <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff8e 	bl	8002b5c <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5d 	bl	8002b08 <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff31 	bl	8002acc <__NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffa2 	bl	8002bc4 <SysTick_Config>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff feb6 	bl	8002a08 <HAL_GetTick>
 8002c9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d008      	beq.n	8002cbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e052      	b.n	8002d62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0216 	bic.w	r2, r2, #22
 8002cca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d103      	bne.n	8002cec <HAL_DMA_Abort+0x62>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0208 	bic.w	r2, r2, #8
 8002cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0c:	e013      	b.n	8002d36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d0e:	f7ff fe7b 	bl	8002a08 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d90c      	bls.n	8002d36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e015      	b.n	8002d62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e4      	bne.n	8002d0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	223f      	movs	r2, #63	; 0x3f
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d004      	beq.n	8002d88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e00c      	b.n	8002da2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0201 	bic.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	e16b      	b.n	80030a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	f040 815a 	bne.w	800309e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d005      	beq.n	8002e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d130      	bne.n	8002e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e38:	2201      	movs	r2, #1
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 0201 	and.w	r2, r3, #1
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d017      	beq.n	8002ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0303 	and.w	r3, r3, #3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d123      	bne.n	8002ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	08da      	lsrs	r2, r3, #3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3208      	adds	r2, #8
 8002eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	220f      	movs	r2, #15
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	08da      	lsrs	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3208      	adds	r2, #8
 8002eee:	69b9      	ldr	r1, [r7, #24]
 8002ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	2203      	movs	r2, #3
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0203 	and.w	r2, r3, #3
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80b4 	beq.w	800309e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b60      	ldr	r3, [pc, #384]	; (80030bc <HAL_GPIO_Init+0x30c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4a5f      	ldr	r2, [pc, #380]	; (80030bc <HAL_GPIO_Init+0x30c>)
 8002f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f44:	6453      	str	r3, [r2, #68]	; 0x44
 8002f46:	4b5d      	ldr	r3, [pc, #372]	; (80030bc <HAL_GPIO_Init+0x30c>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f52:	4a5b      	ldr	r2, [pc, #364]	; (80030c0 <HAL_GPIO_Init+0x310>)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	3302      	adds	r3, #2
 8002f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	220f      	movs	r2, #15
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4013      	ands	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a52      	ldr	r2, [pc, #328]	; (80030c4 <HAL_GPIO_Init+0x314>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d02b      	beq.n	8002fd6 <HAL_GPIO_Init+0x226>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a51      	ldr	r2, [pc, #324]	; (80030c8 <HAL_GPIO_Init+0x318>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d025      	beq.n	8002fd2 <HAL_GPIO_Init+0x222>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a50      	ldr	r2, [pc, #320]	; (80030cc <HAL_GPIO_Init+0x31c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01f      	beq.n	8002fce <HAL_GPIO_Init+0x21e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4f      	ldr	r2, [pc, #316]	; (80030d0 <HAL_GPIO_Init+0x320>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d019      	beq.n	8002fca <HAL_GPIO_Init+0x21a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4e      	ldr	r2, [pc, #312]	; (80030d4 <HAL_GPIO_Init+0x324>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <HAL_GPIO_Init+0x216>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4d      	ldr	r2, [pc, #308]	; (80030d8 <HAL_GPIO_Init+0x328>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00d      	beq.n	8002fc2 <HAL_GPIO_Init+0x212>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4c      	ldr	r2, [pc, #304]	; (80030dc <HAL_GPIO_Init+0x32c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d007      	beq.n	8002fbe <HAL_GPIO_Init+0x20e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	; (80030e0 <HAL_GPIO_Init+0x330>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d101      	bne.n	8002fba <HAL_GPIO_Init+0x20a>
 8002fb6:	2307      	movs	r3, #7
 8002fb8:	e00e      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	e00c      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fbe:	2306      	movs	r3, #6
 8002fc0:	e00a      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	e008      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e004      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_GPIO_Init+0x228>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f002 0203 	and.w	r2, r2, #3
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	4093      	lsls	r3, r2
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe8:	4935      	ldr	r1, [pc, #212]	; (80030c0 <HAL_GPIO_Init+0x310>)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <HAL_GPIO_Init+0x334>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800301a:	4a32      	ldr	r2, [pc, #200]	; (80030e4 <HAL_GPIO_Init+0x334>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003020:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_GPIO_Init+0x334>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003044:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <HAL_GPIO_Init+0x334>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <HAL_GPIO_Init+0x334>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800306e:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_GPIO_Init+0x334>)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003074:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_GPIO_Init+0x334>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003098:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <HAL_GPIO_Init+0x334>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	f67f ae90 	bls.w	8002dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3724      	adds	r7, #36	; 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40013800 	.word	0x40013800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40021400 	.word	0x40021400
 80030dc:	40021800 	.word	0x40021800
 80030e0:	40021c00 	.word	0x40021c00
 80030e4:	40013c00 	.word	0x40013c00

080030e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	807b      	strh	r3, [r7, #2]
 80030f4:	4613      	mov	r3, r2
 80030f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f8:	787b      	ldrb	r3, [r7, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fe:	887a      	ldrh	r2, [r7, #2]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003104:	e003      	b.n	800310e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003106:	887b      	ldrh	r3, [r7, #2]
 8003108:	041a      	lsls	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	619a      	str	r2, [r3, #24]
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800312c:	887a      	ldrh	r2, [r7, #2]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4013      	ands	r3, r2
 8003132:	041a      	lsls	r2, r3, #16
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	43d9      	mvns	r1, r3
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	400b      	ands	r3, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e12b      	b.n	80033ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe faa8 	bl	80016cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	; 0x24
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031b4:	f001 fbd8 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 80031b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a81      	ldr	r2, [pc, #516]	; (80033c4 <HAL_I2C_Init+0x274>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d807      	bhi.n	80031d4 <HAL_I2C_Init+0x84>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a80      	ldr	r2, [pc, #512]	; (80033c8 <HAL_I2C_Init+0x278>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	bf94      	ite	ls
 80031cc:	2301      	movls	r3, #1
 80031ce:	2300      	movhi	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e006      	b.n	80031e2 <HAL_I2C_Init+0x92>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a7d      	ldr	r2, [pc, #500]	; (80033cc <HAL_I2C_Init+0x27c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	bf94      	ite	ls
 80031dc:	2301      	movls	r3, #1
 80031de:	2300      	movhi	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0e7      	b.n	80033ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a78      	ldr	r2, [pc, #480]	; (80033d0 <HAL_I2C_Init+0x280>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	0c9b      	lsrs	r3, r3, #18
 80031f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <HAL_I2C_Init+0x274>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d802      	bhi.n	8003224 <HAL_I2C_Init+0xd4>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3301      	adds	r3, #1
 8003222:	e009      	b.n	8003238 <HAL_I2C_Init+0xe8>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	4a69      	ldr	r2, [pc, #420]	; (80033d4 <HAL_I2C_Init+0x284>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	3301      	adds	r3, #1
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	430b      	orrs	r3, r1
 800323e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800324a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	495c      	ldr	r1, [pc, #368]	; (80033c4 <HAL_I2C_Init+0x274>)
 8003254:	428b      	cmp	r3, r1
 8003256:	d819      	bhi.n	800328c <HAL_I2C_Init+0x13c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1e59      	subs	r1, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fbb1 f3f3 	udiv	r3, r1, r3
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	f640 73fc 	movw	r3, #4092	; 0xffc
 800326c:	400b      	ands	r3, r1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_I2C_Init+0x138>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e59      	subs	r1, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	e051      	b.n	800332c <HAL_I2C_Init+0x1dc>
 8003288:	2304      	movs	r3, #4
 800328a:	e04f      	b.n	800332c <HAL_I2C_Init+0x1dc>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <HAL_I2C_Init+0x168>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e012      	b.n	80032de <HAL_I2C_Init+0x18e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	0099      	lsls	r1, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Init+0x196>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e022      	b.n	800332c <HAL_I2C_Init+0x1dc>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10e      	bne.n	800330c <HAL_I2C_Init+0x1bc>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1e58      	subs	r0, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	440b      	add	r3, r1
 80032fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	e00f      	b.n	800332c <HAL_I2C_Init+0x1dc>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e58      	subs	r0, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	0099      	lsls	r1, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003322:	3301      	adds	r3, #1
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6809      	ldr	r1, [r1, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800335a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6911      	ldr	r1, [r2, #16]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	430b      	orrs	r3, r1
 800336e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	000186a0 	.word	0x000186a0
 80033c8:	001e847f 	.word	0x001e847f
 80033cc:	003d08ff 	.word	0x003d08ff
 80033d0:	431bde83 	.word	0x431bde83
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	4608      	mov	r0, r1
 80033e2:	4611      	mov	r1, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	817b      	strh	r3, [r7, #10]
 80033ea:	460b      	mov	r3, r1
 80033ec:	813b      	strh	r3, [r7, #8]
 80033ee:	4613      	mov	r3, r2
 80033f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033f2:	f7ff fb09 	bl	8002a08 <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	f040 80d9 	bne.w	80035b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2319      	movs	r3, #25
 800340c:	2201      	movs	r2, #1
 800340e:	496d      	ldr	r1, [pc, #436]	; (80035c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fc7f 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
 800341e:	e0cc      	b.n	80035ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_I2C_Mem_Write+0x56>
 800342a:	2302      	movs	r3, #2
 800342c:	e0c5      	b.n	80035ba <HAL_I2C_Mem_Write+0x1e2>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d007      	beq.n	8003454 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	; 0x21
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a4d      	ldr	r2, [pc, #308]	; (80035c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003496:	88f8      	ldrh	r0, [r7, #6]
 8003498:	893a      	ldrh	r2, [r7, #8]
 800349a:	8979      	ldrh	r1, [r7, #10]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	4603      	mov	r3, r0
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fab6 	bl	8003a18 <I2C_RequestMemoryWrite>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d052      	beq.n	8003558 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e081      	b.n	80035ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fd00 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d107      	bne.n	80034de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06b      	b.n	80035ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d11b      	bne.n	8003558 <HAL_I2C_Mem_Write+0x180>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	2b00      	cmp	r3, #0
 8003526:	d017      	beq.n	8003558 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354e:	b29b      	uxth	r3, r3
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1aa      	bne.n	80034b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fcec 	bl	8003f42 <I2C_WaitOnBTFFlagUntilTimeout>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2b04      	cmp	r3, #4
 8003576:	d107      	bne.n	8003588 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003586:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e016      	b.n	80035ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	00100002 	.word	0x00100002
 80035c8:	ffff0000 	.word	0xffff0000

080035cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08c      	sub	sp, #48	; 0x30
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	4608      	mov	r0, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	817b      	strh	r3, [r7, #10]
 80035de:	460b      	mov	r3, r1
 80035e0:	813b      	strh	r3, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035e6:	f7ff fa0f 	bl	8002a08 <HAL_GetTick>
 80035ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	f040 8208 	bne.w	8003a0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	2319      	movs	r3, #25
 8003600:	2201      	movs	r2, #1
 8003602:	497b      	ldr	r1, [pc, #492]	; (80037f0 <HAL_I2C_Mem_Read+0x224>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fb85 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	e1fb      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_I2C_Mem_Read+0x56>
 800361e:	2302      	movs	r3, #2
 8003620:	e1f4      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b01      	cmp	r3, #1
 8003636:	d007      	beq.n	8003648 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2222      	movs	r2, #34	; 0x22
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2240      	movs	r2, #64	; 0x40
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003678:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a5b      	ldr	r2, [pc, #364]	; (80037f4 <HAL_I2C_Mem_Read+0x228>)
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800368a:	88f8      	ldrh	r0, [r7, #6]
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	8979      	ldrh	r1, [r7, #10]
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4603      	mov	r3, r0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa52 	bl	8003b44 <I2C_RequestMemoryRead>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e1b0      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d113      	bne.n	80036da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b2:	2300      	movs	r3, #0
 80036b4:	623b      	str	r3, [r7, #32]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	623b      	str	r3, [r7, #32]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e184      	b.n	80039e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d11b      	bne.n	800371a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e164      	b.n	80039e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	2b02      	cmp	r3, #2
 8003720:	d11b      	bne.n	800375a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003740:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	e144      	b.n	80039e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003770:	e138      	b.n	80039e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003776:	2b03      	cmp	r3, #3
 8003778:	f200 80f1 	bhi.w	800395e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b01      	cmp	r3, #1
 8003782:	d123      	bne.n	80037cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fc1b 	bl	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e139      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ca:	e10b      	b.n	80039e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d14e      	bne.n	8003872 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	2200      	movs	r2, #0
 80037dc:	4906      	ldr	r1, [pc, #24]	; (80037f8 <HAL_I2C_Mem_Read+0x22c>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa98 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d008      	beq.n	80037fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e10e      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
 80037ee:	bf00      	nop
 80037f0:	00100002 	.word	0x00100002
 80037f4:	ffff0000 	.word	0xffff0000
 80037f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003870:	e0b8      	b.n	80039e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003878:	2200      	movs	r2, #0
 800387a:	4966      	ldr	r1, [pc, #408]	; (8003a14 <HAL_I2C_Mem_Read+0x448>)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fa49 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0bf      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	2200      	movs	r2, #0
 80038d6:	494f      	ldr	r1, [pc, #316]	; (8003a14 <HAL_I2C_Mem_Read+0x448>)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fa1b 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e091      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800395c:	e042      	b.n	80039e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fb2e 	bl	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e04c      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d118      	bne.n	80039e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f aec2 	bne.w	8003772 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	; 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	00010004 	.word	0x00010004

08003a18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	813b      	strh	r3, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f960 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d103      	bne.n	8003a72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e05f      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	492d      	ldr	r1, [pc, #180]	; (8003b40 <I2C_RequestMemoryWrite+0x128>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f998 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e04c      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	6a39      	ldr	r1, [r7, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa02 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d107      	bne.n	8003ada <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e02b      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	e021      	b.n	8003b34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b00:	6a39      	ldr	r1, [r7, #32]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f9dc 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d107      	bne.n	8003b26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e005      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00010002 	.word	0x00010002

08003b44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f8c2 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba4:	d103      	bne.n	8003bae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0aa      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	4952      	ldr	r1, [pc, #328]	; (8003d10 <I2C_RequestMemoryRead+0x1cc>)
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f8fa 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e097      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f964 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e076      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c20:	893b      	ldrh	r3, [r7, #8]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	e021      	b.n	8003c70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c2c:	893b      	ldrh	r3, [r7, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f93e 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e050      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c72:	6a39      	ldr	r1, [r7, #32]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f923 	bl	8003ec0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d107      	bne.n	8003c98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e035      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003caa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f82b 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd2:	d103      	bne.n	8003cdc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e013      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	6a3a      	ldr	r2, [r7, #32]
 8003cf4:	4906      	ldr	r1, [pc, #24]	; (8003d10 <I2C_RequestMemoryRead+0x1cc>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f863 	bl	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	00010002 	.word	0x00010002

08003d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d24:	e025      	b.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d021      	beq.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe fe6b 	bl	8002a08 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d116      	bne.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f043 0220 	orr.w	r2, r3, #32
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e023      	b.n	8003dba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10d      	bne.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4013      	ands	r3, r2
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	e00c      	b.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4013      	ands	r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d0b6      	beq.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd0:	e051      	b.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de0:	d123      	bne.n	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0204 	orr.w	r2, r3, #4
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e046      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d021      	beq.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe fde9 	bl	8002a08 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e020      	b.n	8003eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10c      	bne.n	8003e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	43da      	mvns	r2, r3
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	e00b      	b.n	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	43da      	mvns	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d18d      	bne.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8ce 	bl	8004070 <I2C_IsAcknowledgeFailed>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e02d      	b.n	8003f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d021      	beq.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fe fd8f 	bl	8002a08 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d116      	bne.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e007      	b.n	8003f3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d1ca      	bne.n	8003ece <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f4e:	e02d      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f88d 	bl	8004070 <I2C_IsAcknowledgeFailed>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e02d      	b.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d021      	beq.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f68:	f7fe fd4e 	bl	8002a08 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d116      	bne.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f043 0220 	orr.w	r2, r3, #32
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e007      	b.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d1ca      	bne.n	8003f50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fd0:	e042      	b.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f003 0310 	and.w	r3, r3, #16
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d119      	bne.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0210 	mvn.w	r2, #16
 8003fe8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e029      	b.n	8004068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004014:	f7fe fcf8 	bl	8002a08 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d116      	bne.n	8004058 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f043 0220 	orr.w	r2, r3, #32
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e007      	b.n	8004068 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004062:	2b40      	cmp	r3, #64	; 0x40
 8004064:	d1b5      	bne.n	8003fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004086:	d11b      	bne.n	80040c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004090:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e264      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d075      	beq.n	80041da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ee:	4ba3      	ldr	r3, [pc, #652]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d00c      	beq.n	8004114 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040fa:	4ba0      	ldr	r3, [pc, #640]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004102:	2b08      	cmp	r3, #8
 8004104:	d112      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4b9d      	ldr	r3, [pc, #628]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800410e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004112:	d10b      	bne.n	800412c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	4b99      	ldr	r3, [pc, #612]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d05b      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d157      	bne.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e23f      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d106      	bne.n	8004144 <HAL_RCC_OscConfig+0x74>
 8004136:	4b91      	ldr	r3, [pc, #580]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a90      	ldr	r2, [pc, #576]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e01d      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414c:	d10c      	bne.n	8004168 <HAL_RCC_OscConfig+0x98>
 800414e:	4b8b      	ldr	r3, [pc, #556]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a8a      	ldr	r2, [pc, #552]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a87      	ldr	r2, [pc, #540]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e00b      	b.n	8004180 <HAL_RCC_OscConfig+0xb0>
 8004168:	4b84      	ldr	r3, [pc, #528]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a83      	ldr	r2, [pc, #524]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b81      	ldr	r3, [pc, #516]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a80      	ldr	r2, [pc, #512]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d013      	beq.n	80041b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004188:	f7fe fc3e 	bl	8002a08 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004190:	f7fe fc3a 	bl	8002a08 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e204      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a2:	4b76      	ldr	r3, [pc, #472]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0xc0>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fc2a 	bl	8002a08 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe fc26 	bl	8002a08 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1f0      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e000      	b.n	80041da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d063      	beq.n	80042ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041f2:	4b62      	ldr	r3, [pc, #392]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d11c      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d116      	bne.n	8004238 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	4b5c      	ldr	r3, [pc, #368]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d001      	beq.n	8004222 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e1c4      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b56      	ldr	r3, [pc, #344]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4952      	ldr	r1, [pc, #328]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004236:	e03a      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004240:	4b4f      	ldr	r3, [pc, #316]	; (8004380 <HAL_RCC_OscConfig+0x2b0>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fe fbdf 	bl	8002a08 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424e:	f7fe fbdb 	bl	8002a08 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e1a5      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004260:	4b46      	ldr	r3, [pc, #280]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426c:	4b43      	ldr	r3, [pc, #268]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4940      	ldr	r1, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	600b      	str	r3, [r1, #0]
 8004280:	e015      	b.n	80042ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_OscConfig+0x2b0>)
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe fbbe 	bl	8002a08 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004290:	f7fe fbba 	bl	8002a08 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e184      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d030      	beq.n	800431c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042c2:	4b30      	ldr	r3, [pc, #192]	; (8004384 <HAL_RCC_OscConfig+0x2b4>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fe fb9e 	bl	8002a08 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fe fb9a 	bl	8002a08 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e164      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0x200>
 80042ee:	e015      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f0:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_OscConfig+0x2b4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f6:	f7fe fb87 	bl	8002a08 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fe fb83 	bl	8002a08 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e14d      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004310:	4b1a      	ldr	r3, [pc, #104]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a0 	beq.w	800446a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800432a:	2300      	movs	r3, #0
 800432c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10f      	bne.n	800435a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	4a0e      	ldr	r2, [pc, #56]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 8004344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004348:	6413      	str	r3, [r2, #64]	; 0x40
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004356:	2301      	movs	r3, #1
 8004358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_OscConfig+0x2b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d121      	bne.n	80043aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a07      	ldr	r2, [pc, #28]	; (8004388 <HAL_RCC_OscConfig+0x2b8>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004372:	f7fe fb49 	bl	8002a08 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	e011      	b.n	800439e <HAL_RCC_OscConfig+0x2ce>
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
 8004380:	42470000 	.word	0x42470000
 8004384:	42470e80 	.word	0x42470e80
 8004388:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800438c:	f7fe fb3c 	bl	8002a08 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e106      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439e:	4b85      	ldr	r3, [pc, #532]	; (80045b4 <HAL_RCC_OscConfig+0x4e4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0f0      	beq.n	800438c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x2f0>
 80043b2:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b6:	4a80      	ldr	r2, [pc, #512]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	6713      	str	r3, [r2, #112]	; 0x70
 80043be:	e01c      	b.n	80043fa <HAL_RCC_OscConfig+0x32a>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b05      	cmp	r3, #5
 80043c6:	d10c      	bne.n	80043e2 <HAL_RCC_OscConfig+0x312>
 80043c8:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a7a      	ldr	r2, [pc, #488]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043ce:	f043 0304 	orr.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
 80043d4:	4b78      	ldr	r3, [pc, #480]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a77      	ldr	r2, [pc, #476]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043da:	f043 0301 	orr.w	r3, r3, #1
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	e00b      	b.n	80043fa <HAL_RCC_OscConfig+0x32a>
 80043e2:	4b75      	ldr	r3, [pc, #468]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	4a74      	ldr	r2, [pc, #464]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6713      	str	r3, [r2, #112]	; 0x70
 80043ee:	4b72      	ldr	r3, [pc, #456]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a71      	ldr	r2, [pc, #452]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d015      	beq.n	800442e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004402:	f7fe fb01 	bl	8002a08 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004408:	e00a      	b.n	8004420 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440a:	f7fe fafd 	bl	8002a08 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	f241 3288 	movw	r2, #5000	; 0x1388
 8004418:	4293      	cmp	r3, r2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0c5      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0ee      	beq.n	800440a <HAL_RCC_OscConfig+0x33a>
 800442c:	e014      	b.n	8004458 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442e:	f7fe faeb 	bl	8002a08 <HAL_GetTick>
 8004432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004434:	e00a      	b.n	800444c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004436:	f7fe fae7 	bl	8002a08 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	f241 3288 	movw	r2, #5000	; 0x1388
 8004444:	4293      	cmp	r3, r2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e0af      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	4b5a      	ldr	r3, [pc, #360]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ee      	bne.n	8004436 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d105      	bne.n	800446a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445e:	4b56      	ldr	r3, [pc, #344]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	4a55      	ldr	r2, [pc, #340]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 809b 	beq.w	80045aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004474:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d05c      	beq.n	800453a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d141      	bne.n	800450c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b4c      	ldr	r3, [pc, #304]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fe fabb 	bl	8002a08 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004496:	f7fe fab7 	bl	8002a08 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e081      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a8:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	019b      	lsls	r3, r3, #6
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	3b01      	subs	r3, #1
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	4937      	ldr	r1, [pc, #220]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fe fa90 	bl	8002a08 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fe fa8c 	bl	8002a08 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e056      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x41c>
 800450a:	e04e      	b.n	80045aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450c:	4b2b      	ldr	r3, [pc, #172]	; (80045bc <HAL_RCC_OscConfig+0x4ec>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004512:	f7fe fa79 	bl	8002a08 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451a:	f7fe fa75 	bl	8002a08 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e03f      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452c:	4b22      	ldr	r3, [pc, #136]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x44a>
 8004538:	e037      	b.n	80045aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e032      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004546:	4b1c      	ldr	r3, [pc, #112]	; (80045b8 <HAL_RCC_OscConfig+0x4e8>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d028      	beq.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455e:	429a      	cmp	r2, r3
 8004560:	d121      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d11a      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800457c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800457e:	4293      	cmp	r3, r2
 8004580:	d111      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	085b      	lsrs	r3, r3, #1
 800458e:	3b01      	subs	r3, #1
 8004590:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40007000 	.word	0x40007000
 80045b8:	40023800 	.word	0x40023800
 80045bc:	42470060 	.word	0x42470060

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0cc      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d4:	4b68      	ldr	r3, [pc, #416]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d90c      	bls.n	80045fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b63      	ldr	r3, [pc, #396]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0b8      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800461e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800462c:	4b53      	ldr	r3, [pc, #332]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a52      	ldr	r2, [pc, #328]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004636:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004638:	4b50      	ldr	r3, [pc, #320]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	494d      	ldr	r1, [pc, #308]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d044      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d119      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d003      	beq.n	800467e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	2b03      	cmp	r3, #3
 800467c:	d107      	bne.n	800468e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467e:	4b3f      	ldr	r3, [pc, #252]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e06f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468e:	4b3b      	ldr	r3, [pc, #236]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e067      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4934      	ldr	r1, [pc, #208]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b0:	f7fe f9aa 	bl	8002a08 <HAL_GetTick>
 80046b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b8:	f7fe f9a6 	bl	8002a08 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e04f      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 020c 	and.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	429a      	cmp	r2, r3
 80046de:	d1eb      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e0:	4b25      	ldr	r3, [pc, #148]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d20c      	bcs.n	8004708 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f6:	4b20      	ldr	r3, [pc, #128]	; (8004778 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d001      	beq.n	8004708 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e032      	b.n	800476e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4916      	ldr	r1, [pc, #88]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	490e      	ldr	r1, [pc, #56]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004746:	f000 f821 	bl	800478c <HAL_RCC_GetSysClockFreq>
 800474a:	4602      	mov	r2, r0
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 030f 	and.w	r3, r3, #15
 8004756:	490a      	ldr	r1, [pc, #40]	; (8004780 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	5ccb      	ldrb	r3, [r1, r3]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a09      	ldr	r2, [pc, #36]	; (8004784 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe f90a 	bl	8002980 <HAL_InitTick>

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
 8004780:	08009ffc 	.word	0x08009ffc
 8004784:	20000028 	.word	0x20000028
 8004788:	2000002c 	.word	0x2000002c

0800478c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800478c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004790:	b084      	sub	sp, #16
 8004792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	2300      	movs	r3, #0
 800479e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047a4:	4b67      	ldr	r3, [pc, #412]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 030c 	and.w	r3, r3, #12
 80047ac:	2b08      	cmp	r3, #8
 80047ae:	d00d      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x40>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	f200 80bd 	bhi.w	8004930 <HAL_RCC_GetSysClockFreq+0x1a4>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0x34>
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d003      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80047be:	e0b7      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b61      	ldr	r3, [pc, #388]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047c2:	60bb      	str	r3, [r7, #8]
       break;
 80047c4:	e0b7      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047c6:	4b61      	ldr	r3, [pc, #388]	; (800494c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047c8:	60bb      	str	r3, [r7, #8]
      break;
 80047ca:	e0b4      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047cc:	4b5d      	ldr	r3, [pc, #372]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d6:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d04d      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e2:	4b58      	ldr	r3, [pc, #352]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047f2:	f04f 0100 	mov.w	r1, #0
 80047f6:	ea02 0800 	and.w	r8, r2, r0
 80047fa:	ea03 0901 	and.w	r9, r3, r1
 80047fe:	4640      	mov	r0, r8
 8004800:	4649      	mov	r1, r9
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	014b      	lsls	r3, r1, #5
 800480c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004810:	0142      	lsls	r2, r0, #5
 8004812:	4610      	mov	r0, r2
 8004814:	4619      	mov	r1, r3
 8004816:	ebb0 0008 	subs.w	r0, r0, r8
 800481a:	eb61 0109 	sbc.w	r1, r1, r9
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	018b      	lsls	r3, r1, #6
 8004828:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800482c:	0182      	lsls	r2, r0, #6
 800482e:	1a12      	subs	r2, r2, r0
 8004830:	eb63 0301 	sbc.w	r3, r3, r1
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	00d9      	lsls	r1, r3, #3
 800483e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004842:	00d0      	lsls	r0, r2, #3
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	eb12 0208 	adds.w	r2, r2, r8
 800484c:	eb43 0309 	adc.w	r3, r3, r9
 8004850:	f04f 0000 	mov.w	r0, #0
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	0259      	lsls	r1, r3, #9
 800485a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800485e:	0250      	lsls	r0, r2, #9
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4610      	mov	r0, r2
 8004866:	4619      	mov	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	461a      	mov	r2, r3
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	f7fb fcb2 	bl	80001d8 <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e04a      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487e:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	461a      	mov	r2, r3
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800488e:	f04f 0100 	mov.w	r1, #0
 8004892:	ea02 0400 	and.w	r4, r2, r0
 8004896:	ea03 0501 	and.w	r5, r3, r1
 800489a:	4620      	mov	r0, r4
 800489c:	4629      	mov	r1, r5
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	014b      	lsls	r3, r1, #5
 80048a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048ac:	0142      	lsls	r2, r0, #5
 80048ae:	4610      	mov	r0, r2
 80048b0:	4619      	mov	r1, r3
 80048b2:	1b00      	subs	r0, r0, r4
 80048b4:	eb61 0105 	sbc.w	r1, r1, r5
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	018b      	lsls	r3, r1, #6
 80048c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048c6:	0182      	lsls	r2, r0, #6
 80048c8:	1a12      	subs	r2, r2, r0
 80048ca:	eb63 0301 	sbc.w	r3, r3, r1
 80048ce:	f04f 0000 	mov.w	r0, #0
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	00d9      	lsls	r1, r3, #3
 80048d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048dc:	00d0      	lsls	r0, r2, #3
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	1912      	adds	r2, r2, r4
 80048e4:	eb45 0303 	adc.w	r3, r5, r3
 80048e8:	f04f 0000 	mov.w	r0, #0
 80048ec:	f04f 0100 	mov.w	r1, #0
 80048f0:	0299      	lsls	r1, r3, #10
 80048f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048f6:	0290      	lsls	r0, r2, #10
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4610      	mov	r0, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	461a      	mov	r2, r3
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	f7fb fc66 	bl	80001d8 <__aeabi_uldivmod>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4613      	mov	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	0c1b      	lsrs	r3, r3, #16
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	3301      	adds	r3, #1
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	60bb      	str	r3, [r7, #8]
      break;
 800492e:	e002      	b.n	8004936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004932:	60bb      	str	r3, [r7, #8]
      break;
 8004934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004936:	68bb      	ldr	r3, [r7, #8]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004942:	bf00      	nop
 8004944:	40023800 	.word	0x40023800
 8004948:	00f42400 	.word	0x00f42400
 800494c:	007a1200 	.word	0x007a1200

08004950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_GetHCLKFreq+0x14>)
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000028 	.word	0x20000028

08004968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800496c:	f7ff fff0 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 8004970:	4602      	mov	r2, r0
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	0a9b      	lsrs	r3, r3, #10
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCC_GetPCLK1Freq+0x24>)
 800497e:	5ccb      	ldrb	r3, [r1, r3]
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40023800 	.word	0x40023800
 800498c:	0800a00c 	.word	0x0800a00c

08004990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004994:	f7ff ffdc 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	0b5b      	lsrs	r3, r3, #13
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	4903      	ldr	r1, [pc, #12]	; (80049b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40023800 	.word	0x40023800
 80049b4:	0800a00c 	.word	0x0800a00c

080049b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07b      	b.n	8004ac2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d108      	bne.n	80049e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049da:	d009      	beq.n	80049f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
 80049e2:	e005      	b.n	80049f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fd fd56 	bl	80024bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	ea42 0103 	orr.w	r1, r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0104 	and.w	r1, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f003 0210 	and.w	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b088      	sub	sp, #32
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	603b      	str	r3, [r7, #0]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_SPI_Transmit+0x22>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e126      	b.n	8004d3a <HAL_SPI_Transmit+0x270>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004af4:	f7fd ff88 	bl	8002a08 <HAL_GetTick>
 8004af8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004afa:	88fb      	ldrh	r3, [r7, #6]
 8004afc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d002      	beq.n	8004b10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b0e:	e10b      	b.n	8004d28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_SPI_Transmit+0x52>
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b20:	e102      	b.n	8004d28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2203      	movs	r2, #3
 8004b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b68:	d10f      	bne.n	8004b8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d007      	beq.n	8004ba8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bb0:	d14b      	bne.n	8004c4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <HAL_SPI_Transmit+0xf6>
 8004bba:	8afb      	ldrh	r3, [r7, #22]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d13e      	bne.n	8004c3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	881a      	ldrh	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	1c9a      	adds	r2, r3, #2
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004be4:	e02b      	b.n	8004c3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d112      	bne.n	8004c1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	881a      	ldrh	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	1c9a      	adds	r2, r3, #2
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c18:	e011      	b.n	8004c3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c1a:	f7fd fef5 	bl	8002a08 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d803      	bhi.n	8004c32 <HAL_SPI_Transmit+0x168>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c30:	d102      	bne.n	8004c38 <HAL_SPI_Transmit+0x16e>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d102      	bne.n	8004c3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c3c:	e074      	b.n	8004d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ce      	bne.n	8004be6 <HAL_SPI_Transmit+0x11c>
 8004c48:	e04c      	b.n	8004ce4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0x18e>
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d140      	bne.n	8004cda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	7812      	ldrb	r2, [r2, #0]
 8004c64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c7e:	e02c      	b.n	8004cda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d113      	bne.n	8004cb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	330c      	adds	r3, #12
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cb4:	e011      	b.n	8004cda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb6:	f7fd fea7 	bl	8002a08 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d803      	bhi.n	8004cce <HAL_SPI_Transmit+0x204>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d102      	bne.n	8004cd4 <HAL_SPI_Transmit+0x20a>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cd8:	e026      	b.n	8004d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1cd      	bne.n	8004c80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ce4:	69ba      	ldr	r2, [r7, #24]
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 fbcb 	bl	8005484 <SPI_EndRxTxTransaction>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d002      	beq.n	8004cfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d02:	2300      	movs	r3, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e000      	b.n	8004d28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b088      	sub	sp, #32
 8004d46:	af02      	add	r7, sp, #8
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d5e:	d112      	bne.n	8004d86 <HAL_SPI_Receive+0x44>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10e      	bne.n	8004d86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d70:	88fa      	ldrh	r2, [r7, #6]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4613      	mov	r3, r2
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 f8f1 	bl	8004f64 <HAL_SPI_TransmitReceive>
 8004d82:	4603      	mov	r3, r0
 8004d84:	e0ea      	b.n	8004f5c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_SPI_Receive+0x52>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0e3      	b.n	8004f5c <HAL_SPI_Receive+0x21a>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d9c:	f7fd fe34 	bl	8002a08 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
 8004db0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004db2:	e0ca      	b.n	8004f4a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d002      	beq.n	8004dc0 <HAL_SPI_Receive+0x7e>
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dc4:	e0c1      	b.n	8004f4a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	88fa      	ldrh	r2, [r7, #6]
 8004de4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d10f      	bne.n	8004e2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d007      	beq.n	8004e4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d162      	bne.n	8004f1a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e54:	e02e      	b.n	8004eb4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d115      	bne.n	8004e90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f103 020c 	add.w	r2, r3, #12
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	7812      	ldrb	r2, [r2, #0]
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e8e:	e011      	b.n	8004eb4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e90:	f7fd fdba 	bl	8002a08 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d803      	bhi.n	8004ea8 <HAL_SPI_Receive+0x166>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d102      	bne.n	8004eae <HAL_SPI_Receive+0x16c>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004eb2:	e04a      	b.n	8004f4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1cb      	bne.n	8004e56 <HAL_SPI_Receive+0x114>
 8004ebe:	e031      	b.n	8004f24 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d113      	bne.n	8004ef6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	1c9a      	adds	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ef4:	e011      	b.n	8004f1a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ef6:	f7fd fd87 	bl	8002a08 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d803      	bhi.n	8004f0e <HAL_SPI_Receive+0x1cc>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d102      	bne.n	8004f14 <HAL_SPI_Receive+0x1d2>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f18:	e017      	b.n	8004f4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1cd      	bne.n	8004ec0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fa45 	bl	80053b8 <SPI_EndRxTransaction>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d002      	beq.n	8004f48 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	75fb      	strb	r3, [r7, #23]
 8004f46:	e000      	b.n	8004f4a <HAL_SPI_Receive+0x208>
  }

error :
 8004f48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08c      	sub	sp, #48	; 0x30
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f72:	2301      	movs	r3, #1
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x26>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e18a      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x33c>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f92:	f7fd fd39 	bl	8002a08 <HAL_GetTick>
 8004f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fa8:	887b      	ldrh	r3, [r7, #2]
 8004faa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d00f      	beq.n	8004fd4 <HAL_SPI_TransmitReceive+0x70>
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fba:	d107      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d103      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x68>
 8004fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d003      	beq.n	8004fd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fd2:	e15b      	b.n	800528c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_SPI_TransmitReceive+0x82>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <HAL_SPI_TransmitReceive+0x82>
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fec:	e14e      	b.n	800528c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d003      	beq.n	8005002 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	887a      	ldrh	r2, [r7, #2]
 8005012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	887a      	ldrh	r2, [r7, #2]
 8005024:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	887a      	ldrh	r2, [r7, #2]
 800502a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d007      	beq.n	8005056 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505e:	d178      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_SPI_TransmitReceive+0x10a>
 8005068:	8b7b      	ldrh	r3, [r7, #26]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d166      	bne.n	800513c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	881a      	ldrh	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005092:	e053      	b.n	800513c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d11b      	bne.n	80050da <HAL_SPI_TransmitReceive+0x176>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d016      	beq.n	80050da <HAL_SPI_TransmitReceive+0x176>
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d113      	bne.n	80050da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	881a      	ldrh	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c2:	1c9a      	adds	r2, r3, #2
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d119      	bne.n	800511c <HAL_SPI_TransmitReceive+0x1b8>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d014      	beq.n	800511c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	b292      	uxth	r2, r2
 80050fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	1c9a      	adds	r2, r3, #2
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005118:	2301      	movs	r3, #1
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800511c:	f7fd fc74 	bl	8002a08 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005128:	429a      	cmp	r2, r3
 800512a:	d807      	bhi.n	800513c <HAL_SPI_TransmitReceive+0x1d8>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d003      	beq.n	800513c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800513a:	e0a7      	b.n	800528c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1a6      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x130>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1a1      	bne.n	8005094 <HAL_SPI_TransmitReceive+0x130>
 8005150:	e07c      	b.n	800524c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x1fc>
 800515a:	8b7b      	ldrh	r3, [r7, #26]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d16b      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800517c:	b29b      	uxth	r3, r3
 800517e:	3b01      	subs	r3, #1
 8005180:	b29a      	uxth	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005186:	e057      	b.n	8005238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b02      	cmp	r3, #2
 8005194:	d11c      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x26c>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519a:	b29b      	uxth	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d017      	beq.n	80051d0 <HAL_SPI_TransmitReceive+0x26c>
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d114      	bne.n	80051d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d119      	bne.n	8005212 <HAL_SPI_TransmitReceive+0x2ae>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d014      	beq.n	8005212 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800520e:	2301      	movs	r3, #1
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005212:	f7fd fbf9 	bl	8002a08 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800521e:	429a      	cmp	r2, r3
 8005220:	d803      	bhi.n	800522a <HAL_SPI_TransmitReceive+0x2c6>
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d102      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x2cc>
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	2b00      	cmp	r3, #0
 800522e:	d103      	bne.n	8005238 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005236:	e029      	b.n	800528c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1a2      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x224>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d19d      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f917 	bl	8005484 <SPI_EndRxTxTransaction>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d006      	beq.n	800526a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005268:	e010      	b.n	800528c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005272:	2300      	movs	r3, #0
 8005274:	617b      	str	r3, [r7, #20]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	617b      	str	r3, [r7, #20]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	e000      	b.n	800528c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800528a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800529c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3730      	adds	r7, #48	; 0x30
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052b8:	f7fd fba6 	bl	8002a08 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c0:	1a9b      	subs	r3, r3, r2
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	4413      	add	r3, r2
 80052c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052c8:	f7fd fb9e 	bl	8002a08 <HAL_GetTick>
 80052cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ce:	4b39      	ldr	r3, [pc, #228]	; (80053b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	015b      	lsls	r3, r3, #5
 80052d4:	0d1b      	lsrs	r3, r3, #20
 80052d6:	69fa      	ldr	r2, [r7, #28]
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052de:	e054      	b.n	800538a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d050      	beq.n	800538a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052e8:	f7fd fb8e 	bl	8002a08 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	69fa      	ldr	r2, [r7, #28]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d902      	bls.n	80052fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d13d      	bne.n	800537a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800530c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005316:	d111      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005320:	d004      	beq.n	800532c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532a:	d107      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800533a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005344:	d10f      	bne.n	8005366 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005364:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e017      	b.n	80053aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	3b01      	subs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	429a      	cmp	r2, r3
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d19b      	bne.n	80052e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000028 	.word	0x20000028

080053b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053cc:	d111      	bne.n	80053f2 <SPI_EndRxTransaction+0x3a>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d6:	d004      	beq.n	80053e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e0:	d107      	bne.n	80053f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fa:	d12a      	bne.n	8005452 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d012      	beq.n	800542c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	; 0x80
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff ff49 	bl	80052a8 <SPI_WaitFlagStateUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02d      	beq.n	8005478 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e026      	b.n	800547a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2200      	movs	r2, #0
 8005434:	2101      	movs	r1, #1
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff ff36 	bl	80052a8 <SPI_WaitFlagStateUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d01a      	beq.n	8005478 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e013      	b.n	800547a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	2101      	movs	r1, #1
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff ff23 	bl	80052a8 <SPI_WaitFlagStateUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e000      	b.n	800547a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005490:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <SPI_EndRxTxTransaction+0x7c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <SPI_EndRxTxTransaction+0x80>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	0d5b      	lsrs	r3, r3, #21
 800549c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ae:	d112      	bne.n	80054d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2200      	movs	r2, #0
 80054b8:	2180      	movs	r1, #128	; 0x80
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f7ff fef4 	bl	80052a8 <SPI_WaitFlagStateUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d016      	beq.n	80054f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e00f      	b.n	80054f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	3b01      	subs	r3, #1
 80054e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d0f2      	beq.n	80054d6 <SPI_EndRxTxTransaction+0x52>
 80054f0:	e000      	b.n	80054f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80054f2:	bf00      	nop
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3718      	adds	r7, #24
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000028 	.word	0x20000028
 8005504:	165e9f81 	.word	0x165e9f81

08005508 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e034      	b.n	8005588 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7fb ff9a 	bl	800146c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3308      	adds	r3, #8
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f001 fc6e 	bl	8006e24 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	461a      	mov	r2, r3
 8005552:	68b9      	ldr	r1, [r7, #8]
 8005554:	f001 fcb8 	bl	8006ec8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6858      	ldr	r0, [r3, #4]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	f001 fced 	bl	8006f44 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6892      	ldr	r2, [r2, #8]
 8005572:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	6892      	ldr	r2, [r2, #8]
 800557e:	f041 0101 	orr.w	r1, r1, #1
 8005582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e041      	b.n	8005626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fd f88c 	bl	80026d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f000 fa96 	bl	8005b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e04e      	b.n	80056e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d022      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d01d      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <HAL_TIM_Base_Start_IT+0xd0>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <HAL_TIM_Base_Start_IT+0xd4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d009      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a19      	ldr	r2, [pc, #100]	; (8005708 <HAL_TIM_Base_Start_IT+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_Base_Start_IT+0x80>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a18      	ldr	r2, [pc, #96]	; (800570c <HAL_TIM_Base_Start_IT+0xdc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d111      	bne.n	80056d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d010      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d2:	e007      	b.n	80056e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40010400 	.word	0x40010400
 8005708:	40014000 	.word	0x40014000
 800570c:	40001800 	.word	0x40001800

08005710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d122      	bne.n	800576c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b02      	cmp	r3, #2
 8005732:	d11b      	bne.n	800576c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0202 	mvn.w	r2, #2
 800573c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f9b5 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f9a7 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f9b8 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0304 	and.w	r3, r3, #4
 8005776:	2b04      	cmp	r3, #4
 8005778:	d122      	bne.n	80057c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b04      	cmp	r3, #4
 8005786:	d11b      	bne.n	80057c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0204 	mvn.w	r2, #4
 8005790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f98b 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f97d 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f98e 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0208 	mvn.w	r2, #8
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2204      	movs	r2, #4
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f961 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f953 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f964 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b10      	cmp	r3, #16
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b10      	cmp	r3, #16
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0210 	mvn.w	r2, #16
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2208      	movs	r2, #8
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f937 	bl	8005ac2 <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f929 	bl	8005aae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f93a 	bl	8005ad6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d10e      	bne.n	8005894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d107      	bne.n	8005894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0201 	mvn.w	r2, #1
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc fd98 	bl	80023c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d10e      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b80      	cmp	r3, #128	; 0x80
 80058ae:	d107      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fae0 	bl	8005e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f8ff 	bl	8005aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b20      	cmp	r3, #32
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0220 	mvn.w	r2, #32
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 faaa 	bl	8005e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIM_ConfigClockSource+0x1c>
 8005938:	2302      	movs	r3, #2
 800593a:	e0b4      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x186>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005974:	d03e      	beq.n	80059f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597a:	f200 8087 	bhi.w	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	f000 8086 	beq.w	8005a92 <HAL_TIM_ConfigClockSource+0x172>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d87f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d01a      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d87b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b60      	cmp	r3, #96	; 0x60
 8005996:	d050      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x11a>
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d877      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d03c      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0xfa>
 80059a0:	2b50      	cmp	r3, #80	; 0x50
 80059a2:	d873      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d058      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x13a>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d86f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d064      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d86b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d060      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d867      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05c      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d05a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	e062      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f000 f9ad 	bl	8005d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]
      break;
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6899      	ldr	r1, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f000 f996 	bl	8005d34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e03c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 f90a 	bl	8005c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2150      	movs	r1, #80	; 0x50
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f963 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 8005a38:	e02c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 f929 	bl	8005c9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2160      	movs	r1, #96	; 0x60
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 f953 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 8005a58:	e01c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 f8ea 	bl	8005c40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f943 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 f93a 	bl	8005cfe <TIM_ITRx_SetConfig>
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a40      	ldr	r2, [pc, #256]	; (8005c14 <TIM_Base_SetConfig+0x114>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d013      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1e:	d00f      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a3d      	ldr	r2, [pc, #244]	; (8005c18 <TIM_Base_SetConfig+0x118>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d00b      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <TIM_Base_SetConfig+0x11c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d007      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a3b      	ldr	r2, [pc, #236]	; (8005c20 <TIM_Base_SetConfig+0x120>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a3a      	ldr	r2, [pc, #232]	; (8005c24 <TIM_Base_SetConfig+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d108      	bne.n	8005b52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a2f      	ldr	r2, [pc, #188]	; (8005c14 <TIM_Base_SetConfig+0x114>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b60:	d027      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <TIM_Base_SetConfig+0x118>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d023      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a2b      	ldr	r2, [pc, #172]	; (8005c1c <TIM_Base_SetConfig+0x11c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <TIM_Base_SetConfig+0x120>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d01b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <TIM_Base_SetConfig+0x124>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d017      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <TIM_Base_SetConfig+0x128>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a27      	ldr	r2, [pc, #156]	; (8005c2c <TIM_Base_SetConfig+0x12c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00f      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a26      	ldr	r2, [pc, #152]	; (8005c30 <TIM_Base_SetConfig+0x130>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00b      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <TIM_Base_SetConfig+0x134>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <TIM_Base_SetConfig+0x138>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <TIM_Base_SetConfig+0x13c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d108      	bne.n	8005bc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <TIM_Base_SetConfig+0x114>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <TIM_Base_SetConfig+0x124>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d103      	bne.n	8005c00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	615a      	str	r2, [r3, #20]
}
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40010400 	.word	0x40010400
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800
 8005c34:	40001800 	.word	0x40001800
 8005c38:	40001c00 	.word	0x40001c00
 8005c3c:	40002000 	.word	0x40002000

08005c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0201 	bic.w	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f023 030a 	bic.w	r3, r3, #10
 8005c7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b087      	sub	sp, #28
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	60f8      	str	r0, [r7, #12]
 8005ca6:	60b9      	str	r1, [r7, #8]
 8005ca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f023 0210 	bic.w	r2, r3, #16
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	031b      	lsls	r3, r3, #12
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	621a      	str	r2, [r3, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f043 0307 	orr.w	r3, r3, #7
 8005d20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	609a      	str	r2, [r3, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	021a      	lsls	r2, r3, #8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	609a      	str	r2, [r3, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d101      	bne.n	8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	e05a      	b.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d022      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d01d      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1d      	ldr	r2, [pc, #116]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d018      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1a      	ldr	r2, [pc, #104]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00e      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d009      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a17      	ldr	r2, [pc, #92]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d004      	beq.n	8005e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d10c      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800
 8005e5c:	40000c00 	.word	0x40000c00
 8005e60:	40010400 	.word	0x40010400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40001800 	.word	0x40001800

08005e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e03f      	b.n	8005f26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fc fc86 	bl	80027cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2224      	movs	r2, #36	; 0x24
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fddb 	bl	8006a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68da      	ldr	r2, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b08a      	sub	sp, #40	; 0x28
 8005f32:	af02      	add	r7, sp, #8
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d17c      	bne.n	8006048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_UART_Transmit+0x2c>
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e075      	b.n	800604a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d101      	bne.n	8005f6c <HAL_UART_Transmit+0x3e>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	e06e      	b.n	800604a <HAL_UART_Transmit+0x11c>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2221      	movs	r2, #33	; 0x21
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f82:	f7fc fd41 	bl	8002a08 <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	88fa      	ldrh	r2, [r7, #6]
 8005f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9c:	d108      	bne.n	8005fb0 <HAL_UART_Transmit+0x82>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	e003      	b.n	8005fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fc0:	e02a      	b.n	8006018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2180      	movs	r1, #128	; 0x80
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 fb1f 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e036      	b.n	800604a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10b      	bne.n	8005ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	e007      	b.n	800600a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	781a      	ldrb	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	3301      	adds	r3, #1
 8006008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800600e:	b29b      	uxth	r3, r3
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1cf      	bne.n	8005fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2200      	movs	r2, #0
 800602a:	2140      	movs	r1, #64	; 0x40
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 faef 	bl	8006610 <UART_WaitOnFlagUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e006      	b.n	800604a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	e000      	b.n	800604a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006048:	2302      	movs	r3, #2
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	4613      	mov	r3, r2
 800605e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b20      	cmp	r3, #32
 800606a:	d11d      	bne.n	80060a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <HAL_UART_Receive_IT+0x26>
 8006072:	88fb      	ldrh	r3, [r7, #6]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e016      	b.n	80060aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_UART_Receive_IT+0x38>
 8006086:	2302      	movs	r3, #2
 8006088:	e00f      	b.n	80060aa <HAL_UART_Receive_IT+0x58>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	461a      	mov	r2, r3
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fb24 	bl	80066ec <UART_Start_Receive_IT>
 80060a4:	4603      	mov	r3, r0
 80060a6:	e000      	b.n	80060aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b0ba      	sub	sp, #232	; 0xe8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060da:	2300      	movs	r3, #0
 80060dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10f      	bne.n	800611a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <HAL_UART_IRQHandler+0x66>
 8006106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fc03 	bl	800691e <UART_Receive_IT>
      return;
 8006118:	e256      	b.n	80065c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800611a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 80de 	beq.w	80062e0 <HAL_UART_IRQHandler+0x22c>
 8006124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80d1 	beq.w	80062e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800613e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00b      	beq.n	8006162 <HAL_UART_IRQHandler+0xae>
 800614a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f043 0201 	orr.w	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00b      	beq.n	8006186 <HAL_UART_IRQHandler+0xd2>
 800616e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f043 0202 	orr.w	r2, r3, #2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <HAL_UART_IRQHandler+0xf6>
 8006192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f043 0204 	orr.w	r2, r3, #4
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d011      	beq.n	80061da <HAL_UART_IRQHandler+0x126>
 80061b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d105      	bne.n	80061ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f043 0208 	orr.w	r2, r3, #8
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 81ed 	beq.w	80065be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <HAL_UART_IRQHandler+0x14e>
 80061f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fb8e 	bl	800691e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	b2db      	uxtb	r3, r3
 8006216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d103      	bne.n	800622e <HAL_UART_IRQHandler+0x17a>
 8006226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d04f      	beq.n	80062ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fa96 	bl	8006760 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	d141      	bne.n	80062c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006258:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800625c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800626e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800627a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1d9      	bne.n	8006242 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	2b00      	cmp	r3, #0
 8006294:	d013      	beq.n	80062be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	4a7d      	ldr	r2, [pc, #500]	; (8006490 <HAL_UART_IRQHandler+0x3dc>)
 800629c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fc fd61 	bl	8002d6a <HAL_DMA_Abort_IT>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d016      	beq.n	80062dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062b8:	4610      	mov	r0, r2
 80062ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062bc:	e00e      	b.n	80062dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f990 	bl	80065e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c4:	e00a      	b.n	80062dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f98c 	bl	80065e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	e006      	b.n	80062dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f988 	bl	80065e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062da:	e170      	b.n	80065be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062dc:	bf00      	nop
    return;
 80062de:	e16e      	b.n	80065be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	f040 814a 	bne.w	800657e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ee:	f003 0310 	and.w	r3, r3, #16
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8143 	beq.w	800657e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 813c 	beq.w	800657e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	f040 80b4 	bne.w	8006494 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006338:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8140 	beq.w	80065c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800634a:	429a      	cmp	r2, r3
 800634c:	f080 8139 	bcs.w	80065c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006356:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	f000 8088 	beq.w	8006476 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	330c      	adds	r3, #12
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800637c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006384:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	330c      	adds	r3, #12
 800638e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006392:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800639e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1d9      	bne.n	8006366 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3314      	adds	r3, #20
 80063b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3314      	adds	r3, #20
 80063d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e1      	bne.n	80063b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3314      	adds	r3, #20
 80063f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006400:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006404:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3314      	adds	r3, #20
 800640e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006412:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006414:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e3      	bne.n	80063ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006446:	f023 0310 	bic.w	r3, r3, #16
 800644a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006458:	65ba      	str	r2, [r7, #88]	; 0x58
 800645a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800645e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e3      	bne.n	8006434 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	4618      	mov	r0, r3
 8006472:	f7fc fc0a 	bl	8002c8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800647e:	b29b      	uxth	r3, r3
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	b29b      	uxth	r3, r3
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f8b6 	bl	80065f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800648c:	e099      	b.n	80065c2 <HAL_UART_IRQHandler+0x50e>
 800648e:	bf00      	nop
 8006490:	08006827 	.word	0x08006827
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800649c:	b29b      	uxth	r3, r3
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 808b 	beq.w	80065c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8086 	beq.w	80065c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	330c      	adds	r3, #12
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064de:	647a      	str	r2, [r7, #68]	; 0x44
 80064e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e3      	bne.n	80064ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3314      	adds	r3, #20
 80064f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	623b      	str	r3, [r7, #32]
   return(result);
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006516:	633a      	str	r2, [r7, #48]	; 0x30
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800651c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e3      	bne.n	80064f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	330c      	adds	r3, #12
 800653e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	e853 3f00 	ldrex	r3, [r3]
 8006546:	60fb      	str	r3, [r7, #12]
   return(result);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0310 	bic.w	r3, r3, #16
 800654e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800655c:	61fa      	str	r2, [r7, #28]
 800655e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	69b9      	ldr	r1, [r7, #24]
 8006562:	69fa      	ldr	r2, [r7, #28]
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	617b      	str	r3, [r7, #20]
   return(result);
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e3      	bne.n	8006538 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f83e 	bl	80065f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800657c:	e023      	b.n	80065c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <HAL_UART_IRQHandler+0x4ea>
 800658a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f959 	bl	800684e <UART_Transmit_IT>
    return;
 800659c:	e014      	b.n	80065c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800659e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00e      	beq.n	80065c8 <HAL_UART_IRQHandler+0x514>
 80065aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d008      	beq.n	80065c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f999 	bl	80068ee <UART_EndTransmit_IT>
    return;
 80065bc:	e004      	b.n	80065c8 <HAL_UART_IRQHandler+0x514>
    return;
 80065be:	bf00      	nop
 80065c0:	e002      	b.n	80065c8 <HAL_UART_IRQHandler+0x514>
      return;
 80065c2:	bf00      	nop
 80065c4:	e000      	b.n	80065c8 <HAL_UART_IRQHandler+0x514>
      return;
 80065c6:	bf00      	nop
  }
}
 80065c8:	37e8      	adds	r7, #232	; 0xe8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop

080065d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b090      	sub	sp, #64	; 0x40
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	603b      	str	r3, [r7, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006620:	e050      	b.n	80066c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d04c      	beq.n	80066c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800662a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <UART_WaitOnFlagUntilTimeout+0x30>
 8006630:	f7fc f9ea 	bl	8002a08 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800663c:	429a      	cmp	r2, r3
 800663e:	d241      	bcs.n	80066c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	330c      	adds	r3, #12
 8006646:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006660:	637a      	str	r2, [r7, #52]	; 0x34
 8006662:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e5      	bne.n	8006640 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3314      	adds	r3, #20
 800667a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	613b      	str	r3, [r7, #16]
   return(result);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3314      	adds	r3, #20
 8006692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006694:	623a      	str	r2, [r7, #32]
 8006696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	69f9      	ldr	r1, [r7, #28]
 800669a:	6a3a      	ldr	r2, [r7, #32]
 800669c:	e841 2300 	strex	r3, r2, [r1]
 80066a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1e5      	bne.n	8006674 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e00f      	b.n	80066e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4013      	ands	r3, r2
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	bf0c      	ite	eq
 80066d4:	2301      	moveq	r3, #1
 80066d6:	2300      	movne	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d09f      	beq.n	8006622 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3740      	adds	r7, #64	; 0x40
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	88fa      	ldrh	r2, [r7, #6]
 8006704:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	88fa      	ldrh	r2, [r7, #6]
 800670a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2222      	movs	r2, #34	; 0x22
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006730:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0220 	orr.w	r2, r2, #32
 8006750:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006760:	b480      	push	{r7}
 8006762:	b095      	sub	sp, #84	; 0x54
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	e853 3f00 	ldrex	r3, [r3]
 8006776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800677e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	330c      	adds	r3, #12
 8006786:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006788:	643a      	str	r2, [r7, #64]	; 0x40
 800678a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800678e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006790:	e841 2300 	strex	r3, r2, [r1]
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1e5      	bne.n	8006768 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3314      	adds	r3, #20
 80067a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f023 0301 	bic.w	r3, r3, #1
 80067b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e5      	bne.n	800679c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d119      	bne.n	800680c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f023 0310 	bic.w	r3, r3, #16
 80067ee:	647b      	str	r3, [r7, #68]	; 0x44
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	330c      	adds	r3, #12
 80067f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067f8:	61ba      	str	r2, [r7, #24]
 80067fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	6979      	ldr	r1, [r7, #20]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	613b      	str	r3, [r7, #16]
   return(result);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	631a      	str	r2, [r3, #48]	; 0x30
}
 800681a:	bf00      	nop
 800681c:	3754      	adds	r7, #84	; 0x54
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff fecf 	bl	80065e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b21      	cmp	r3, #33	; 0x21
 8006860:	d13e      	bne.n	80068e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686a:	d114      	bne.n	8006896 <UART_Transmit_IT+0x48>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d110      	bne.n	8006896 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006888:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	1c9a      	adds	r2, r3, #2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	621a      	str	r2, [r3, #32]
 8006894:	e008      	b.n	80068a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	1c59      	adds	r1, r3, #1
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6211      	str	r1, [r2, #32]
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4619      	mov	r1, r3
 80068b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10f      	bne.n	80068dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	e000      	b.n	80068e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068e0:	2302      	movs	r3, #2
  }
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006904:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2220      	movs	r2, #32
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fe5e 	bl	80065d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b08c      	sub	sp, #48	; 0x30
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b22      	cmp	r3, #34	; 0x22
 8006930:	f040 80ab 	bne.w	8006a8a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693c:	d117      	bne.n	800696e <UART_Receive_IT+0x50>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d113      	bne.n	800696e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006946:	2300      	movs	r3, #0
 8006948:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	b29b      	uxth	r3, r3
 8006958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695c:	b29a      	uxth	r2, r3
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	1c9a      	adds	r2, r3, #2
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	629a      	str	r2, [r3, #40]	; 0x28
 800696c:	e026      	b.n	80069bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d007      	beq.n	8006992 <UART_Receive_IT+0x74>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <UART_Receive_IT+0x82>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e008      	b.n	80069b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	4619      	mov	r1, r3
 80069ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d15a      	bne.n	8006a86 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0220 	bic.w	r2, r2, #32
 80069de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695a      	ldr	r2, [r3, #20]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0201 	bic.w	r2, r2, #1
 80069fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d135      	bne.n	8006a7c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	613b      	str	r3, [r7, #16]
   return(result);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f023 0310 	bic.w	r3, r3, #16
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a36:	623a      	str	r2, [r7, #32]
 8006a38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3a:	69f9      	ldr	r1, [r7, #28]
 8006a3c:	6a3a      	ldr	r2, [r7, #32]
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e5      	bne.n	8006a16 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d10a      	bne.n	8006a6e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7ff fdbf 	bl	80065f8 <HAL_UARTEx_RxEventCallback>
 8006a7a:	e002      	b.n	8006a82 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fb fe5d 	bl	800273c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e002      	b.n	8006a8c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e000      	b.n	8006a8c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
  }
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3730      	adds	r7, #48	; 0x30
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a98:	b09f      	sub	sp, #124	; 0x7c
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aaa:	68d9      	ldr	r1, [r3, #12]
 8006aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	ea40 0301 	orr.w	r3, r0, r1
 8006ab4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ad8:	f021 010c 	bic.w	r1, r1, #12
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae2:	430b      	orrs	r3, r1
 8006ae4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af2:	6999      	ldr	r1, [r3, #24]
 8006af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	ea40 0301 	orr.w	r3, r0, r1
 8006afc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4bc5      	ldr	r3, [pc, #788]	; (8006e18 <UART_SetConfig+0x384>)
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d004      	beq.n	8006b12 <UART_SetConfig+0x7e>
 8006b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	4bc3      	ldr	r3, [pc, #780]	; (8006e1c <UART_SetConfig+0x388>)
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d103      	bne.n	8006b1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b12:	f7fd ff3d 	bl	8004990 <HAL_RCC_GetPCLK2Freq>
 8006b16:	6778      	str	r0, [r7, #116]	; 0x74
 8006b18:	e002      	b.n	8006b20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b1a:	f7fd ff25 	bl	8004968 <HAL_RCC_GetPCLK1Freq>
 8006b1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b28:	f040 80b6 	bne.w	8006c98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b2e:	461c      	mov	r4, r3
 8006b30:	f04f 0500 	mov.w	r5, #0
 8006b34:	4622      	mov	r2, r4
 8006b36:	462b      	mov	r3, r5
 8006b38:	1891      	adds	r1, r2, r2
 8006b3a:	6439      	str	r1, [r7, #64]	; 0x40
 8006b3c:	415b      	adcs	r3, r3
 8006b3e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b44:	1912      	adds	r2, r2, r4
 8006b46:	eb45 0303 	adc.w	r3, r5, r3
 8006b4a:	f04f 0000 	mov.w	r0, #0
 8006b4e:	f04f 0100 	mov.w	r1, #0
 8006b52:	00d9      	lsls	r1, r3, #3
 8006b54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b58:	00d0      	lsls	r0, r2, #3
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	1911      	adds	r1, r2, r4
 8006b60:	6639      	str	r1, [r7, #96]	; 0x60
 8006b62:	416b      	adcs	r3, r5
 8006b64:	667b      	str	r3, [r7, #100]	; 0x64
 8006b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	1891      	adds	r1, r2, r2
 8006b72:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b74:	415b      	adcs	r3, r3
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b80:	f7f9 fb2a 	bl	80001d8 <__aeabi_uldivmod>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4ba5      	ldr	r3, [pc, #660]	; (8006e20 <UART_SetConfig+0x38c>)
 8006b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b8e:	095b      	lsrs	r3, r3, #5
 8006b90:	011e      	lsls	r6, r3, #4
 8006b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b94:	461c      	mov	r4, r3
 8006b96:	f04f 0500 	mov.w	r5, #0
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	1891      	adds	r1, r2, r2
 8006ba0:	6339      	str	r1, [r7, #48]	; 0x30
 8006ba2:	415b      	adcs	r3, r3
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006baa:	1912      	adds	r2, r2, r4
 8006bac:	eb45 0303 	adc.w	r3, r5, r3
 8006bb0:	f04f 0000 	mov.w	r0, #0
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	00d9      	lsls	r1, r3, #3
 8006bba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bbe:	00d0      	lsls	r0, r2, #3
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	1911      	adds	r1, r2, r4
 8006bc6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bc8:	416b      	adcs	r3, r5
 8006bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	1891      	adds	r1, r2, r2
 8006bd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bda:	415b      	adcs	r3, r3
 8006bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006be2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006be6:	f7f9 faf7 	bl	80001d8 <__aeabi_uldivmod>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4b8c      	ldr	r3, [pc, #560]	; (8006e20 <UART_SetConfig+0x38c>)
 8006bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	2164      	movs	r1, #100	; 0x64
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	3332      	adds	r3, #50	; 0x32
 8006c02:	4a87      	ldr	r2, [pc, #540]	; (8006e20 <UART_SetConfig+0x38c>)
 8006c04:	fba2 2303 	umull	r2, r3, r2, r3
 8006c08:	095b      	lsrs	r3, r3, #5
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c10:	441e      	add	r6, r3
 8006c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c14:	4618      	mov	r0, r3
 8006c16:	f04f 0100 	mov.w	r1, #0
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	1894      	adds	r4, r2, r2
 8006c20:	623c      	str	r4, [r7, #32]
 8006c22:	415b      	adcs	r3, r3
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
 8006c26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c2a:	1812      	adds	r2, r2, r0
 8006c2c:	eb41 0303 	adc.w	r3, r1, r3
 8006c30:	f04f 0400 	mov.w	r4, #0
 8006c34:	f04f 0500 	mov.w	r5, #0
 8006c38:	00dd      	lsls	r5, r3, #3
 8006c3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c3e:	00d4      	lsls	r4, r2, #3
 8006c40:	4622      	mov	r2, r4
 8006c42:	462b      	mov	r3, r5
 8006c44:	1814      	adds	r4, r2, r0
 8006c46:	653c      	str	r4, [r7, #80]	; 0x50
 8006c48:	414b      	adcs	r3, r1
 8006c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	461a      	mov	r2, r3
 8006c52:	f04f 0300 	mov.w	r3, #0
 8006c56:	1891      	adds	r1, r2, r2
 8006c58:	61b9      	str	r1, [r7, #24]
 8006c5a:	415b      	adcs	r3, r3
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c66:	f7f9 fab7 	bl	80001d8 <__aeabi_uldivmod>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4b6c      	ldr	r3, [pc, #432]	; (8006e20 <UART_SetConfig+0x38c>)
 8006c70:	fba3 1302 	umull	r1, r3, r3, r2
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	2164      	movs	r1, #100	; 0x64
 8006c78:	fb01 f303 	mul.w	r3, r1, r3
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	3332      	adds	r3, #50	; 0x32
 8006c82:	4a67      	ldr	r2, [pc, #412]	; (8006e20 <UART_SetConfig+0x38c>)
 8006c84:	fba2 2303 	umull	r2, r3, r2, r3
 8006c88:	095b      	lsrs	r3, r3, #5
 8006c8a:	f003 0207 	and.w	r2, r3, #7
 8006c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4432      	add	r2, r6
 8006c94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c96:	e0b9      	b.n	8006e0c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c9a:	461c      	mov	r4, r3
 8006c9c:	f04f 0500 	mov.w	r5, #0
 8006ca0:	4622      	mov	r2, r4
 8006ca2:	462b      	mov	r3, r5
 8006ca4:	1891      	adds	r1, r2, r2
 8006ca6:	6139      	str	r1, [r7, #16]
 8006ca8:	415b      	adcs	r3, r3
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cb0:	1912      	adds	r2, r2, r4
 8006cb2:	eb45 0303 	adc.w	r3, r5, r3
 8006cb6:	f04f 0000 	mov.w	r0, #0
 8006cba:	f04f 0100 	mov.w	r1, #0
 8006cbe:	00d9      	lsls	r1, r3, #3
 8006cc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cc4:	00d0      	lsls	r0, r2, #3
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	eb12 0804 	adds.w	r8, r2, r4
 8006cce:	eb43 0905 	adc.w	r9, r3, r5
 8006cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f04f 0100 	mov.w	r1, #0
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	f04f 0300 	mov.w	r3, #0
 8006ce4:	008b      	lsls	r3, r1, #2
 8006ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cea:	0082      	lsls	r2, r0, #2
 8006cec:	4640      	mov	r0, r8
 8006cee:	4649      	mov	r1, r9
 8006cf0:	f7f9 fa72 	bl	80001d8 <__aeabi_uldivmod>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <UART_SetConfig+0x38c>)
 8006cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	011e      	lsls	r6, r3, #4
 8006d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d04:	4618      	mov	r0, r3
 8006d06:	f04f 0100 	mov.w	r1, #0
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	1894      	adds	r4, r2, r2
 8006d10:	60bc      	str	r4, [r7, #8]
 8006d12:	415b      	adcs	r3, r3
 8006d14:	60fb      	str	r3, [r7, #12]
 8006d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d1a:	1812      	adds	r2, r2, r0
 8006d1c:	eb41 0303 	adc.w	r3, r1, r3
 8006d20:	f04f 0400 	mov.w	r4, #0
 8006d24:	f04f 0500 	mov.w	r5, #0
 8006d28:	00dd      	lsls	r5, r3, #3
 8006d2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d2e:	00d4      	lsls	r4, r2, #3
 8006d30:	4622      	mov	r2, r4
 8006d32:	462b      	mov	r3, r5
 8006d34:	1814      	adds	r4, r2, r0
 8006d36:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d38:	414b      	adcs	r3, r1
 8006d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f04f 0100 	mov.w	r1, #0
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	008b      	lsls	r3, r1, #2
 8006d50:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d54:	0082      	lsls	r2, r0, #2
 8006d56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d5a:	f7f9 fa3d 	bl	80001d8 <__aeabi_uldivmod>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4b2f      	ldr	r3, [pc, #188]	; (8006e20 <UART_SetConfig+0x38c>)
 8006d64:	fba3 1302 	umull	r1, r3, r3, r2
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	2164      	movs	r1, #100	; 0x64
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	3332      	adds	r3, #50	; 0x32
 8006d76:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <UART_SetConfig+0x38c>)
 8006d78:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d82:	441e      	add	r6, r3
 8006d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d86:	4618      	mov	r0, r3
 8006d88:	f04f 0100 	mov.w	r1, #0
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	1894      	adds	r4, r2, r2
 8006d92:	603c      	str	r4, [r7, #0]
 8006d94:	415b      	adcs	r3, r3
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d9c:	1812      	adds	r2, r2, r0
 8006d9e:	eb41 0303 	adc.w	r3, r1, r3
 8006da2:	f04f 0400 	mov.w	r4, #0
 8006da6:	f04f 0500 	mov.w	r5, #0
 8006daa:	00dd      	lsls	r5, r3, #3
 8006dac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006db0:	00d4      	lsls	r4, r2, #3
 8006db2:	4622      	mov	r2, r4
 8006db4:	462b      	mov	r3, r5
 8006db6:	eb12 0a00 	adds.w	sl, r2, r0
 8006dba:	eb43 0b01 	adc.w	fp, r3, r1
 8006dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f04f 0100 	mov.w	r1, #0
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	008b      	lsls	r3, r1, #2
 8006dd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dd6:	0082      	lsls	r2, r0, #2
 8006dd8:	4650      	mov	r0, sl
 8006dda:	4659      	mov	r1, fp
 8006ddc:	f7f9 f9fc 	bl	80001d8 <__aeabi_uldivmod>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <UART_SetConfig+0x38c>)
 8006de6:	fba3 1302 	umull	r1, r3, r3, r2
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	2164      	movs	r1, #100	; 0x64
 8006dee:	fb01 f303 	mul.w	r3, r1, r3
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	011b      	lsls	r3, r3, #4
 8006df6:	3332      	adds	r3, #50	; 0x32
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <UART_SetConfig+0x38c>)
 8006dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	f003 020f 	and.w	r2, r3, #15
 8006e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4432      	add	r2, r6
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	377c      	adds	r7, #124	; 0x7c
 8006e10:	46bd      	mov	sp, r7
 8006e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e16:	bf00      	nop
 8006e18:	40011000 	.word	0x40011000
 8006e1c:	40011400 	.word	0x40011400
 8006e20:	51eb851f 	.word	0x51eb851f

08006e24 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4b20      	ldr	r3, [pc, #128]	; (8006ec4 <FSMC_NORSRAM_Init+0xa0>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e4e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006e54:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006e5a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006e60:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006e66:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006e6c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e72:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006e78:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006e7e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006e84:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006e8a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006e90:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d103      	bne.n	8006ea8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ea6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	fff00080 	.word	0xfff00080

08006ec8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006eea:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ef6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006efe:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f06:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f10:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	3b02      	subs	r3, #2
 8006f18:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f1a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f20:	4313      	orrs	r3, r2
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6979      	ldr	r1, [r7, #20]
 8006f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f5c:	d122      	bne.n	8006fa4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f66:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f7a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f82:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f8a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f90:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6979      	ldr	r1, [r7, #20]
 8006f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006fa2:	e005      	b.n	8006fb0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	cff00000 	.word	0xcff00000

08006fc4 <__libc_init_array>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	4d0d      	ldr	r5, [pc, #52]	; (8006ffc <__libc_init_array+0x38>)
 8006fc8:	4c0d      	ldr	r4, [pc, #52]	; (8007000 <__libc_init_array+0x3c>)
 8006fca:	1b64      	subs	r4, r4, r5
 8006fcc:	10a4      	asrs	r4, r4, #2
 8006fce:	2600      	movs	r6, #0
 8006fd0:	42a6      	cmp	r6, r4
 8006fd2:	d109      	bne.n	8006fe8 <__libc_init_array+0x24>
 8006fd4:	4d0b      	ldr	r5, [pc, #44]	; (8007004 <__libc_init_array+0x40>)
 8006fd6:	4c0c      	ldr	r4, [pc, #48]	; (8007008 <__libc_init_array+0x44>)
 8006fd8:	f000 f820 	bl	800701c <_init>
 8006fdc:	1b64      	subs	r4, r4, r5
 8006fde:	10a4      	asrs	r4, r4, #2
 8006fe0:	2600      	movs	r6, #0
 8006fe2:	42a6      	cmp	r6, r4
 8006fe4:	d105      	bne.n	8006ff2 <__libc_init_array+0x2e>
 8006fe6:	bd70      	pop	{r4, r5, r6, pc}
 8006fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fec:	4798      	blx	r3
 8006fee:	3601      	adds	r6, #1
 8006ff0:	e7ee      	b.n	8006fd0 <__libc_init_array+0xc>
 8006ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff6:	4798      	blx	r3
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	e7f2      	b.n	8006fe2 <__libc_init_array+0x1e>
 8006ffc:	0800a01c 	.word	0x0800a01c
 8007000:	0800a01c 	.word	0x0800a01c
 8007004:	0800a01c 	.word	0x0800a01c
 8007008:	0800a020 	.word	0x0800a020

0800700c <memset>:
 800700c:	4402      	add	r2, r0
 800700e:	4603      	mov	r3, r0
 8007010:	4293      	cmp	r3, r2
 8007012:	d100      	bne.n	8007016 <memset+0xa>
 8007014:	4770      	bx	lr
 8007016:	f803 1b01 	strb.w	r1, [r3], #1
 800701a:	e7f9      	b.n	8007010 <memset+0x4>

0800701c <_init>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr

08007028 <_fini>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr
