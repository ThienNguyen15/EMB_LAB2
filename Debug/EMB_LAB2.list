
EMB_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fd8  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f80  08009f80  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f88  08009f88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000284  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4ae  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f30  00000000  00000000  0003f4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00043428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c0  00000000  00000000  00044990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253b9  00000000  00000000  00045d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d225  00000000  00000000  0006b109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a2b  00000000  00000000  0008832e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015bd59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057bc  00000000  00000000  0015bdac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f90 	.word	0x08006f90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006f90 	.word	0x08006f90

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fdbf 	bl	800305c <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 fdb2 	bl	800305c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fdad 	bl	800305c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f004 fbd4 	bl	8004cb6 <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000030 	.word	0x20000030
 80005b8:	200001b0 	.word	0x200001b0
 80005bc:	200000a0 	.word	0x200000a0

080005c0 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af04      	add	r7, sp, #16
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f91e 	bl	8002814 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	230a      	movs	r3, #10
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f107 030f 	add.w	r3, r7, #15
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	21d0      	movs	r1, #208	; 0xd0
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <ds3231_Write+0x40>)
 80005f4:	f002 feaa 	bl	800334c <HAL_I2C_Mem_Write>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000120 	.word	0x20000120

08000604 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800060a:	230a      	movs	r3, #10
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2307      	movs	r3, #7
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	2200      	movs	r2, #0
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <ds3231_ReadTime+0xa8>)
 800061e:	f002 ff8f 	bl	8003540 <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f8da 	bl	80027e0 <BCD2DEC>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <ds3231_ReadTime+0xac>)
 8000632:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	4618      	mov	r0, r3
 800063a:	f002 f8d1 	bl	80027e0 <BCD2DEC>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <ds3231_ReadTime+0xb0>)
 8000644:	701a      	strb	r2, [r3, #0]
	ds3231_hour = BCD2DEC(ds3231_buffer[2]);
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f8c8 	bl	80027e0 <BCD2DEC>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <ds3231_ReadTime+0xb4>)
 8000656:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800065a:	78db      	ldrb	r3, [r3, #3]
 800065c:	4618      	mov	r0, r3
 800065e:	f002 f8bf 	bl	80027e0 <BCD2DEC>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <ds3231_ReadTime+0xb8>)
 8000668:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f8b6 	bl	80027e0 <BCD2DEC>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <ds3231_ReadTime+0xbc>)
 800067a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f8ad 	bl	80027e0 <BCD2DEC>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <ds3231_ReadTime+0xc0>)
 800068c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f8a4 	bl	80027e0 <BCD2DEC>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <ds3231_ReadTime+0xc4>)
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000c8 	.word	0x200000c8
 80006ac:	20000120 	.word	0x20000120
 80006b0:	200000c0 	.word	0x200000c0
 80006b4:	200000c3 	.word	0x200000c3
 80006b8:	200000c2 	.word	0x200000c2
 80006bc:	200000c5 	.word	0x200000c5
 80006c0:	200000c4 	.word	0x200000c4
 80006c4:	200000c6 	.word	0x200000c6
 80006c8:	200000c1 	.word	0x200000c1

080006cc <initializeTime>:
 */

#include "global.h"

void initializeTime()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80006d0:	2118      	movs	r1, #24
 80006d2:	2006      	movs	r0, #6
 80006d4:	f7ff ff74 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80006d8:	210b      	movs	r1, #11
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff70 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 80006e0:	210f      	movs	r1, #15
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff ff6c 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80006e8:	2106      	movs	r1, #6
 80006ea:	2003      	movs	r0, #3
 80006ec:	f7ff ff68 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 15);
 80006f0:	210f      	movs	r1, #15
 80006f2:	2002      	movs	r0, #2
 80006f4:	f7ff ff64 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 15);
 80006f8:	210f      	movs	r1, #15
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ff60 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 15);
 8000700:	210f      	movs	r1, #15
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ff5c 	bl	80005c0 <ds3231_Write>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <updateTime>:

void updateTime(int new_year, int new_month, int new_date, int new_day, int new_hour, int new_min, int new_sec)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	603b      	str	r3, [r7, #0]
	ds3231_Write(ADDRESS_YEAR, new_year);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	2006      	movs	r0, #6
 8000722:	f7ff ff4d 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, new_month);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	2005      	movs	r0, #5
 800072e:	f7ff ff47 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, new_date);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	2004      	movs	r0, #4
 800073a:	f7ff ff41 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, new_day);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff ff3b 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, new_hour);
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff ff35 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, new_min);
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4619      	mov	r1, r3
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ff2f 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, new_sec);
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ff29 	bl	80005c0 <ds3231_Write>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <updateAlarmTime>:

void updateAlarmTime(int new_year, int new_month, int new_date, int new_day, int new_hour, int new_min, int new_sec)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
    year_alarm = new_year;
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <updateAlarmTime+0x44>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6013      	str	r3, [r2, #0]
    month_alarm = new_month;
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <updateAlarmTime+0x48>)
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	6013      	str	r3, [r2, #0]
    date_alarm = new_date;
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <updateAlarmTime+0x4c>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6013      	str	r3, [r2, #0]
    day_alarm = new_day;
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <updateAlarmTime+0x50>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	6013      	str	r3, [r2, #0]
    hour_alarm = new_hour;
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <updateAlarmTime+0x54>)
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	6013      	str	r3, [r2, #0]
    min_alarm = new_min;
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <updateAlarmTime+0x58>)
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	6013      	str	r3, [r2, #0]
    sec_alarm = new_sec;
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <updateAlarmTime+0x5c>)
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	20000064 	.word	0x20000064
 80007c0:	20000068 	.word	0x20000068
 80007c4:	2000006c 	.word	0x2000006c
 80007c8:	20000070 	.word	0x20000070
 80007cc:	20000074 	.word	0x20000074
 80007d0:	20000078 	.word	0x20000078
 80007d4:	2000007c 	.word	0x2000007c

080007d8 <displayTime>:
void displayTime()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af04      	add	r7, sp, #16
    int blinkColor1, blinkColor2;
    if(timer1 % 10 == 0)
 80007de:	4b9c      	ldr	r3, [pc, #624]	; (8000a50 <displayTime+0x278>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	4b9c      	ldr	r3, [pc, #624]	; (8000a54 <displayTime+0x27c>)
 80007e4:	fb83 2301 	smull	r2, r3, r3, r1
 80007e8:	109a      	asrs	r2, r3, #2
 80007ea:	17cb      	asrs	r3, r1, #31
 80007ec:	1ad2      	subs	r2, r2, r3
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	1aca      	subs	r2, r1, r3
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8125 	bne.w	8000a48 <displayTime+0x270>
    {
    	if ((mode == SettingMode || mode == AlarmSettingMode))
 80007fe:	4b96      	ldr	r3, [pc, #600]	; (8000a58 <displayTime+0x280>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d004      	beq.n	8000810 <displayTime+0x38>
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <displayTime+0x280>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b03      	cmp	r3, #3
 800080c:	f040 80b3 	bne.w	8000976 <displayTime+0x19e>
    	{
    		blinkstate ^= 1;
 8000810:	4b92      	ldr	r3, [pc, #584]	; (8000a5c <displayTime+0x284>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	4a90      	ldr	r2, [pc, #576]	; (8000a5c <displayTime+0x284>)
 800081a:	6013      	str	r3, [r2, #0]
    		blinkColor1 = (blinkstate == 1) ? GREEN : BLACK;
 800081c:	4b8f      	ldr	r3, [pc, #572]	; (8000a5c <displayTime+0x284>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d102      	bne.n	800082a <displayTime+0x52>
 8000824:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000828:	e000      	b.n	800082c <displayTime+0x54>
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
    		blinkColor2 = (blinkstate == 1) ? YELLOW : BLACK;
 800082e:	4b8b      	ldr	r3, [pc, #556]	; (8000a5c <displayTime+0x284>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d102      	bne.n	800083c <displayTime+0x64>
 8000836:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800083a:	e000      	b.n	800083e <displayTime+0x66>
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]

    		lcd_ShowIntNum(70, 130, hour_temp, 2, (current_parameter == 2) ? blinkColor1 : GREEN, BLACK, 24);
 8000840:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <displayTime+0x288>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b87      	ldr	r3, [pc, #540]	; (8000a64 <displayTime+0x28c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d102      	bne.n	8000854 <displayTime+0x7c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	b29b      	uxth	r3, r3
 8000852:	e001      	b.n	8000858 <displayTime+0x80>
 8000854:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000858:	2118      	movs	r1, #24
 800085a:	9102      	str	r1, [sp, #8]
 800085c:	2100      	movs	r1, #0
 800085e:	9101      	str	r1, [sp, #4]
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2302      	movs	r3, #2
 8000864:	2182      	movs	r1, #130	; 0x82
 8000866:	2046      	movs	r0, #70	; 0x46
 8000868:	f001 f924 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 130, min_temp, 2, (current_parameter == 1) ? blinkColor1 : GREEN, BLACK, 24);
 800086c:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <displayTime+0x290>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b7c      	ldr	r3, [pc, #496]	; (8000a64 <displayTime+0x28c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d102      	bne.n	8000880 <displayTime+0xa8>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	b29b      	uxth	r3, r3
 800087e:	e001      	b.n	8000884 <displayTime+0xac>
 8000880:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000884:	2118      	movs	r1, #24
 8000886:	9102      	str	r1, [sp, #8]
 8000888:	2100      	movs	r1, #0
 800088a:	9101      	str	r1, [sp, #4]
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2302      	movs	r3, #2
 8000890:	2182      	movs	r1, #130	; 0x82
 8000892:	206e      	movs	r0, #110	; 0x6e
 8000894:	f001 f90e 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 130, sec_temp, 2, (current_parameter == 0) ? blinkColor1 : GREEN, BLACK, 24);
 8000898:	4b74      	ldr	r3, [pc, #464]	; (8000a6c <displayTime+0x294>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <displayTime+0x28c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d102      	bne.n	80008ac <displayTime+0xd4>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	e001      	b.n	80008b0 <displayTime+0xd8>
 80008ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008b0:	2118      	movs	r1, #24
 80008b2:	9102      	str	r1, [sp, #8]
 80008b4:	2100      	movs	r1, #0
 80008b6:	9101      	str	r1, [sp, #4]
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2302      	movs	r3, #2
 80008bc:	2182      	movs	r1, #130	; 0x82
 80008be:	2096      	movs	r0, #150	; 0x96
 80008c0:	f001 f8f8 	bl	8001ab4 <lcd_ShowIntNum>

    		lcd_ShowIntNum(20, 100, day_temp, 2, (current_parameter == 3) ? blinkColor2 : YELLOW, BLACK, 24);
 80008c4:	4b6a      	ldr	r3, [pc, #424]	; (8000a70 <displayTime+0x298>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b66      	ldr	r3, [pc, #408]	; (8000a64 <displayTime+0x28c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d102      	bne.n	80008d8 <displayTime+0x100>
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	e001      	b.n	80008dc <displayTime+0x104>
 80008d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80008dc:	2118      	movs	r1, #24
 80008de:	9102      	str	r1, [sp, #8]
 80008e0:	2100      	movs	r1, #0
 80008e2:	9101      	str	r1, [sp, #4]
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2302      	movs	r3, #2
 80008e8:	2164      	movs	r1, #100	; 0x64
 80008ea:	2014      	movs	r0, #20
 80008ec:	f001 f8e2 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, date_temp, 2, (current_parameter == 4) ? blinkColor2 : YELLOW, BLACK, 24);
 80008f0:	4b60      	ldr	r3, [pc, #384]	; (8000a74 <displayTime+0x29c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b5b      	ldr	r3, [pc, #364]	; (8000a64 <displayTime+0x28c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d102      	bne.n	8000904 <displayTime+0x12c>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	e001      	b.n	8000908 <displayTime+0x130>
 8000904:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000908:	2118      	movs	r1, #24
 800090a:	9102      	str	r1, [sp, #8]
 800090c:	2100      	movs	r1, #0
 800090e:	9101      	str	r1, [sp, #4]
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2302      	movs	r3, #2
 8000914:	2164      	movs	r1, #100	; 0x64
 8000916:	2046      	movs	r0, #70	; 0x46
 8000918:	f001 f8cc 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 100, month_temp, 2, (current_parameter == 5) ? blinkColor2 : YELLOW, BLACK, 24);
 800091c:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <displayTime+0x2a0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <displayTime+0x28c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b05      	cmp	r3, #5
 8000928:	d102      	bne.n	8000930 <displayTime+0x158>
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b29b      	uxth	r3, r3
 800092e:	e001      	b.n	8000934 <displayTime+0x15c>
 8000930:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000934:	2118      	movs	r1, #24
 8000936:	9102      	str	r1, [sp, #8]
 8000938:	2100      	movs	r1, #0
 800093a:	9101      	str	r1, [sp, #4]
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2302      	movs	r3, #2
 8000940:	2164      	movs	r1, #100	; 0x64
 8000942:	206e      	movs	r0, #110	; 0x6e
 8000944:	f001 f8b6 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 100, year_temp, 2, (current_parameter == 6) ? blinkColor2 : YELLOW, BLACK, 24);
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <displayTime+0x2a4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <displayTime+0x28c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b06      	cmp	r3, #6
 8000954:	d102      	bne.n	800095c <displayTime+0x184>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	e001      	b.n	8000960 <displayTime+0x188>
 800095c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000960:	2118      	movs	r1, #24
 8000962:	9102      	str	r1, [sp, #8]
 8000964:	2100      	movs	r1, #0
 8000966:	9101      	str	r1, [sp, #4]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	2164      	movs	r1, #100	; 0x64
 800096e:	2096      	movs	r0, #150	; 0x96
 8000970:	f001 f8a0 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, ds3231_date, 2, YELLOW, BLACK, 24);
    		lcd_ShowIntNum(110, 100, ds3231_month, 2, YELLOW, BLACK, 24);
    		lcd_ShowIntNum(150, 100, ds3231_year, 2, YELLOW, BLACK, 24);
    	}
    }
}
 8000974:	e068      	b.n	8000a48 <displayTime+0x270>
    		lcd_ShowIntNum(70, 130, ds3231_hour, 2, GREEN, BLACK, 24);
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <displayTime+0x2a8>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b29a      	uxth	r2, r3
 800097c:	2318      	movs	r3, #24
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2300      	movs	r3, #0
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2302      	movs	r3, #2
 800098c:	2182      	movs	r1, #130	; 0x82
 800098e:	2046      	movs	r0, #70	; 0x46
 8000990:	f001 f890 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 130, ds3231_min, 2, GREEN, BLACK, 24);
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <displayTime+0x2ac>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2318      	movs	r3, #24
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2300      	movs	r3, #0
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2302      	movs	r3, #2
 80009aa:	2182      	movs	r1, #130	; 0x82
 80009ac:	206e      	movs	r0, #110	; 0x6e
 80009ae:	f001 f881 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 130, ds3231_sec, 2, GREEN, BLACK, 24);
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <displayTime+0x2b0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	2318      	movs	r3, #24
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2300      	movs	r3, #0
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2302      	movs	r3, #2
 80009c8:	2182      	movs	r1, #130	; 0x82
 80009ca:	2096      	movs	r0, #150	; 0x96
 80009cc:	f001 f872 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(20, 100, ds3231_day, 2, YELLOW, BLACK, 24);
 80009d0:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <displayTime+0x2b4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	2318      	movs	r3, #24
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2302      	movs	r3, #2
 80009e6:	2164      	movs	r1, #100	; 0x64
 80009e8:	2014      	movs	r0, #20
 80009ea:	f001 f863 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, ds3231_date, 2, YELLOW, BLACK, 24);
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <displayTime+0x2b8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	2318      	movs	r3, #24
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2302      	movs	r3, #2
 8000a04:	2164      	movs	r1, #100	; 0x64
 8000a06:	2046      	movs	r0, #70	; 0x46
 8000a08:	f001 f854 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 100, ds3231_month, 2, YELLOW, BLACK, 24);
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <displayTime+0x2bc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	2318      	movs	r3, #24
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2300      	movs	r3, #0
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2302      	movs	r3, #2
 8000a22:	2164      	movs	r1, #100	; 0x64
 8000a24:	206e      	movs	r0, #110	; 0x6e
 8000a26:	f001 f845 	bl	8001ab4 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 100, ds3231_year, 2, YELLOW, BLACK, 24);
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <displayTime+0x2c0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	2318      	movs	r3, #24
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	2300      	movs	r3, #0
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2164      	movs	r1, #100	; 0x64
 8000a42:	2096      	movs	r0, #150	; 0x96
 8000a44:	f001 f836 	bl	8001ab4 <lcd_ShowIntNum>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000003c 	.word	0x2000003c
 8000a54:	66666667 	.word	0x66666667
 8000a58:	20000038 	.word	0x20000038
 8000a5c:	20000088 	.word	0x20000088
 8000a60:	20000058 	.word	0x20000058
 8000a64:	20000084 	.word	0x20000084
 8000a68:	2000005c 	.word	0x2000005c
 8000a6c:	20000060 	.word	0x20000060
 8000a70:	20000054 	.word	0x20000054
 8000a74:	20000050 	.word	0x20000050
 8000a78:	2000004c 	.word	0x2000004c
 8000a7c:	20000048 	.word	0x20000048
 8000a80:	200000c2 	.word	0x200000c2
 8000a84:	200000c3 	.word	0x200000c3
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	200000c5 	.word	0x200000c5
 8000a90:	200000c4 	.word	0x200000c4
 8000a94:	200000c6 	.word	0x200000c6
 8000a98:	200000c1 	.word	0x200000c1

08000a9c <displayStatus>:

void displayStatus()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af04      	add	r7, sp, #16
    lcd_Fill(0, 0, 240, 20, BLUE);
 8000aa2:	231f      	movs	r3, #31
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	22f0      	movs	r2, #240	; 0xf0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fec7 	bl	8001840 <lcd_Fill>

    switch (mode)
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <displayStatus+0x88>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d022      	beq.n	8000b00 <displayStatus+0x64>
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	dc2e      	bgt.n	8000b1c <displayStatus+0x80>
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d002      	beq.n	8000ac8 <displayStatus+0x2c>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d00e      	beq.n	8000ae4 <displayStatus+0x48>
            break;
        case AlarmSettingMode:
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Alarm Setting", RED, BLUE, 16, 1);
            break;
        default:
            break;
 8000ac6:	e029      	b.n	8000b1c <displayStatus+0x80>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Normal", RED, BLUE, 16, 1);
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	2310      	movs	r3, #16
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	231f      	movs	r3, #31
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <displayStatus+0x8c>)
 8000ada:	2102      	movs	r1, #2
 8000adc:	2000      	movs	r0, #0
 8000ade:	f001 fa4f 	bl	8001f80 <lcd_StrCenter>
            break;
 8000ae2:	e01c      	b.n	8000b1e <displayStatus+0x82>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Time Setting", RED, BLUE, 16, 1);
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2310      	movs	r3, #16
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	231f      	movs	r3, #31
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <displayStatus+0x90>)
 8000af6:	2102      	movs	r1, #2
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 fa41 	bl	8001f80 <lcd_StrCenter>
            break;
 8000afe:	e00e      	b.n	8000b1e <displayStatus+0x82>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Alarm Setting", RED, BLUE, 16, 1);
 8000b00:	2301      	movs	r3, #1
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	2310      	movs	r3, #16
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	231f      	movs	r3, #31
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <displayStatus+0x94>)
 8000b12:	2102      	movs	r1, #2
 8000b14:	2000      	movs	r0, #0
 8000b16:	f001 fa33 	bl	8001f80 <lcd_StrCenter>
            break;
 8000b1a:	e000      	b.n	8000b1e <displayStatus+0x82>
            break;
 8000b1c:	bf00      	nop
    }
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000038 	.word	0x20000038
 8000b28:	08006fa8 	.word	0x08006fa8
 8000b2c:	08006fb8 	.word	0x08006fb8
 8000b30:	08006fcc 	.word	0x08006fcc

08000b34 <checkAlarmTime>:

int checkAlarmTime()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	return (ds3231_hour == hour_alarm && (ds3231_min == min_alarm || ds3231_min == min_alarm + 1) && ds3231_sec == sec_alarm
 8000b38:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <checkAlarmTime+0x88>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <checkAlarmTime+0x8c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
			&& ds3231_year == year_alarm && ds3231_month == month_alarm && ds3231_date == date_alarm
			&& ds3231_day == day_alarm) ? 1 : 0;
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d133      	bne.n	8000bae <checkAlarmTime+0x7a>
	return (ds3231_hour == hour_alarm && (ds3231_min == min_alarm || ds3231_min == min_alarm + 1) && ds3231_sec == sec_alarm
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <checkAlarmTime+0x90>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <checkAlarmTime+0x94>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d007      	beq.n	8000b64 <checkAlarmTime+0x30>
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <checkAlarmTime+0x90>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <checkAlarmTime+0x94>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d124      	bne.n	8000bae <checkAlarmTime+0x7a>
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <checkAlarmTime+0x98>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <checkAlarmTime+0x9c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d11d      	bne.n	8000bae <checkAlarmTime+0x7a>
			&& ds3231_year == year_alarm && ds3231_month == month_alarm && ds3231_date == date_alarm
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <checkAlarmTime+0xa0>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <checkAlarmTime+0xa4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d116      	bne.n	8000bae <checkAlarmTime+0x7a>
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <checkAlarmTime+0xa8>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <checkAlarmTime+0xac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d10f      	bne.n	8000bae <checkAlarmTime+0x7a>
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <checkAlarmTime+0xb0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <checkAlarmTime+0xb4>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d108      	bne.n	8000bae <checkAlarmTime+0x7a>
			&& ds3231_day == day_alarm) ? 1 : 0;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <checkAlarmTime+0xb8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <checkAlarmTime+0xbc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d101      	bne.n	8000bae <checkAlarmTime+0x7a>
 8000baa:	2301      	movs	r3, #1
 8000bac:	e000      	b.n	8000bb0 <checkAlarmTime+0x7c>
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200000c2 	.word	0x200000c2
 8000bc0:	20000074 	.word	0x20000074
 8000bc4:	200000c3 	.word	0x200000c3
 8000bc8:	20000078 	.word	0x20000078
 8000bcc:	200000c0 	.word	0x200000c0
 8000bd0:	2000007c 	.word	0x2000007c
 8000bd4:	200000c1 	.word	0x200000c1
 8000bd8:	20000064 	.word	0x20000064
 8000bdc:	200000c6 	.word	0x200000c6
 8000be0:	20000068 	.word	0x20000068
 8000be4:	200000c4 	.word	0x200000c4
 8000be8:	2000006c 	.word	0x2000006c
 8000bec:	200000c5 	.word	0x200000c5
 8000bf0:	20000070 	.word	0x20000070

08000bf4 <warnAlarmTime>:

void warnAlarmTime(){lcd_ShowStr(70, 160, (unsigned char *)"ALARM!", WHITE, RED, 16, 0);}
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9302      	str	r3, [sp, #8]
 8000bfe:	2310      	movs	r3, #16
 8000c00:	9301      	str	r3, [sp, #4]
 8000c02:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0c:	4a03      	ldr	r2, [pc, #12]	; (8000c1c <warnAlarmTime+0x28>)
 8000c0e:	21a0      	movs	r1, #160	; 0xa0
 8000c10:	2046      	movs	r0, #70	; 0x46
 8000c12:	f001 f951 	bl	8001eb8 <lcd_ShowStr>
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	08006fe0 	.word	0x08006fe0

08000c20 <increment>:

void increment()
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	if(alarm_on == 0)
 8000c24:	4b93      	ldr	r3, [pc, #588]	; (8000e74 <increment+0x254>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 808f 	bne.w	8000d4c <increment+0x12c>
	{
		switch (current_parameter)
 8000c2e:	4b92      	ldr	r3, [pc, #584]	; (8000e78 <increment+0x258>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	f200 8118 	bhi.w	8000e68 <increment+0x248>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <increment+0x20>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c5d 	.word	0x08000c5d
 8000c44:	08000c81 	.word	0x08000c81
 8000c48:	08000ca5 	.word	0x08000ca5
 8000c4c:	08000cc7 	.word	0x08000cc7
 8000c50:	08000ce9 	.word	0x08000ce9
 8000c54:	08000d0b 	.word	0x08000d0b
 8000c58:	08000d2d 	.word	0x08000d2d
		{
		case 0: sec_temp = (sec_temp + 1) % 60; 		break;
 8000c5c:	4b87      	ldr	r3, [pc, #540]	; (8000e7c <increment+0x25c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1c5a      	adds	r2, r3, #1
 8000c62:	4b87      	ldr	r3, [pc, #540]	; (8000e80 <increment+0x260>)
 8000c64:	fb83 1302 	smull	r1, r3, r3, r2
 8000c68:	4413      	add	r3, r2
 8000c6a:	1159      	asrs	r1, r3, #5
 8000c6c:	17d3      	asrs	r3, r2, #31
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	460b      	mov	r3, r1
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	1ad1      	subs	r1, r2, r3
 8000c7a:	4b80      	ldr	r3, [pc, #512]	; (8000e7c <increment+0x25c>)
 8000c7c:	6019      	str	r1, [r3, #0]
 8000c7e:	e0f3      	b.n	8000e68 <increment+0x248>
		case 1: min_temp = (min_temp + 1) % 60; 		break;
 8000c80:	4b80      	ldr	r3, [pc, #512]	; (8000e84 <increment+0x264>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	4b7e      	ldr	r3, [pc, #504]	; (8000e80 <increment+0x260>)
 8000c88:	fb83 1302 	smull	r1, r3, r3, r2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	1159      	asrs	r1, r3, #5
 8000c90:	17d3      	asrs	r3, r2, #31
 8000c92:	1ac9      	subs	r1, r1, r3
 8000c94:	460b      	mov	r3, r1
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	1ad1      	subs	r1, r2, r3
 8000c9e:	4b79      	ldr	r3, [pc, #484]	; (8000e84 <increment+0x264>)
 8000ca0:	6019      	str	r1, [r3, #0]
 8000ca2:	e0e1      	b.n	8000e68 <increment+0x248>
		case 2: hour_temp = (hour_temp + 1) % 24; 		break;
 8000ca4:	4b78      	ldr	r3, [pc, #480]	; (8000e88 <increment+0x268>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	1c59      	adds	r1, r3, #1
 8000caa:	4b78      	ldr	r3, [pc, #480]	; (8000e8c <increment+0x26c>)
 8000cac:	fb83 2301 	smull	r2, r3, r3, r1
 8000cb0:	109a      	asrs	r2, r3, #2
 8000cb2:	17cb      	asrs	r3, r1, #31
 8000cb4:	1ad2      	subs	r2, r2, r3
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	1aca      	subs	r2, r1, r3
 8000cc0:	4b71      	ldr	r3, [pc, #452]	; (8000e88 <increment+0x268>)
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e0d0      	b.n	8000e68 <increment+0x248>
		case 3: day_temp = (day_temp % 7) + 1; 			break;
 8000cc6:	4b72      	ldr	r3, [pc, #456]	; (8000e90 <increment+0x270>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	4b72      	ldr	r3, [pc, #456]	; (8000e94 <increment+0x274>)
 8000ccc:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd0:	4413      	add	r3, r2
 8000cd2:	1099      	asrs	r1, r3, #2
 8000cd4:	17d3      	asrs	r3, r2, #31
 8000cd6:	1ac9      	subs	r1, r1, r3
 8000cd8:	460b      	mov	r3, r1
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	1ad1      	subs	r1, r2, r3
 8000ce0:	1c4b      	adds	r3, r1, #1
 8000ce2:	4a6b      	ldr	r2, [pc, #428]	; (8000e90 <increment+0x270>)
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e0bf      	b.n	8000e68 <increment+0x248>
		case 4: date_temp = (date_temp % 31) + 1; 		break;
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <increment+0x278>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b6b      	ldr	r3, [pc, #428]	; (8000e9c <increment+0x27c>)
 8000cee:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	1119      	asrs	r1, r3, #4
 8000cf6:	17d3      	asrs	r3, r2, #31
 8000cf8:	1ac9      	subs	r1, r1, r3
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	015b      	lsls	r3, r3, #5
 8000cfe:	1a5b      	subs	r3, r3, r1
 8000d00:	1ad1      	subs	r1, r2, r3
 8000d02:	1c4b      	adds	r3, r1, #1
 8000d04:	4a64      	ldr	r2, [pc, #400]	; (8000e98 <increment+0x278>)
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e0ae      	b.n	8000e68 <increment+0x248>
		case 5: month_temp = (month_temp % 12) + 1; 	break;
 8000d0a:	4b65      	ldr	r3, [pc, #404]	; (8000ea0 <increment+0x280>)
 8000d0c:	6819      	ldr	r1, [r3, #0]
 8000d0e:	4b5f      	ldr	r3, [pc, #380]	; (8000e8c <increment+0x26c>)
 8000d10:	fb83 2301 	smull	r2, r3, r3, r1
 8000d14:	105a      	asrs	r2, r3, #1
 8000d16:	17cb      	asrs	r3, r1, #31
 8000d18:	1ad2      	subs	r2, r2, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	1aca      	subs	r2, r1, r3
 8000d24:	1c53      	adds	r3, r2, #1
 8000d26:	4a5e      	ldr	r2, [pc, #376]	; (8000ea0 <increment+0x280>)
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e09d      	b.n	8000e68 <increment+0x248>
		case 6: year_temp = (year_temp % 100) + 1; 		break;
 8000d2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ea4 <increment+0x284>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <increment+0x288>)
 8000d32:	fb83 1302 	smull	r1, r3, r3, r2
 8000d36:	1159      	asrs	r1, r3, #5
 8000d38:	17d3      	asrs	r3, r2, #31
 8000d3a:	1acb      	subs	r3, r1, r3
 8000d3c:	2164      	movs	r1, #100	; 0x64
 8000d3e:	fb01 f303 	mul.w	r3, r1, r3
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	4a57      	ldr	r2, [pc, #348]	; (8000ea4 <increment+0x284>)
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e08d      	b.n	8000e68 <increment+0x248>
		}
	}
	else
	{
		switch (current_parameter)
 8000d4c:	4b4a      	ldr	r3, [pc, #296]	; (8000e78 <increment+0x258>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b06      	cmp	r3, #6
 8000d52:	f200 8089 	bhi.w	8000e68 <increment+0x248>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <increment+0x13c>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000d79 	.word	0x08000d79
 8000d60:	08000d9d 	.word	0x08000d9d
 8000d64:	08000dc1 	.word	0x08000dc1
 8000d68:	08000de3 	.word	0x08000de3
 8000d6c:	08000e05 	.word	0x08000e05
 8000d70:	08000e27 	.word	0x08000e27
 8000d74:	08000e49 	.word	0x08000e49
		{
		case 0: sec_alarm = (sec_alarm + 1) % 60; 		break;
 8000d78:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <increment+0x28c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	4b40      	ldr	r3, [pc, #256]	; (8000e80 <increment+0x260>)
 8000d80:	fb83 1302 	smull	r1, r3, r3, r2
 8000d84:	4413      	add	r3, r2
 8000d86:	1159      	asrs	r1, r3, #5
 8000d88:	17d3      	asrs	r3, r2, #31
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	1ad1      	subs	r1, r2, r3
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <increment+0x28c>)
 8000d98:	6019      	str	r1, [r3, #0]
 8000d9a:	e065      	b.n	8000e68 <increment+0x248>
		case 1: min_alarm = (min_alarm + 1) % 60; 		break;
 8000d9c:	4b44      	ldr	r3, [pc, #272]	; (8000eb0 <increment+0x290>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <increment+0x260>)
 8000da4:	fb83 1302 	smull	r1, r3, r3, r2
 8000da8:	4413      	add	r3, r2
 8000daa:	1159      	asrs	r1, r3, #5
 8000dac:	17d3      	asrs	r3, r2, #31
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	1ad1      	subs	r1, r2, r3
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <increment+0x290>)
 8000dbc:	6019      	str	r1, [r3, #0]
 8000dbe:	e053      	b.n	8000e68 <increment+0x248>
		case 2: hour_alarm = (hour_alarm + 1) % 24; 	break;
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <increment+0x294>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	1c59      	adds	r1, r3, #1
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <increment+0x26c>)
 8000dc8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dcc:	109a      	asrs	r2, r3, #2
 8000dce:	17cb      	asrs	r3, r1, #31
 8000dd0:	1ad2      	subs	r2, r2, r3
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	1aca      	subs	r2, r1, r3
 8000ddc:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <increment+0x294>)
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e042      	b.n	8000e68 <increment+0x248>
		case 3: day_alarm = (day_alarm % 7) + 1; 		break;
 8000de2:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <increment+0x298>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <increment+0x274>)
 8000de8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dec:	4413      	add	r3, r2
 8000dee:	1099      	asrs	r1, r3, #2
 8000df0:	17d3      	asrs	r3, r2, #31
 8000df2:	1ac9      	subs	r1, r1, r3
 8000df4:	460b      	mov	r3, r1
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	1ad1      	subs	r1, r2, r3
 8000dfc:	1c4b      	adds	r3, r1, #1
 8000dfe:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <increment+0x298>)
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e031      	b.n	8000e68 <increment+0x248>
		case 4: date_alarm = (date_alarm % 31) + 1; 	break;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <increment+0x29c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <increment+0x27c>)
 8000e0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e0e:	4413      	add	r3, r2
 8000e10:	1119      	asrs	r1, r3, #4
 8000e12:	17d3      	asrs	r3, r2, #31
 8000e14:	1ac9      	subs	r1, r1, r3
 8000e16:	460b      	mov	r3, r1
 8000e18:	015b      	lsls	r3, r3, #5
 8000e1a:	1a5b      	subs	r3, r3, r1
 8000e1c:	1ad1      	subs	r1, r2, r3
 8000e1e:	1c4b      	adds	r3, r1, #1
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <increment+0x29c>)
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e020      	b.n	8000e68 <increment+0x248>
		case 5: month_alarm = (month_alarm % 12) + 1; 	break;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <increment+0x2a0>)
 8000e28:	6819      	ldr	r1, [r3, #0]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <increment+0x26c>)
 8000e2c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e30:	105a      	asrs	r2, r3, #1
 8000e32:	17cb      	asrs	r3, r1, #31
 8000e34:	1ad2      	subs	r2, r2, r3
 8000e36:	4613      	mov	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4413      	add	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	1aca      	subs	r2, r1, r3
 8000e40:	1c53      	adds	r3, r2, #1
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <increment+0x2a0>)
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	e00f      	b.n	8000e68 <increment+0x248>
		case 6: year_alarm = (year_alarm % 100) + 1; 	break;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <increment+0x2a4>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <increment+0x288>)
 8000e4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e52:	1159      	asrs	r1, r3, #5
 8000e54:	17d3      	asrs	r3, r2, #31
 8000e56:	1acb      	subs	r3, r1, r3
 8000e58:	2164      	movs	r1, #100	; 0x64
 8000e5a:	fb01 f303 	mul.w	r3, r1, r3
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	3301      	adds	r3, #1
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <increment+0x2a4>)
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	bf00      	nop
		}
	}
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000080 	.word	0x20000080
 8000e78:	20000084 	.word	0x20000084
 8000e7c:	20000060 	.word	0x20000060
 8000e80:	88888889 	.word	0x88888889
 8000e84:	2000005c 	.word	0x2000005c
 8000e88:	20000058 	.word	0x20000058
 8000e8c:	2aaaaaab 	.word	0x2aaaaaab
 8000e90:	20000054 	.word	0x20000054
 8000e94:	92492493 	.word	0x92492493
 8000e98:	20000050 	.word	0x20000050
 8000e9c:	84210843 	.word	0x84210843
 8000ea0:	2000004c 	.word	0x2000004c
 8000ea4:	20000048 	.word	0x20000048
 8000ea8:	51eb851f 	.word	0x51eb851f
 8000eac:	2000007c 	.word	0x2000007c
 8000eb0:	20000078 	.word	0x20000078
 8000eb4:	20000074 	.word	0x20000074
 8000eb8:	20000070 	.word	0x20000070
 8000ebc:	2000006c 	.word	0x2000006c
 8000ec0:	20000068 	.word	0x20000068
 8000ec4:	20000064 	.word	0x20000064

08000ec8 <incrementParameter>:

void incrementParameter()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	if (button_count[4] >= 3)
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <incrementParameter+0x68>)
 8000ece:	891b      	ldrh	r3, [r3, #8]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d92b      	bls.n	8000f2c <incrementParameter+0x64>
	{
		if(timer2 == 0 && is_pressed == 0)
 8000ed4:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <incrementParameter+0x6c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d105      	bne.n	8000ee8 <incrementParameter+0x20>
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <incrementParameter+0x70>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <incrementParameter+0x20>
			increment();
 8000ee4:	f7ff fe9c 	bl	8000c20 <increment>
		if(is_pressed == 0)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <incrementParameter+0x70>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d111      	bne.n	8000f14 <incrementParameter+0x4c>
		{
			timer2++;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <incrementParameter+0x6c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <incrementParameter+0x6c>)
 8000ef8:	6013      	str	r3, [r2, #0]
			if(timer2 >= 40)
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <incrementParameter+0x6c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2b27      	cmp	r3, #39	; 0x27
 8000f00:	dd08      	ble.n	8000f14 <incrementParameter+0x4c>
			{
				timer1 = 0;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <incrementParameter+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
				timer2 = 0;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <incrementParameter+0x6c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
				is_pressed = 1;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <incrementParameter+0x70>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
			}
		}
		if(is_pressed == 1)
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <incrementParameter+0x70>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d107      	bne.n	8000f2c <incrementParameter+0x64>
		{
			if((timer1 % 4) == 0)
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <incrementParameter+0x74>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <incrementParameter+0x64>
				increment();
 8000f28:	f7ff fe7a 	bl	8000c20 <increment>
		}
	}
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000a0 	.word	0x200000a0
 8000f34:	20000040 	.word	0x20000040
 8000f38:	20000044 	.word	0x20000044
 8000f3c:	2000003c 	.word	0x2000003c

08000f40 <fsm_mode>:

void fsm_mode()
{
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af04      	add	r7, sp, #16
	ds3231_ReadTime();
 8000f46:	f7ff fb5d 	bl	8000604 <ds3231_ReadTime>
	if(checkAlarmTime() && alarm_on == 1)
 8000f4a:	f7ff fdf3 	bl	8000b34 <checkAlarmTime>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <fsm_mode+0x20>
 8000f54:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <fsm_mode+0x1d0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <fsm_mode+0x20>
		warnAlarmTime();
 8000f5c:	f7ff fe4a 	bl	8000bf4 <warnAlarmTime>

    switch (mode)
 8000f60:	4b6c      	ldr	r3, [pc, #432]	; (8001114 <fsm_mode+0x1d4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b03      	cmp	r3, #3
 8000f66:	f200 8156 	bhi.w	8001216 <fsm_mode+0x2d6>
 8000f6a:	a201      	add	r2, pc, #4	; (adr r2, 8000f70 <fsm_mode+0x30>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f91 	.word	0x08000f91
 8000f78:	08000ffb 	.word	0x08000ffb
 8000f7c:	080010fd 	.word	0x080010fd
    {
        case ModeInit:
            initializeTime();
 8000f80:	f7ff fba4 	bl	80006cc <initializeTime>
            ds3231_ReadTime();
 8000f84:	f7ff fb3e 	bl	8000604 <ds3231_ReadTime>
            mode = NormalMode;
 8000f88:	4b62      	ldr	r3, [pc, #392]	; (8001114 <fsm_mode+0x1d4>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
            break;
 8000f8e:	e143      	b.n	8001218 <fsm_mode+0x2d8>

        case NormalMode:
        	displayStatus();
 8000f90:	f7ff fd84 	bl	8000a9c <displayStatus>
            if(button_count[0] >= 3)
 8000f94:	4b60      	ldr	r3, [pc, #384]	; (8001118 <fsm_mode+0x1d8>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d92b      	bls.n	8000ff4 <fsm_mode+0xb4>
            {
                timer1 = 0;
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <fsm_mode+0x1dc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
                current_parameter = 0;
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	; (8001120 <fsm_mode+0x1e0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
                hour_temp = ds3231_hour;
 8000fa8:	4b5e      	ldr	r3, [pc, #376]	; (8001124 <fsm_mode+0x1e4>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <fsm_mode+0x1e8>)
 8000fb0:	601a      	str	r2, [r3, #0]
                min_temp = ds3231_min;
 8000fb2:	4b5e      	ldr	r3, [pc, #376]	; (800112c <fsm_mode+0x1ec>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b5d      	ldr	r3, [pc, #372]	; (8001130 <fsm_mode+0x1f0>)
 8000fba:	601a      	str	r2, [r3, #0]
                sec_temp = ds3231_sec;
 8000fbc:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <fsm_mode+0x1f4>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	; (8001138 <fsm_mode+0x1f8>)
 8000fc4:	601a      	str	r2, [r3, #0]
                day_temp = ds3231_day;
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	; (800113c <fsm_mode+0x1fc>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <fsm_mode+0x200>)
 8000fce:	601a      	str	r2, [r3, #0]
                date_temp = ds3231_date;
 8000fd0:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <fsm_mode+0x204>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b5c      	ldr	r3, [pc, #368]	; (8001148 <fsm_mode+0x208>)
 8000fd8:	601a      	str	r2, [r3, #0]
                month_temp = ds3231_month;
 8000fda:	4b5c      	ldr	r3, [pc, #368]	; (800114c <fsm_mode+0x20c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b5b      	ldr	r3, [pc, #364]	; (8001150 <fsm_mode+0x210>)
 8000fe2:	601a      	str	r2, [r3, #0]
                year_temp = ds3231_year;
 8000fe4:	4b5b      	ldr	r3, [pc, #364]	; (8001154 <fsm_mode+0x214>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <fsm_mode+0x218>)
 8000fec:	601a      	str	r2, [r3, #0]
                mode = SettingMode;
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <fsm_mode+0x1d4>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 8000ff4:	f7ff fbf0 	bl	80007d8 <displayTime>
            break;
 8000ff8:	e10e      	b.n	8001218 <fsm_mode+0x2d8>

        case SettingMode:
        	displayStatus();
 8000ffa:	f7ff fd4f 	bl	8000a9c <displayStatus>
            if(button_count[4] >= 3)
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <fsm_mode+0x1d8>)
 8001000:	891b      	ldrh	r3, [r3, #8]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d902      	bls.n	800100c <fsm_mode+0xcc>
            	incrementParameter();
 8001006:	f7ff ff5f 	bl	8000ec8 <incrementParameter>
 800100a:	e002      	b.n	8001012 <fsm_mode+0xd2>
            else
            	timer2 = 0;
 800100c:	4b53      	ldr	r3, [pc, #332]	; (800115c <fsm_mode+0x21c>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]

            if(button_count[12] >= 3)
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <fsm_mode+0x1d8>)
 8001014:	8b1b      	ldrh	r3, [r3, #24]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d93d      	bls.n	8001096 <fsm_mode+0x156>
            {
                current_parameter++;
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <fsm_mode+0x1e0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <fsm_mode+0x1e0>)
 8001022:	6013      	str	r3, [r2, #0]
                if(current_parameter > 6)
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <fsm_mode+0x1e0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b06      	cmp	r3, #6
 800102a:	dd1e      	ble.n	800106a <fsm_mode+0x12a>
                {
                	timer1 = 0;
 800102c:	4b3b      	ldr	r3, [pc, #236]	; (800111c <fsm_mode+0x1dc>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
                    current_parameter = 0;
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <fsm_mode+0x1e0>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
                    updateTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 8001038:	4b47      	ldr	r3, [pc, #284]	; (8001158 <fsm_mode+0x218>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	4b44      	ldr	r3, [pc, #272]	; (8001150 <fsm_mode+0x210>)
 800103e:	681c      	ldr	r4, [r3, #0]
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <fsm_mode+0x208>)
 8001042:	681d      	ldr	r5, [r3, #0]
 8001044:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <fsm_mode+0x200>)
 8001046:	681e      	ldr	r6, [r3, #0]
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <fsm_mode+0x1e8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a38      	ldr	r2, [pc, #224]	; (8001130 <fsm_mode+0x1f0>)
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	4939      	ldr	r1, [pc, #228]	; (8001138 <fsm_mode+0x1f8>)
 8001052:	6809      	ldr	r1, [r1, #0]
 8001054:	9102      	str	r1, [sp, #8]
 8001056:	9201      	str	r2, [sp, #4]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	4633      	mov	r3, r6
 800105c:	462a      	mov	r2, r5
 800105e:	4621      	mov	r1, r4
 8001060:	f7ff fb54 	bl	800070c <updateTime>
                    mode = NormalMode;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <fsm_mode+0x1d4>)
 8001066:	2201      	movs	r2, #1
 8001068:	601a      	str	r2, [r3, #0]
                }
                updateTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <fsm_mode+0x218>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	4b38      	ldr	r3, [pc, #224]	; (8001150 <fsm_mode+0x210>)
 8001070:	681c      	ldr	r4, [r3, #0]
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <fsm_mode+0x208>)
 8001074:	681d      	ldr	r5, [r3, #0]
 8001076:	4b32      	ldr	r3, [pc, #200]	; (8001140 <fsm_mode+0x200>)
 8001078:	681e      	ldr	r6, [r3, #0]
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <fsm_mode+0x1e8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <fsm_mode+0x1f0>)
 8001080:	6812      	ldr	r2, [r2, #0]
 8001082:	492d      	ldr	r1, [pc, #180]	; (8001138 <fsm_mode+0x1f8>)
 8001084:	6809      	ldr	r1, [r1, #0]
 8001086:	9102      	str	r1, [sp, #8]
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	4633      	mov	r3, r6
 800108e:	462a      	mov	r2, r5
 8001090:	4621      	mov	r1, r4
 8001092:	f7ff fb3b 	bl	800070c <updateTime>
            }

            if(button_count[0] >= 3)
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <fsm_mode+0x1d8>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	2b02      	cmp	r3, #2
 800109c:	d92b      	bls.n	80010f6 <fsm_mode+0x1b6>
            {
            	timer1 = 0;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <fsm_mode+0x1dc>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
            	current_parameter = 0;
 80010a4:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <fsm_mode+0x1e0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
            	hour_temp = ds3231_hour;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <fsm_mode+0x1e4>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <fsm_mode+0x1e8>)
 80010b2:	601a      	str	r2, [r3, #0]
            	min_temp = ds3231_min;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <fsm_mode+0x1ec>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <fsm_mode+0x1f0>)
 80010bc:	601a      	str	r2, [r3, #0]
            	sec_temp = ds3231_sec;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <fsm_mode+0x1f4>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <fsm_mode+0x1f8>)
 80010c6:	601a      	str	r2, [r3, #0]
            	day_temp = ds3231_day;
 80010c8:	4b1c      	ldr	r3, [pc, #112]	; (800113c <fsm_mode+0x1fc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <fsm_mode+0x200>)
 80010d0:	601a      	str	r2, [r3, #0]
            	date_temp = ds3231_date;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <fsm_mode+0x204>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <fsm_mode+0x208>)
 80010da:	601a      	str	r2, [r3, #0]
            	month_temp = ds3231_month;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <fsm_mode+0x20c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <fsm_mode+0x210>)
 80010e4:	601a      	str	r2, [r3, #0]
            	year_temp = ds3231_year;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <fsm_mode+0x214>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <fsm_mode+0x218>)
 80010ee:	601a      	str	r2, [r3, #0]
            	mode = AlarmSettingMode;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <fsm_mode+0x1d4>)
 80010f2:	2203      	movs	r2, #3
 80010f4:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 80010f6:	f7ff fb6f 	bl	80007d8 <displayTime>
            break;
 80010fa:	e08d      	b.n	8001218 <fsm_mode+0x2d8>

        case AlarmSettingMode:
        	displayStatus();
 80010fc:	f7ff fcce 	bl	8000a9c <displayStatus>
            if(button_count[4] >= 3)
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <fsm_mode+0x1d8>)
 8001102:	891b      	ldrh	r3, [r3, #8]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d92b      	bls.n	8001160 <fsm_mode+0x220>
            	incrementParameter();
 8001108:	f7ff fede 	bl	8000ec8 <incrementParameter>
 800110c:	e02b      	b.n	8001166 <fsm_mode+0x226>
 800110e:	bf00      	nop
 8001110:	20000080 	.word	0x20000080
 8001114:	20000038 	.word	0x20000038
 8001118:	200000a0 	.word	0x200000a0
 800111c:	2000003c 	.word	0x2000003c
 8001120:	20000084 	.word	0x20000084
 8001124:	200000c2 	.word	0x200000c2
 8001128:	20000058 	.word	0x20000058
 800112c:	200000c3 	.word	0x200000c3
 8001130:	2000005c 	.word	0x2000005c
 8001134:	200000c0 	.word	0x200000c0
 8001138:	20000060 	.word	0x20000060
 800113c:	200000c5 	.word	0x200000c5
 8001140:	20000054 	.word	0x20000054
 8001144:	200000c4 	.word	0x200000c4
 8001148:	20000050 	.word	0x20000050
 800114c:	200000c6 	.word	0x200000c6
 8001150:	2000004c 	.word	0x2000004c
 8001154:	200000c1 	.word	0x200000c1
 8001158:	20000048 	.word	0x20000048
 800115c:	20000040 	.word	0x20000040
            else
            	timer2 = 0;
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <fsm_mode+0x2e0>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]

            if(button_count[12] >= 3)
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <fsm_mode+0x2e4>)
 8001168:	8b1b      	ldrh	r3, [r3, #24]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d943      	bls.n	80011f6 <fsm_mode+0x2b6>
            {
            	current_parameter++;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <fsm_mode+0x2e8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <fsm_mode+0x2e8>)
 8001176:	6013      	str	r3, [r2, #0]
            	if(current_parameter > 6)
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <fsm_mode+0x2e8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b06      	cmp	r3, #6
 800117e:	dd21      	ble.n	80011c4 <fsm_mode+0x284>
            	{
            		timer1 = 0;
 8001180:	4b2a      	ldr	r3, [pc, #168]	; (800122c <fsm_mode+0x2ec>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
            		current_parameter = 0;
 8001186:	4b28      	ldr	r3, [pc, #160]	; (8001228 <fsm_mode+0x2e8>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
            		updateAlarmTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 800118c:	4b28      	ldr	r3, [pc, #160]	; (8001230 <fsm_mode+0x2f0>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <fsm_mode+0x2f4>)
 8001192:	681c      	ldr	r4, [r3, #0]
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <fsm_mode+0x2f8>)
 8001196:	681d      	ldr	r5, [r3, #0]
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <fsm_mode+0x2fc>)
 800119a:	681e      	ldr	r6, [r3, #0]
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <fsm_mode+0x300>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a28      	ldr	r2, [pc, #160]	; (8001244 <fsm_mode+0x304>)
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4928      	ldr	r1, [pc, #160]	; (8001248 <fsm_mode+0x308>)
 80011a6:	6809      	ldr	r1, [r1, #0]
 80011a8:	9102      	str	r1, [sp, #8]
 80011aa:	9201      	str	r2, [sp, #4]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4633      	mov	r3, r6
 80011b0:	462a      	mov	r2, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	f7ff fae0 	bl	8000778 <updateAlarmTime>
            		alarm_on = 1;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <fsm_mode+0x30c>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
            		mode = NormalMode;
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <fsm_mode+0x310>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
            	}
            	alarm_on = 1;
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <fsm_mode+0x30c>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	601a      	str	r2, [r3, #0]
            	updateAlarmTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <fsm_mode+0x2f0>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <fsm_mode+0x2f4>)
 80011d0:	681c      	ldr	r4, [r3, #0]
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <fsm_mode+0x2f8>)
 80011d4:	681d      	ldr	r5, [r3, #0]
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <fsm_mode+0x2fc>)
 80011d8:	681e      	ldr	r6, [r3, #0]
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <fsm_mode+0x300>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <fsm_mode+0x304>)
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	4919      	ldr	r1, [pc, #100]	; (8001248 <fsm_mode+0x308>)
 80011e4:	6809      	ldr	r1, [r1, #0]
 80011e6:	9102      	str	r1, [sp, #8]
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4633      	mov	r3, r6
 80011ee:	462a      	mov	r2, r5
 80011f0:	4621      	mov	r1, r4
 80011f2:	f7ff fac1 	bl	8000778 <updateAlarmTime>
            }

            if(button_count[0] >= 3)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <fsm_mode+0x2e4>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d908      	bls.n	8001210 <fsm_mode+0x2d0>
            {
            	timer1 = 0;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <fsm_mode+0x2ec>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
            	current_parameter = 0;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <fsm_mode+0x2e8>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
            	mode = NormalMode;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <fsm_mode+0x310>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 8001210:	f7ff fae2 	bl	80007d8 <displayTime>
            break;
 8001214:	e000      	b.n	8001218 <fsm_mode+0x2d8>

        default:
            break;
 8001216:	bf00      	nop
    }
}
 8001218:	bf00      	nop
 800121a:	3704      	adds	r7, #4
 800121c:	46bd      	mov	sp, r7
 800121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001220:	20000040 	.word	0x20000040
 8001224:	200000a0 	.word	0x200000a0
 8001228:	20000084 	.word	0x20000084
 800122c:	2000003c 	.word	0x2000003c
 8001230:	20000048 	.word	0x20000048
 8001234:	2000004c 	.word	0x2000004c
 8001238:	20000050 	.word	0x20000050
 800123c:	20000054 	.word	0x20000054
 8001240:	20000058 	.word	0x20000058
 8001244:	2000005c 	.word	0x2000005c
 8001248:	20000060 	.word	0x20000060
 800124c:	20000080 	.word	0x20000080
 8001250:	20000038 	.word	0x20000038

08001254 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <MX_FSMC_Init+0xec>)
 8001282:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001286:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <MX_FSMC_Init+0xec>)
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <MX_FSMC_Init+0xf0>)
 800128c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <MX_FSMC_Init+0xec>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <MX_FSMC_Init+0xec>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <MX_FSMC_Init+0xec>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <MX_FSMC_Init+0xec>)
 80012a2:	2210      	movs	r2, #16
 80012a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012a6:	4b26      	ldr	r3, [pc, #152]	; (8001340 <MX_FSMC_Init+0xec>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012ac:	4b24      	ldr	r3, [pc, #144]	; (8001340 <MX_FSMC_Init+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <MX_FSMC_Init+0xec>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_FSMC_Init+0xec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_FSMC_Init+0xec>)
 80012c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_FSMC_Init+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_FSMC_Init+0xec>)
 80012ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_FSMC_Init+0xec>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_FSMC_Init+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_FSMC_Init+0xec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012e6:	230f      	movs	r3, #15
 80012e8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012ea:	230f      	movs	r3, #15
 80012ec:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012ee:	233c      	movs	r3, #60	; 0x3c
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012f6:	2310      	movs	r3, #16
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012fa:	2311      	movs	r3, #17
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012fe:	2300      	movs	r3, #0
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001302:	2308      	movs	r3, #8
 8001304:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001306:	230f      	movs	r3, #15
 8001308:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800130a:	2309      	movs	r3, #9
 800130c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001312:	2310      	movs	r3, #16
 8001314:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001316:	2311      	movs	r3, #17
 8001318:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800131e:	463a      	mov	r2, r7
 8001320:	f107 031c 	add.w	r3, r7, #28
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_FSMC_Init+0xec>)
 8001328:	f004 f8a8 	bl	800547c <HAL_SRAM_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001332:	f000 ffd5 	bl	80022e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001336:	bf00      	nop
 8001338:	3738      	adds	r7, #56	; 0x38
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200000d0 	.word	0x200000d0
 8001344:	a0000104 	.word	0xa0000104

08001348 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_FSMC_MspInit+0x88>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d131      	bne.n	80013c8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_FSMC_MspInit+0x88>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_FSMC_MspInit+0x8c>)
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <HAL_FSMC_MspInit+0x8c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6393      	str	r3, [r2, #56]	; 0x38
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_FSMC_MspInit+0x8c>)
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001386:	f64f 7388 	movw	r3, #65416	; 0xff88
 800138a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001398:	230c      	movs	r3, #12
 800139a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <HAL_FSMC_MspInit+0x90>)
 80013a2:	f001 fcbf 	bl	8002d24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013a6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80013aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013b8:	230c      	movs	r3, #12
 80013ba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_FSMC_MspInit+0x94>)
 80013c2:	f001 fcaf 	bl	8002d24 <HAL_GPIO_Init>
 80013c6:	e000      	b.n	80013ca <HAL_FSMC_MspInit+0x82>
    return;
 80013c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000034 	.word	0x20000034
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40020c00 	.word	0x40020c00

080013e0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013e8:	f7ff ffae 	bl	8001348 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a6e      	ldr	r2, [pc, #440]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001414:	f043 0310 	orr.w	r3, r3, #16
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b6c      	ldr	r3, [pc, #432]	; (80015cc <MX_GPIO_Init+0x1d8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	4b68      	ldr	r3, [pc, #416]	; (80015cc <MX_GPIO_Init+0x1d8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a67      	ldr	r2, [pc, #412]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a60      	ldr	r2, [pc, #384]	; (80015cc <MX_GPIO_Init+0x1d8>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b5e      	ldr	r3, [pc, #376]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a59      	ldr	r2, [pc, #356]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b57      	ldr	r3, [pc, #348]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b53      	ldr	r3, [pc, #332]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a52      	ldr	r2, [pc, #328]	; (80015cc <MX_GPIO_Init+0x1d8>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b50      	ldr	r3, [pc, #320]	; (80015cc <MX_GPIO_Init+0x1d8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b4c      	ldr	r3, [pc, #304]	; (80015cc <MX_GPIO_Init+0x1d8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <MX_GPIO_Init+0x1d8>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b49      	ldr	r3, [pc, #292]	; (80015cc <MX_GPIO_Init+0x1d8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	4b45      	ldr	r3, [pc, #276]	; (80015cc <MX_GPIO_Init+0x1d8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a44      	ldr	r2, [pc, #272]	; (80015cc <MX_GPIO_Init+0x1d8>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b42      	ldr	r3, [pc, #264]	; (80015cc <MX_GPIO_Init+0x1d8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2170      	movs	r1, #112	; 0x70
 80014d2:	483f      	ldr	r0, [pc, #252]	; (80015d0 <MX_GPIO_Init+0x1dc>)
 80014d4:	f001 fdc2 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014de:	483d      	ldr	r0, [pc, #244]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 80014e0:	f001 fdbc 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	483b      	ldr	r0, [pc, #236]	; (80015d8 <MX_GPIO_Init+0x1e4>)
 80014ea:	f001 fdb7 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f4:	4839      	ldr	r0, [pc, #228]	; (80015dc <MX_GPIO_Init+0x1e8>)
 80014f6:	f001 fdb1 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2108      	movs	r1, #8
 80014fe:	4838      	ldr	r0, [pc, #224]	; (80015e0 <MX_GPIO_Init+0x1ec>)
 8001500:	f001 fdac 	bl	800305c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001504:	2370      	movs	r3, #112	; 0x70
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	482d      	ldr	r0, [pc, #180]	; (80015d0 <MX_GPIO_Init+0x1dc>)
 800151c:	f001 fc02 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4826      	ldr	r0, [pc, #152]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 800153a:	f001 fbf3 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800153e:	23c0      	movs	r3, #192	; 0xc0
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4822      	ldr	r0, [pc, #136]	; (80015dc <MX_GPIO_Init+0x1e8>)
 8001552:	f001 fbe7 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001556:	2330      	movs	r3, #48	; 0x30
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	481a      	ldr	r0, [pc, #104]	; (80015d4 <MX_GPIO_Init+0x1e0>)
 800156a:	f001 fbdb 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800156e:	2340      	movs	r3, #64	; 0x40
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4814      	ldr	r0, [pc, #80]	; (80015d8 <MX_GPIO_Init+0x1e4>)
 8001586:	f001 fbcd 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480e      	ldr	r0, [pc, #56]	; (80015dc <MX_GPIO_Init+0x1e8>)
 80015a4:	f001 fbbe 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015a8:	2308      	movs	r3, #8
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	4619      	mov	r1, r3
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <MX_GPIO_Init+0x1ec>)
 80015c0:	f001 fbb0 	bl	8002d24 <HAL_GPIO_Init>

}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020c00 	.word	0x40020c00

080015e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_I2C1_Init+0x50>)
 80015ea:	4a13      	ldr	r2, [pc, #76]	; (8001638 <MX_I2C1_Init+0x54>)
 80015ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_I2C1_Init+0x50>)
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <MX_I2C1_Init+0x58>)
 80015f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_I2C1_Init+0x50>)
 8001602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_I2C1_Init+0x50>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_I2C1_Init+0x50>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_I2C1_Init+0x50>)
 8001622:	f001 fd4f 	bl	80030c4 <HAL_I2C_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 fe58 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000120 	.word	0x20000120
 8001638:	40005400 	.word	0x40005400
 800163c:	000186a0 	.word	0x000186a0

08001640 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a19      	ldr	r2, [pc, #100]	; (80016c4 <HAL_I2C_MspInit+0x84>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d12b      	bne.n	80016ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800167e:	23c0      	movs	r3, #192	; 0xc0
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	2312      	movs	r3, #18
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800168e:	2304      	movs	r3, #4
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <HAL_I2C_MspInit+0x8c>)
 800169a:	f001 fb43 	bl	8002d24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 80016a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_I2C_MspInit+0x88>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40005400 	.word	0x40005400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400

080016d0 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <LCD_WR_REG+0x1c>)
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	8013      	strh	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	600ffffe 	.word	0x600ffffe

080016f0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <LCD_WR_DATA+0x1c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	8053      	strh	r3, [r2, #2]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	600ffffe 	.word	0x600ffffe

08001710 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <LCD_RD_DATA+0x20>)
 8001718:	885b      	ldrh	r3, [r3, #2]
 800171a:	b29b      	uxth	r3, r3
 800171c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	b29b      	uxth	r3, r3
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	600ffffe 	.word	0x600ffffe

08001734 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	4603      	mov	r3, r0
 8001748:	80bb      	strh	r3, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001752:	202a      	movs	r0, #42	; 0x2a
 8001754:	f7ff ffbc 	bl	80016d0 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffc6 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffc0 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff ffba 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ffb4 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001788:	202b      	movs	r0, #43	; 0x2b
 800178a:	f7ff ffa1 	bl	80016d0 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	b29b      	uxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ffab 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800179a:	88bb      	ldrh	r3, [r7, #4]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ffa5 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017a6:	883b      	ldrh	r3, [r7, #0]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff9f 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017b2:	883b      	ldrh	r3, [r7, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff99 	bl	80016f0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017be:	202c      	movs	r0, #44	; 0x2c
 80017c0:	f7ff ff86 	bl	80016d0 <LCD_WR_REG>
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}

080017cc <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	b29b      	uxth	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <lcd_Clear+0x70>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <lcd_Clear+0x70>)
 80017f0:	885b      	ldrh	r3, [r3, #2]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2100      	movs	r1, #0
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff ff9b 	bl	8001734 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	81fb      	strh	r3, [r7, #14]
 8001802:	e011      	b.n	8001828 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001804:	2300      	movs	r3, #0
 8001806:	81bb      	strh	r3, [r7, #12]
 8001808:	e006      	b.n	8001818 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff6f 	bl	80016f0 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001812:	89bb      	ldrh	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	81bb      	strh	r3, [r7, #12]
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <lcd_Clear+0x70>)
 800181a:	885b      	ldrh	r3, [r3, #2]
 800181c:	89ba      	ldrh	r2, [r7, #12]
 800181e:	429a      	cmp	r2, r3
 8001820:	d3f3      	bcc.n	800180a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8001822:	89fb      	ldrh	r3, [r7, #14]
 8001824:	3301      	adds	r3, #1
 8001826:	81fb      	strh	r3, [r7, #14]
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <lcd_Clear+0x70>)
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	89fa      	ldrh	r2, [r7, #14]
 800182e:	429a      	cmp	r2, r3
 8001830:	d3e8      	bcc.n	8001804 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000174 	.word	0x20000174

08001840 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	4604      	mov	r4, r0
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4623      	mov	r3, r4
 8001850:	80fb      	strh	r3, [r7, #6]
 8001852:	4603      	mov	r3, r0
 8001854:	80bb      	strh	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	807b      	strh	r3, [r7, #2]
 800185a:	4613      	mov	r3, r2
 800185c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	3b01      	subs	r3, #1
 8001862:	b29a      	uxth	r2, r3
 8001864:	883b      	ldrh	r3, [r7, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	b29b      	uxth	r3, r3
 800186a:	88b9      	ldrh	r1, [r7, #4]
 800186c:	88f8      	ldrh	r0, [r7, #6]
 800186e:	f7ff ff61 	bl	8001734 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	81fb      	strh	r3, [r7, #14]
 8001876:	e010      	b.n	800189a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	81bb      	strh	r3, [r7, #12]
 800187c:	e006      	b.n	800188c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800187e:	8c3b      	ldrh	r3, [r7, #32]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff35 	bl	80016f0 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001886:	89bb      	ldrh	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	81bb      	strh	r3, [r7, #12]
 800188c:	89ba      	ldrh	r2, [r7, #12]
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3f4      	bcc.n	800187e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001894:	89fb      	ldrh	r3, [r7, #14]
 8001896:	3301      	adds	r3, #1
 8001898:	81fb      	strh	r3, [r7, #14]
 800189a:	89fa      	ldrh	r2, [r7, #14]
 800189c:	883b      	ldrh	r3, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d3ea      	bcc.n	8001878 <lcd_Fill+0x38>
		}
	}
}
 80018a2:	bf00      	nop
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd90      	pop	{r4, r7, pc}

080018ac <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	460b      	mov	r3, r1
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018be:	88bb      	ldrh	r3, [r7, #4]
 80018c0:	88fa      	ldrh	r2, [r7, #6]
 80018c2:	88b9      	ldrh	r1, [r7, #4]
 80018c4:	88f8      	ldrh	r0, [r7, #6]
 80018c6:	f7ff ff35 	bl	8001734 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff0f 	bl	80016f0 <LCD_WR_DATA>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4604      	mov	r4, r0
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4623      	mov	r3, r4
 80018ec:	80fb      	strh	r3, [r7, #6]
 80018ee:	4603      	mov	r3, r0
 80018f0:	80bb      	strh	r3, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	70fb      	strb	r3, [r7, #3]
 80018f6:	4613      	mov	r3, r2
 80018f8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001902:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001906:	085b      	lsrs	r3, r3, #1
 8001908:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	08db      	lsrs	r3, r3, #3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf14      	ite	ne
 800191e:	2301      	movne	r3, #1
 8001920:	2300      	moveq	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4413      	add	r3, r2
 8001926:	b29a      	uxth	r2, r3
 8001928:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800192c:	b29b      	uxth	r3, r3
 800192e:	fb12 f303 	smulbb	r3, r2, r3
 8001932:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	3b20      	subs	r3, #32
 8001938:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	b29a      	uxth	r2, r3
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	3b01      	subs	r3, #1
 8001946:	b29c      	uxth	r4, r3
 8001948:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800194c:	b29a      	uxth	r2, r3
 800194e:	88bb      	ldrh	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	88b9      	ldrh	r1, [r7, #4]
 800195a:	88f8      	ldrh	r0, [r7, #6]
 800195c:	4622      	mov	r2, r4
 800195e:	f7ff fee9 	bl	8001734 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001962:	2300      	movs	r3, #0
 8001964:	827b      	strh	r3, [r7, #18]
 8001966:	e07a      	b.n	8001a5e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001968:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800196c:	2b0c      	cmp	r3, #12
 800196e:	d028      	beq.n	80019c2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8001970:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001974:	2b10      	cmp	r3, #16
 8001976:	d108      	bne.n	800198a <lcd_ShowChar+0xae>
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	8a7b      	ldrh	r3, [r7, #18]
 800197c:	493c      	ldr	r1, [pc, #240]	; (8001a70 <lcd_ShowChar+0x194>)
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	440a      	add	r2, r1
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	75fb      	strb	r3, [r7, #23]
 8001988:	e01b      	b.n	80019c2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 800198a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800198e:	2b18      	cmp	r3, #24
 8001990:	d10b      	bne.n	80019aa <lcd_ShowChar+0xce>
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	8a79      	ldrh	r1, [r7, #18]
 8001996:	4837      	ldr	r0, [pc, #220]	; (8001a74 <lcd_ShowChar+0x198>)
 8001998:	4613      	mov	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4413      	add	r3, r2
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4403      	add	r3, r0
 80019a2:	440b      	add	r3, r1
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	75fb      	strb	r3, [r7, #23]
 80019a8:	e00b      	b.n	80019c2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 80019aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d15a      	bne.n	8001a68 <lcd_ShowChar+0x18c>
 80019b2:	78fa      	ldrb	r2, [r7, #3]
 80019b4:	8a7b      	ldrh	r3, [r7, #18]
 80019b6:	4930      	ldr	r1, [pc, #192]	; (8001a78 <lcd_ShowChar+0x19c>)
 80019b8:	0192      	lsls	r2, r2, #6
 80019ba:	440a      	add	r2, r1
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	75bb      	strb	r3, [r7, #22]
 80019c6:	e044      	b.n	8001a52 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80019c8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d120      	bne.n	8001a12 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80019d0:	7dfa      	ldrb	r2, [r7, #23]
 80019d2:	7dbb      	ldrb	r3, [r7, #22]
 80019d4:	fa42 f303 	asr.w	r3, r2, r3
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <lcd_ShowChar+0x10e>
 80019e0:	883b      	ldrh	r3, [r7, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fe84 	bl	80016f0 <LCD_WR_DATA>
 80019e8:	e003      	b.n	80019f2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80019ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fe7f 	bl	80016f0 <LCD_WR_DATA>
				m++;
 80019f2:	7d7b      	ldrb	r3, [r7, #21]
 80019f4:	3301      	adds	r3, #1
 80019f6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80019f8:	7d7b      	ldrb	r3, [r7, #21]
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a00:	fb02 f201 	mul.w	r2, r2, r1
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11f      	bne.n	8001a4c <lcd_ShowChar+0x170>
				{
					m=0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	757b      	strb	r3, [r7, #21]
					break;
 8001a10:	e022      	b.n	8001a58 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a12:	7dfa      	ldrb	r2, [r7, #23]
 8001a14:	7dbb      	ldrb	r3, [r7, #22]
 8001a16:	fa42 f303 	asr.w	r3, r2, r3
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <lcd_ShowChar+0x152>
 8001a22:	883a      	ldrh	r2, [r7, #0]
 8001a24:	88b9      	ldrh	r1, [r7, #4]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff ff3f 	bl	80018ac <lcd_DrawPoint>
				x++;
 8001a2e:	88fb      	ldrh	r3, [r7, #6]
 8001a30:	3301      	adds	r3, #1
 8001a32:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a34:	88fa      	ldrh	r2, [r7, #6]
 8001a36:	8a3b      	ldrh	r3, [r7, #16]
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d105      	bne.n	8001a4c <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a40:	8a3b      	ldrh	r3, [r7, #16]
 8001a42:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a44:	88bb      	ldrh	r3, [r7, #4]
 8001a46:	3301      	adds	r3, #1
 8001a48:	80bb      	strh	r3, [r7, #4]
					break;
 8001a4a:	e005      	b.n	8001a58 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a4c:	7dbb      	ldrb	r3, [r7, #22]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	75bb      	strb	r3, [r7, #22]
 8001a52:	7dbb      	ldrb	r3, [r7, #22]
 8001a54:	2b07      	cmp	r3, #7
 8001a56:	d9b7      	bls.n	80019c8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a58:	8a7b      	ldrh	r3, [r7, #18]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	827b      	strh	r3, [r7, #18]
 8001a5e:	8a7a      	ldrh	r2, [r7, #18]
 8001a60:	89bb      	ldrh	r3, [r7, #12]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d380      	bcc.n	8001968 <lcd_ShowChar+0x8c>
 8001a66:	e000      	b.n	8001a6a <lcd_ShowChar+0x18e>
		else return;
 8001a68:	bf00      	nop
				}
			}
		}
	}
}
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd90      	pop	{r4, r7, pc}
 8001a70:	08006fe8 	.word	0x08006fe8
 8001a74:	080075d8 	.word	0x080075d8
 8001a78:	080087a8 	.word	0x080087a8

08001a7c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	460a      	mov	r2, r1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001a90:	e004      	b.n	8001a9c <mypow+0x20>
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	fb02 f303 	mul.w	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	1e5a      	subs	r2, r3, #1
 8001aa0:	71ba      	strb	r2, [r7, #6]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f5      	bne.n	8001a92 <mypow+0x16>
	return result;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	80fb      	strh	r3, [r7, #6]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	807b      	strh	r3, [r7, #2]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	e059      	b.n	8001b98 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001ae4:	887c      	ldrh	r4, [r7, #2]
 8001ae6:	787a      	ldrb	r2, [r7, #1]
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4619      	mov	r1, r3
 8001af4:	200a      	movs	r0, #10
 8001af6:	f7ff ffc1 	bl	8001a7c <mypow>
 8001afa:	4603      	mov	r3, r0
 8001afc:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <lcd_ShowIntNum+0xf8>)
 8001b02:	fba3 2301 	umull	r2, r3, r3, r1
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	1aca      	subs	r2, r1, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001b16:	7bbb      	ldrb	r3, [r7, #14]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d121      	bne.n	8001b60 <lcd_ShowIntNum+0xac>
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	787b      	ldrb	r3, [r7, #1]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	429a      	cmp	r2, r3
 8001b24:	da1c      	bge.n	8001b60 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001b26:	7b3b      	ldrb	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d117      	bne.n	8001b5c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	7b7b      	ldrb	r3, [r7, #13]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	fb12 f303 	smulbb	r3, r2, r3
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b298      	uxth	r0, r3
 8001b40:	8c3a      	ldrh	r2, [r7, #32]
 8001b42:	88b9      	ldrh	r1, [r7, #4]
 8001b44:	2300      	movs	r3, #0
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	4613      	mov	r3, r2
 8001b54:	2220      	movs	r2, #32
 8001b56:	f7ff fec1 	bl	80018dc <lcd_ShowChar>
				continue;
 8001b5a:	e01a      	b.n	8001b92 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	7b7b      	ldrb	r3, [r7, #13]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	fb12 f303 	smulbb	r3, r2, r3
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	4413      	add	r3, r2
 8001b72:	b298      	uxth	r0, r3
 8001b74:	7b3b      	ldrb	r3, [r7, #12]
 8001b76:	3330      	adds	r3, #48	; 0x30
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	8c3c      	ldrh	r4, [r7, #32]
 8001b7c:	88b9      	ldrh	r1, [r7, #4]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f7ff fea5 	bl	80018dc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	3301      	adds	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	7bfa      	ldrb	r2, [r7, #15]
 8001b9a:	787b      	ldrb	r3, [r7, #1]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3a1      	bcc.n	8001ae4 <lcd_ShowIntNum+0x30>
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	cccccccd 	.word	0xcccccccd

08001bb0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <lcd_SetDir+0x44>)
 8001bcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bd0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <lcd_SetDir+0x44>)
 8001bd4:	22f0      	movs	r2, #240	; 0xf0
 8001bd6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001bd8:	e006      	b.n	8001be8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <lcd_SetDir+0x44>)
 8001bdc:	22f0      	movs	r2, #240	; 0xf0
 8001bde:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <lcd_SetDir+0x44>)
 8001be2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001be6:	805a      	strh	r2, [r3, #2]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	20000174 	.word	0x20000174

08001bf8 <lcd_init>:


void lcd_init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c02:	48aa      	ldr	r0, [pc, #680]	; (8001eac <lcd_init+0x2b4>)
 8001c04:	f001 fa2a 	bl	800305c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c0c:	f000 fec2 	bl	8002994 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	48a5      	ldr	r0, [pc, #660]	; (8001eac <lcd_init+0x2b4>)
 8001c18:	f001 fa20 	bl	800305c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c20:	f000 feb8 	bl	8002994 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ffc3 	bl	8001bb0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c2a:	20d3      	movs	r0, #211	; 0xd3
 8001c2c:	f7ff fd50 	bl	80016d0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c30:	f7ff fd6e 	bl	8001710 <LCD_RD_DATA>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b9d      	ldr	r3, [pc, #628]	; (8001eb0 <lcd_init+0x2b8>)
 8001c3a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c3c:	f7ff fd68 	bl	8001710 <LCD_RD_DATA>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b9a      	ldr	r3, [pc, #616]	; (8001eb0 <lcd_init+0x2b8>)
 8001c46:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c48:	f7ff fd62 	bl	8001710 <LCD_RD_DATA>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <lcd_init+0x2b8>)
 8001c52:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c54:	4b96      	ldr	r3, [pc, #600]	; (8001eb0 <lcd_init+0x2b8>)
 8001c56:	889b      	ldrh	r3, [r3, #4]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b94      	ldr	r3, [pc, #592]	; (8001eb0 <lcd_init+0x2b8>)
 8001c5e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c60:	f7ff fd56 	bl	8001710 <LCD_RD_DATA>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b91      	ldr	r3, [pc, #580]	; (8001eb0 <lcd_init+0x2b8>)
 8001c6a:	889b      	ldrh	r3, [r3, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b8f      	ldr	r3, [pc, #572]	; (8001eb0 <lcd_init+0x2b8>)
 8001c72:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001c74:	20cf      	movs	r0, #207	; 0xcf
 8001c76:	f7ff fd2b 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff fd38 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001c80:	20c1      	movs	r0, #193	; 0xc1
 8001c82:	f7ff fd35 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001c86:	2030      	movs	r0, #48	; 0x30
 8001c88:	f7ff fd32 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001c8c:	20ed      	movs	r0, #237	; 0xed
 8001c8e:	f7ff fd1f 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001c92:	2064      	movs	r0, #100	; 0x64
 8001c94:	f7ff fd2c 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7ff fd29 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001c9e:	2012      	movs	r0, #18
 8001ca0:	f7ff fd26 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ca4:	2081      	movs	r0, #129	; 0x81
 8001ca6:	f7ff fd23 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001caa:	20e8      	movs	r0, #232	; 0xe8
 8001cac:	f7ff fd10 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001cb0:	2085      	movs	r0, #133	; 0x85
 8001cb2:	f7ff fd1d 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001cb6:	2010      	movs	r0, #16
 8001cb8:	f7ff fd1a 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001cbc:	207a      	movs	r0, #122	; 0x7a
 8001cbe:	f7ff fd17 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001cc2:	20cb      	movs	r0, #203	; 0xcb
 8001cc4:	f7ff fd04 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001cc8:	2039      	movs	r0, #57	; 0x39
 8001cca:	f7ff fd11 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001cce:	202c      	movs	r0, #44	; 0x2c
 8001cd0:	f7ff fd0e 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff fd0b 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001cda:	2034      	movs	r0, #52	; 0x34
 8001cdc:	f7ff fd08 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f7ff fd05 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001ce6:	20f7      	movs	r0, #247	; 0xf7
 8001ce8:	f7ff fcf2 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001cec:	2020      	movs	r0, #32
 8001cee:	f7ff fcff 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001cf2:	20ea      	movs	r0, #234	; 0xea
 8001cf4:	f7ff fcec 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fcf9 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fcf6 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d04:	20c0      	movs	r0, #192	; 0xc0
 8001d06:	f7ff fce3 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d0a:	201b      	movs	r0, #27
 8001d0c:	f7ff fcf0 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d10:	20c1      	movs	r0, #193	; 0xc1
 8001d12:	f7ff fcdd 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff fcea 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d1c:	20c5      	movs	r0, #197	; 0xc5
 8001d1e:	f7ff fcd7 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d22:	2030      	movs	r0, #48	; 0x30
 8001d24:	f7ff fce4 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d28:	2030      	movs	r0, #48	; 0x30
 8001d2a:	f7ff fce1 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d2e:	20c7      	movs	r0, #199	; 0xc7
 8001d30:	f7ff fcce 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d34:	20b7      	movs	r0, #183	; 0xb7
 8001d36:	f7ff fcdb 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d3a:	2036      	movs	r0, #54	; 0x36
 8001d3c:	f7ff fcc8 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001d40:	2008      	movs	r0, #8
 8001d42:	f7ff fcd5 	bl	80016f0 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001d46:	203a      	movs	r0, #58	; 0x3a
 8001d48:	f7ff fcc2 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d4c:	2055      	movs	r0, #85	; 0x55
 8001d4e:	f7ff fccf 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d52:	20b1      	movs	r0, #177	; 0xb1
 8001d54:	f7ff fcbc 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff fcc9 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d5e:	201a      	movs	r0, #26
 8001d60:	f7ff fcc6 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001d64:	20b6      	movs	r0, #182	; 0xb6
 8001d66:	f7ff fcb3 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001d6a:	200a      	movs	r0, #10
 8001d6c:	f7ff fcc0 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001d70:	20a2      	movs	r0, #162	; 0xa2
 8001d72:	f7ff fcbd 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001d76:	20f2      	movs	r0, #242	; 0xf2
 8001d78:	f7ff fcaa 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fcb7 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001d82:	2026      	movs	r0, #38	; 0x26
 8001d84:	f7ff fca4 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f7ff fcb1 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001d8e:	20e0      	movs	r0, #224	; 0xe0
 8001d90:	f7ff fc9e 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001d94:	200f      	movs	r0, #15
 8001d96:	f7ff fcab 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001d9a:	202a      	movs	r0, #42	; 0x2a
 8001d9c:	f7ff fca8 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001da0:	2028      	movs	r0, #40	; 0x28
 8001da2:	f7ff fca5 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001da6:	2008      	movs	r0, #8
 8001da8:	f7ff fca2 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001dac:	200e      	movs	r0, #14
 8001dae:	f7ff fc9f 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001db2:	2008      	movs	r0, #8
 8001db4:	f7ff fc9c 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001db8:	2054      	movs	r0, #84	; 0x54
 8001dba:	f7ff fc99 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001dbe:	20a9      	movs	r0, #169	; 0xa9
 8001dc0:	f7ff fc96 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001dc4:	2043      	movs	r0, #67	; 0x43
 8001dc6:	f7ff fc93 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001dca:	200a      	movs	r0, #10
 8001dcc:	f7ff fc90 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f7ff fc8d 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f7ff fc8a 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fc87 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fc84 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff fc81 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001dee:	20e1      	movs	r0, #225	; 0xe1
 8001df0:	f7ff fc6e 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f7ff fc7b 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001dfa:	2015      	movs	r0, #21
 8001dfc:	f7ff fc78 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e00:	2017      	movs	r0, #23
 8001e02:	f7ff fc75 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e06:	2007      	movs	r0, #7
 8001e08:	f7ff fc72 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e0c:	2011      	movs	r0, #17
 8001e0e:	f7ff fc6f 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e12:	2006      	movs	r0, #6
 8001e14:	f7ff fc6c 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e18:	202b      	movs	r0, #43	; 0x2b
 8001e1a:	f7ff fc69 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e1e:	2056      	movs	r0, #86	; 0x56
 8001e20:	f7ff fc66 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e24:	203c      	movs	r0, #60	; 0x3c
 8001e26:	f7ff fc63 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e2a:	2005      	movs	r0, #5
 8001e2c:	f7ff fc60 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e30:	2010      	movs	r0, #16
 8001e32:	f7ff fc5d 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f7ff fc5a 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e3c:	203f      	movs	r0, #63	; 0x3f
 8001e3e:	f7ff fc57 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e42:	203f      	movs	r0, #63	; 0x3f
 8001e44:	f7ff fc54 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e48:	200f      	movs	r0, #15
 8001e4a:	f7ff fc51 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e4e:	202b      	movs	r0, #43	; 0x2b
 8001e50:	f7ff fc3e 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fc4b 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff fc48 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff fc45 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001e66:	203f      	movs	r0, #63	; 0x3f
 8001e68:	f7ff fc42 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001e6c:	202a      	movs	r0, #42	; 0x2a
 8001e6e:	f7ff fc2f 	bl	80016d0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff fc3c 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fc39 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fc36 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001e84:	20ef      	movs	r0, #239	; 0xef
 8001e86:	f7ff fc33 	bl	80016f0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001e8a:	2011      	movs	r0, #17
 8001e8c:	f7ff fc20 	bl	80016d0 <LCD_WR_REG>
	HAL_Delay(120);
 8001e90:	2078      	movs	r0, #120	; 0x78
 8001e92:	f000 fd7f 	bl	8002994 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001e96:	2029      	movs	r0, #41	; 0x29
 8001e98:	f7ff fc1a 	bl	80016d0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea2:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <lcd_init+0x2bc>)
 8001ea4:	f001 f8da 	bl	800305c <HAL_GPIO_WritePin>
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	20000174 	.word	0x20000174
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b08b      	sub	sp, #44	; 0x2c
 8001ebc:	af04      	add	r7, sp, #16
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	81fb      	strh	r3, [r7, #14]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	81bb      	strh	r3, [r7, #12]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001ed6:	e048      	b.n	8001f6a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d145      	bne.n	8001f6a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001ede:	89fa      	ldrh	r2, [r7, #14]
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <lcd_ShowStr+0xc4>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dc3f      	bgt.n	8001f74 <lcd_ShowStr+0xbc>
 8001ef4:	89ba      	ldrh	r2, [r7, #12]
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <lcd_ShowStr+0xc4>)
 8001ef8:	885b      	ldrh	r3, [r3, #2]
 8001efa:	4619      	mov	r1, r3
 8001efc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f00:	1acb      	subs	r3, r1, r3
 8001f02:	429a      	cmp	r2, r3
 8001f04:	dc36      	bgt.n	8001f74 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d902      	bls.n	8001f14 <lcd_ShowStr+0x5c>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
 8001f12:	e02a      	b.n	8001f6a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b0d      	cmp	r3, #13
 8001f1a:	d10b      	bne.n	8001f34 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	89bb      	ldrh	r3, [r7, #12]
 8001f24:	4413      	add	r3, r2
 8001f26:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001f28:	8abb      	ldrh	r3, [r7, #20]
 8001f2a:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	e017      	b.n	8001f64 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	781a      	ldrb	r2, [r3, #0]
 8001f38:	88fc      	ldrh	r4, [r7, #6]
 8001f3a:	89b9      	ldrh	r1, [r7, #12]
 8001f3c:	89f8      	ldrh	r0, [r7, #14]
 8001f3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4623      	mov	r3, r4
 8001f50:	f7ff fcc4 	bl	80018dc <lcd_ShowChar>
					x+=sizey/2;
 8001f54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f58:	085b      	lsrs	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	4413      	add	r3, r2
 8001f62:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3301      	adds	r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1b2      	bne.n	8001ed8 <lcd_ShowStr+0x20>
 8001f72:	e000      	b.n	8001f76 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f74:	bf00      	nop
			}
		}
	}
}
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	20000174 	.word	0x20000174

08001f80 <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af04      	add	r7, sp, #16
 8001f86:	60ba      	str	r2, [r7, #8]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	81fb      	strh	r3, [r7, #14]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	81bb      	strh	r3, [r7, #12]
 8001f92:	4613      	mov	r3, r2
 8001f94:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001f96:	68b8      	ldr	r0, [r7, #8]
 8001f98:	f7fe f916 	bl	80001c8 <strlen>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <lcd_StrCenter+0x60>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	8afb      	ldrh	r3, [r7, #22]
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	0fda      	lsrs	r2, r3, #31
 8001fae:	4413      	add	r3, r2
 8001fb0:	105b      	asrs	r3, r3, #1
 8001fb2:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001fb4:	89fa      	ldrh	r2, [r7, #14]
 8001fb6:	8abb      	ldrh	r3, [r7, #20]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b298      	uxth	r0, r3
 8001fbc:	88fa      	ldrh	r2, [r7, #6]
 8001fbe:	89b9      	ldrh	r1, [r7, #12]
 8001fc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fc4:	9302      	str	r3, [sp, #8]
 8001fc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	8c3b      	ldrh	r3, [r7, #32]
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f7ff ff70 	bl	8001eb8 <lcd_ShowStr>
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000174 	.word	0x20000174

08001fe4 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2140      	movs	r1, #64	; 0x40
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <led7_init+0x14>)
 8001fee:	f001 f835 	bl	800305c <HAL_GPIO_WritePin>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021800 	.word	0x40021800

08001ffc <led7_Scan>:

void led7_Scan(){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <led7_Scan+0x104>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <led7_Scan+0x104>)
 800200a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <led7_Scan+0x108>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a3d      	ldr	r2, [pc, #244]	; (8002108 <led7_Scan+0x10c>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <led7_Scan+0x104>)
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21b      	sxth	r3, r3
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <led7_Scan+0x104>)
 8002026:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <led7_Scan+0x108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d847      	bhi.n	80020c0 <led7_Scan+0xc4>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <led7_Scan+0x3c>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	08002049 	.word	0x08002049
 800203c:	08002067 	.word	0x08002067
 8002040:	08002085 	.word	0x08002085
 8002044:	080020a3 	.word	0x080020a3
	case 0:
		spi_buffer |= 0x00b0;
 8002048:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <led7_Scan+0x104>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002050:	b29a      	uxth	r2, r3
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <led7_Scan+0x104>)
 8002054:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <led7_Scan+0x104>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <led7_Scan+0x104>)
 8002062:	801a      	strh	r2, [r3, #0]
		break;
 8002064:	e02d      	b.n	80020c2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <led7_Scan+0x104>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <led7_Scan+0x104>)
 8002072:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <led7_Scan+0x104>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f023 0320 	bic.w	r3, r3, #32
 800207c:	b29a      	uxth	r2, r3
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <led7_Scan+0x104>)
 8002080:	801a      	strh	r2, [r3, #0]
		break;
 8002082:	e01e      	b.n	80020c2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8002084:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <led7_Scan+0x104>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <led7_Scan+0x104>)
 8002090:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8002092:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <led7_Scan+0x104>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	f023 0310 	bic.w	r3, r3, #16
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <led7_Scan+0x104>)
 800209e:	801a      	strh	r2, [r3, #0]
		break;
 80020a0:	e00f      	b.n	80020c2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <led7_Scan+0x104>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <led7_Scan+0x104>)
 80020ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <led7_Scan+0x104>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <led7_Scan+0x104>)
 80020bc:	801a      	strh	r2, [r3, #0]
		break;
 80020be:	e000      	b.n	80020c2 <led7_Scan+0xc6>
	default:
		break;
 80020c0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <led7_Scan+0x108>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	425a      	negs	r2, r3
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	f002 0203 	and.w	r2, r2, #3
 80020d2:	bf58      	it	pl
 80020d4:	4253      	negpl	r3, r2
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <led7_Scan+0x108>)
 80020d8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	480b      	ldr	r0, [pc, #44]	; (800210c <led7_Scan+0x110>)
 80020e0:	f000 ffbc 	bl	800305c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80020e4:	2301      	movs	r3, #1
 80020e6:	2202      	movs	r2, #2
 80020e8:	4905      	ldr	r1, [pc, #20]	; (8002100 <led7_Scan+0x104>)
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <led7_Scan+0x114>)
 80020ec:	f002 fca7 	bl	8004a3e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <led7_Scan+0x110>)
 80020f6:	f000 ffb1 	bl	800305c <HAL_GPIO_WritePin>
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000004 	.word	0x20000004
 8002104:	2000008c 	.word	0x2000008c
 8002108:	20000000 	.word	0x20000000
 800210c:	40021800 	.word	0x40021800
 8002110:	200001b0 	.word	0x200001b0

08002114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002118:	f000 fbca 	bl	80028b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800211c:	f000 f830 	bl	8002180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002120:	f7ff f968 	bl	80013f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002124:	f000 fa44 	bl	80025b0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002128:	f000 f94c 	bl	80023c4 <MX_SPI1_Init>
  MX_FSMC_Init();
 800212c:	f7ff f892 	bl	8001254 <MX_FSMC_Init>
  MX_I2C1_Init();
 8002130:	f7ff fa58 	bl	80015e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002134:	f000 fada 	bl	80026ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002138:	f000 f88c 	bl	8002254 <system_init>
  lcd_Clear(BLACK);
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff fb45 	bl	80017cc <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 8002142:	bf00      	nop
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <main+0x64>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0fb      	beq.n	8002144 <main+0x30>
	  flag_timer2 = 0;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <main+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]
	  timer1++;
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <main+0x68>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	4a08      	ldr	r2, [pc, #32]	; (800217c <main+0x68>)
 800215a:	6013      	str	r3, [r2, #0]
	  if(timer1 >= 200)
 800215c:	4b07      	ldr	r3, [pc, #28]	; (800217c <main+0x68>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2bc7      	cmp	r3, #199	; 0xc7
 8002162:	dd02      	ble.n	800216a <main+0x56>
		  timer1 = 0;
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <main+0x68>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
	  button_Scan();
 800216a:	f7fe f9bd 	bl	80004e8 <button_Scan>
	  test_LedDebug();
 800216e:	f000 f893 	bl	8002298 <test_LedDebug>
	  fsm_mode();
 8002172:	f7fe fee5 	bl	8000f40 <fsm_mode>
	  while(!flag_timer2);
 8002176:	e7e4      	b.n	8002142 <main+0x2e>
 8002178:	20000098 	.word	0x20000098
 800217c:	2000003c 	.word	0x2000003c

08002180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b094      	sub	sp, #80	; 0x50
 8002184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002186:	f107 0320 	add.w	r3, r7, #32
 800218a:	2230      	movs	r2, #48	; 0x30
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fef6 	bl	8006f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <SystemClock_Config+0xcc>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a27      	ldr	r2, [pc, #156]	; (800224c <SystemClock_Config+0xcc>)
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <SystemClock_Config+0xcc>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	4b22      	ldr	r3, [pc, #136]	; (8002250 <SystemClock_Config+0xd0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <SystemClock_Config+0xd0>)
 80021ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <SystemClock_Config+0xd0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021dc:	2302      	movs	r3, #2
 80021de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e0:	2301      	movs	r3, #1
 80021e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e4:	2310      	movs	r3, #16
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e8:	2302      	movs	r3, #2
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021f0:	2308      	movs	r3, #8
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021f4:	23a8      	movs	r3, #168	; 0xa8
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021f8:	2302      	movs	r3, #2
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021fc:	2304      	movs	r3, #4
 80021fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002200:	f107 0320 	add.w	r3, r7, #32
 8002204:	4618      	mov	r0, r3
 8002206:	f001 ff1d 	bl	8004044 <HAL_RCC_OscConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002210:	f000 f866 	bl	80022e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002214:	230f      	movs	r3, #15
 8002216:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002218:	2302      	movs	r3, #2
 800221a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002220:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002226:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800222a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	2105      	movs	r1, #5
 8002232:	4618      	mov	r0, r3
 8002234:	f002 f97e 	bl	8004534 <HAL_RCC_ClockConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800223e:	f000 f84f 	bl	80022e0 <Error_Handler>
  }
}
 8002242:	bf00      	nop
 8002244:	3750      	adds	r7, #80	; 0x50
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000

08002254 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002258:	2200      	movs	r2, #0
 800225a:	2120      	movs	r1, #32
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <system_init+0x40>)
 800225e:	f000 fefd 	bl	800305c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2140      	movs	r1, #64	; 0x40
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <system_init+0x40>)
 8002268:	f000 fef8 	bl	800305c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 800226c:	2200      	movs	r2, #0
 800226e:	2110      	movs	r1, #16
 8002270:	4808      	ldr	r0, [pc, #32]	; (8002294 <system_init+0x40>)
 8002272:	f000 fef3 	bl	800305c <HAL_GPIO_WritePin>
	  timer_init();
 8002276:	f000 f839 	bl	80022ec <timer_init>
	  led7_init();
 800227a:	f7ff feb3 	bl	8001fe4 <led7_init>
	  button_init();
 800227e:	f7fe f927 	bl	80004d0 <button_init>
	  lcd_init();
 8002282:	f7ff fcb9 	bl	8001bf8 <lcd_init>
	  uart_init_rs232();
 8002286:	f000 fa05 	bl	8002694 <uart_init_rs232>
	  setTimer2(50);
 800228a:	2032      	movs	r0, #50	; 0x32
 800228c:	f000 f838 	bl	8002300 <setTimer2>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug(){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <test_LedDebug+0x3c>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <test_LedDebug+0x40>)
 80022a4:	fb83 1302 	smull	r1, r3, r3, r2
 80022a8:	10d9      	asrs	r1, r3, #3
 80022aa:	17d3      	asrs	r3, r2, #31
 80022ac:	1ac9      	subs	r1, r1, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	1ad1      	subs	r1, r2, r3
 80022b8:	b28a      	uxth	r2, r1
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <test_LedDebug+0x3c>)
 80022bc:	801a      	strh	r2, [r3, #0]
	if(count_led_debug == 0){
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <test_LedDebug+0x3c>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d103      	bne.n	80022ce <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80022c6:	2110      	movs	r1, #16
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <test_LedDebug+0x44>)
 80022ca:	f000 fee0 	bl	800308e <HAL_GPIO_TogglePin>
	}
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000090 	.word	0x20000090
 80022d8:	66666667 	.word	0x66666667
 80022dc:	40021000 	.word	0x40021000

080022e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <Error_Handler+0x8>
	...

080022ec <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <timer_init+0x10>)
 80022f2:	f003 f957 	bl	80055a4 <HAL_TIM_Base_Start_IT>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000208 	.word	0x20000208

08002300 <setTimer2>:
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}

void setTimer2(uint16_t duration)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE;
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <setTimer2+0x2c>)
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <setTimer2+0x2c>)
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <setTimer2+0x30>)
 8002316:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <setTimer2+0x34>)
 800231a:	2200      	movs	r2, #0
 800231c:	801a      	strh	r2, [r3, #0]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	2000009c 	.word	0x2000009c
 8002330:	2000009a 	.word	0x2000009a
 8002334:	20000098 	.word	0x20000098

08002338 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002348:	d12b      	bne.n	80023a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		if(timer1_counter > 0)
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d010      	beq.n	8002374 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timer1_counter--;
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 800235c:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0)
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				flag_timer1 = 1;
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002368:	2201      	movs	r2, #1
 800236a:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002372:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0)
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer2_counter--;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002386:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0)
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_timer2 = 1;
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002392:	2201      	movs	r2, #1
 8002394:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800239c:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 800239e:	f7ff fe2d 	bl	8001ffc <led7_Scan>
	}
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000094 	.word	0x20000094
 80023b0:	20000092 	.word	0x20000092
 80023b4:	20000096 	.word	0x20000096
 80023b8:	2000009a 	.word	0x2000009a
 80023bc:	20000098 	.word	0x20000098
 80023c0:	2000009c 	.word	0x2000009c

080023c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <MX_SPI1_Init+0x64>)
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <MX_SPI1_Init+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <MX_SPI1_Init+0x64>)
 80023d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_SPI1_Init+0x64>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_SPI1_Init+0x64>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_SPI1_Init+0x64>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_SPI1_Init+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_SPI1_Init+0x64>)
 80023f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_SPI1_Init+0x64>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <MX_SPI1_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_SPI1_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <MX_SPI1_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_SPI1_Init+0x64>)
 8002410:	220a      	movs	r2, #10
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MX_SPI1_Init+0x64>)
 8002416:	f002 fa89 	bl	800492c <HAL_SPI_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002420:	f7ff ff5e 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200001b0 	.word	0x200001b0
 800242c:	40013000 	.word	0x40013000

08002430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_SPI_MspInit+0x84>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d12b      	bne.n	80024aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 800245c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002460:	6453      	str	r3, [r2, #68]	; 0x44
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800248a:	2338      	movs	r3, #56	; 0x38
 800248c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002496:	2303      	movs	r3, #3
 8002498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800249a:	2305      	movs	r3, #5
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_SPI_MspInit+0x8c>)
 80024a6:	f000 fc3d 	bl	8002d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024aa:	bf00      	nop
 80024ac:	3728      	adds	r7, #40	; 0x28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40013000 	.word	0x40013000
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020400 	.word	0x40020400

080024c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_MspInit+0x4c>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_MspInit+0x4c>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_MspInit+0x4c>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_MspInit+0x4c>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <HAL_MspInit+0x4c>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_MspInit+0x4c>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40023800 	.word	0x40023800

08002510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <NMI_Handler+0x4>

08002516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <HardFault_Handler+0x4>

0800251c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <MemManage_Handler+0x4>

08002522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002526:	e7fe      	b.n	8002526 <BusFault_Handler+0x4>

08002528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800252c:	e7fe      	b.n	800252c <UsageFault_Handler+0x4>

0800252e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800255c:	f000 f9fa 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}

08002564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <TIM2_IRQHandler+0x10>)
 800256a:	f003 f88b 	bl	8005684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000208 	.word	0x20000208

08002578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <USART1_IRQHandler+0x10>)
 800257e:	f003 fd53 	bl	8006028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000250 	.word	0x20000250

0800258c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <SystemInit+0x20>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <SystemInit+0x20>)
 8002598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800259c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	463b      	mov	r3, r7
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <MX_TIM2_Init+0x94>)
 80025ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <MX_TIM2_Init+0x94>)
 80025d6:	f240 3247 	movw	r2, #839	; 0x347
 80025da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <MX_TIM2_Init+0x94>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80025e2:	4b18      	ldr	r3, [pc, #96]	; (8002644 <MX_TIM2_Init+0x94>)
 80025e4:	2263      	movs	r2, #99	; 0x63
 80025e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <MX_TIM2_Init+0x94>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <MX_TIM2_Init+0x94>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025f4:	4813      	ldr	r0, [pc, #76]	; (8002644 <MX_TIM2_Init+0x94>)
 80025f6:	f002 ff85 	bl	8005504 <HAL_TIM_Base_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002600:	f7ff fe6e 	bl	80022e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	4619      	mov	r1, r3
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <MX_TIM2_Init+0x94>)
 8002612:	f003 f93f 	bl	8005894 <HAL_TIM_ConfigClockSource>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800261c:	f7ff fe60 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002628:	463b      	mov	r3, r7
 800262a:	4619      	mov	r1, r3
 800262c:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_TIM2_Init+0x94>)
 800262e:	f003 fb5b 	bl	8005ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002638:	f7ff fe52 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000208 	.word	0x20000208

08002648 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d115      	bne.n	8002686 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_TIM_Base_MspInit+0x48>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_TIM_Base_MspInit+0x48>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_TIM_Base_MspInit+0x48>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2100      	movs	r1, #0
 800267a:	201c      	movs	r0, #28
 800267c:	f000 fa89 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002680:	201c      	movs	r0, #28
 8002682:	f000 faa2 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800

08002694 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002698:	2201      	movs	r2, #1
 800269a:	4903      	ldr	r1, [pc, #12]	; (80026a8 <uart_init_rs232+0x14>)
 800269c:	4803      	ldr	r0, [pc, #12]	; (80026ac <uart_init_rs232+0x18>)
 800269e:	f003 fc92 	bl	8005fc6 <HAL_UART_Receive_IT>
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000009e 	.word	0x2000009e
 80026ac:	20000250 	.word	0x20000250

080026b0 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <HAL_UART_RxCpltCallback+0x30>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d10a      	bne.n	80026d8 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80026c2:	230a      	movs	r3, #10
 80026c4:	2201      	movs	r2, #1
 80026c6:	4907      	ldr	r1, [pc, #28]	; (80026e4 <HAL_UART_RxCpltCallback+0x34>)
 80026c8:	4807      	ldr	r0, [pc, #28]	; (80026e8 <HAL_UART_RxCpltCallback+0x38>)
 80026ca:	f003 fbea 	bl	8005ea2 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80026ce:	2201      	movs	r2, #1
 80026d0:	4904      	ldr	r1, [pc, #16]	; (80026e4 <HAL_UART_RxCpltCallback+0x34>)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <HAL_UART_RxCpltCallback+0x38>)
 80026d4:	f003 fc77 	bl	8005fc6 <HAL_UART_Receive_IT>
	}
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40011000 	.word	0x40011000
 80026e4:	2000009e 	.word	0x2000009e
 80026e8:	20000250 	.word	0x20000250

080026ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	; (800273c <MX_USART1_UART_Init+0x50>)
 80026f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 80026f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800270a:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 8002712:	220c      	movs	r2, #12
 8002714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800271c:	4b06      	ldr	r3, [pc, #24]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_USART1_UART_Init+0x4c>)
 8002724:	f003 fb70 	bl	8005e08 <HAL_UART_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800272e:	f7ff fdd7 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000250 	.word	0x20000250
 800273c:	40011000 	.word	0x40011000

08002740 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_UART_MspInit+0x94>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d134      	bne.n	80027cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_UART_MspInit+0x98>)
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6453      	str	r3, [r2, #68]	; 0x44
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_UART_MspInit+0x98>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800279a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027a8:	2303      	movs	r3, #3
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ac:	2307      	movs	r3, #7
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4809      	ldr	r0, [pc, #36]	; (80027dc <HAL_UART_MspInit+0x9c>)
 80027b8:	f000 fab4 	bl	8002d24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	2025      	movs	r0, #37	; 0x25
 80027c2:	f000 f9e6 	bl	8002b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027c6:	2025      	movs	r0, #37	; 0x25
 80027c8:	f000 f9ff 	bl	8002bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40011000 	.word	0x40011000
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020000 	.word	0x40020000

080027e0 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4413      	add	r3, r2
 8002804:	b2db      	uxtb	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <DEC2BCD+0x44>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	08db      	lsrs	r3, r3, #3
 8002828:	b2db      	uxtb	r3, r3
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	b258      	sxtb	r0, r3
 800282e:	79fa      	ldrb	r2, [r7, #7]
 8002830:	4b09      	ldr	r3, [pc, #36]	; (8002858 <DEC2BCD+0x44>)
 8002832:	fba3 1302 	umull	r1, r3, r3, r2
 8002836:	08d9      	lsrs	r1, r3, #3
 8002838:	460b      	mov	r3, r1
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	b25b      	sxtb	r3, r3
 8002846:	4303      	orrs	r3, r0
 8002848:	b25b      	sxtb	r3, r3
 800284a:	b2db      	uxtb	r3, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	cccccccd 	.word	0xcccccccd

0800285c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800285c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002860:	480d      	ldr	r0, [pc, #52]	; (8002898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002862:	490e      	ldr	r1, [pc, #56]	; (800289c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002868:	e002      	b.n	8002870 <LoopCopyDataInit>

0800286a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800286a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800286c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286e:	3304      	adds	r3, #4

08002870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002874:	d3f9      	bcc.n	800286a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002876:	4a0b      	ldr	r2, [pc, #44]	; (80028a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002878:	4c0b      	ldr	r4, [pc, #44]	; (80028a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800287c:	e001      	b.n	8002882 <LoopFillZerobss>

0800287e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002880:	3204      	adds	r2, #4

08002882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002884:	d3fb      	bcc.n	800287e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002886:	f7ff fe81 	bl	800258c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f004 fb55 	bl	8006f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800288e:	f7ff fc41 	bl	8002114 <main>
  bx  lr    
 8002892:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800289c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80028a0:	08009f90 	.word	0x08009f90
  ldr r2, =_sbss
 80028a4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80028a8:	20000298 	.word	0x20000298

080028ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ac:	e7fe      	b.n	80028ac <ADC_IRQHandler>
	...

080028b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_Init+0x40>)
 80028ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_Init+0x40>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_Init+0x40>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_Init+0x40>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_Init+0x40>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d8:	2003      	movs	r0, #3
 80028da:	f000 f94f 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028de:	200f      	movs	r0, #15
 80028e0:	f000 f808 	bl	80028f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028e4:	f7ff fdec 	bl	80024c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00

080028f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_InitTick+0x54>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_InitTick+0x58>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 f967 	bl	8002be6 <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f000 f92f 	bl	8002b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	; (8002950 <HAL_InitTick+0x5c>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000008 	.word	0x20000008
 800294c:	20000010 	.word	0x20000010
 8002950:	2000000c 	.word	0x2000000c

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000010 	.word	0x20000010
 8002978:	20000294 	.word	0x20000294

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000294 	.word	0x20000294

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000010 	.word	0x20000010

080029dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff29 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff3e 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff31 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ffa2 	bl	8002b38 <SysTick_Config>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c0c:	f7ff feb6 	bl	800297c <HAL_GetTick>
 8002c10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d008      	beq.n	8002c30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e052      	b.n	8002cd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0216 	bic.w	r2, r2, #22
 8002c3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <HAL_DMA_Abort+0x62>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0208 	bic.w	r2, r2, #8
 8002c6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c80:	e013      	b.n	8002caa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c82:	f7ff fe7b 	bl	800297c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d90c      	bls.n	8002caa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e015      	b.n	8002cd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e4      	bne.n	8002c82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	223f      	movs	r2, #63	; 0x3f
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d004      	beq.n	8002cfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e00c      	b.n	8002d16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2205      	movs	r2, #5
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e16b      	b.n	8003018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 815a 	bne.w	8003012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d130      	bne.n	8002dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0201 	and.w	r2, r3, #1
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d017      	beq.n	8002e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80b4 	beq.w	8003012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b60      	ldr	r3, [pc, #384]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a5f      	ldr	r2, [pc, #380]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a5b      	ldr	r2, [pc, #364]	; (8003034 <HAL_GPIO_Init+0x310>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_GPIO_Init+0x314>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <HAL_GPIO_Init+0x318>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d025      	beq.n	8002f46 <HAL_GPIO_Init+0x222>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a50      	ldr	r2, [pc, #320]	; (8003040 <HAL_GPIO_Init+0x31c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <HAL_GPIO_Init+0x21e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4f      	ldr	r2, [pc, #316]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4e      	ldr	r2, [pc, #312]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x216>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4d      	ldr	r2, [pc, #308]	; (800304c <HAL_GPIO_Init+0x328>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	; (8003050 <HAL_GPIO_Init+0x32c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4b      	ldr	r2, [pc, #300]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x20a>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00e      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f32:	2306      	movs	r3, #6
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4935      	ldr	r1, [pc, #212]	; (8003034 <HAL_GPIO_Init+0x310>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8e:	4a32      	ldr	r2, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_GPIO_Init+0x334>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_GPIO_Init+0x334>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f ae90 	bls.w	8002d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3724      	adds	r7, #36	; 0x24
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40013800 	.word	0x40013800
 8003038:	40020000 	.word	0x40020000
 800303c:	40020400 	.word	0x40020400
 8003040:	40020800 	.word	0x40020800
 8003044:	40020c00 	.word	0x40020c00
 8003048:	40021000 	.word	0x40021000
 800304c:	40021400 	.word	0x40021400
 8003050:	40021800 	.word	0x40021800
 8003054:	40021c00 	.word	0x40021c00
 8003058:	40013c00 	.word	0x40013c00

0800305c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
 8003068:	4613      	mov	r3, r2
 800306a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800306c:	787b      	ldrb	r3, [r7, #1]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003078:	e003      	b.n	8003082 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	041a      	lsls	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4013      	ands	r3, r2
 80030a6:	041a      	lsls	r2, r3, #16
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	43d9      	mvns	r1, r3
 80030ac:	887b      	ldrh	r3, [r7, #2]
 80030ae:	400b      	ands	r3, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	619a      	str	r2, [r3, #24]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e12b      	b.n	800332e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe faa8 	bl	8001640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2224      	movs	r2, #36	; 0x24
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0201 	bic.w	r2, r2, #1
 8003106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003128:	f001 fbd8 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 800312c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a81      	ldr	r2, [pc, #516]	; (8003338 <HAL_I2C_Init+0x274>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d807      	bhi.n	8003148 <HAL_I2C_Init+0x84>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a80      	ldr	r2, [pc, #512]	; (800333c <HAL_I2C_Init+0x278>)
 800313c:	4293      	cmp	r3, r2
 800313e:	bf94      	ite	ls
 8003140:	2301      	movls	r3, #1
 8003142:	2300      	movhi	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	e006      	b.n	8003156 <HAL_I2C_Init+0x92>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a7d      	ldr	r2, [pc, #500]	; (8003340 <HAL_I2C_Init+0x27c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0e7      	b.n	800332e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a78      	ldr	r2, [pc, #480]	; (8003344 <HAL_I2C_Init+0x280>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9b      	lsrs	r3, r3, #18
 8003168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4a6a      	ldr	r2, [pc, #424]	; (8003338 <HAL_I2C_Init+0x274>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d802      	bhi.n	8003198 <HAL_I2C_Init+0xd4>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	3301      	adds	r3, #1
 8003196:	e009      	b.n	80031ac <HAL_I2C_Init+0xe8>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a69      	ldr	r2, [pc, #420]	; (8003348 <HAL_I2C_Init+0x284>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	495c      	ldr	r1, [pc, #368]	; (8003338 <HAL_I2C_Init+0x274>)
 80031c8:	428b      	cmp	r3, r1
 80031ca:	d819      	bhi.n	8003200 <HAL_I2C_Init+0x13c>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e59      	subs	r1, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031e0:	400b      	ands	r3, r1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_I2C_Init+0x138>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1e59      	subs	r1, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	e051      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 80031fc:	2304      	movs	r3, #4
 80031fe:	e04f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d111      	bne.n	800322c <HAL_I2C_Init+0x168>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e58      	subs	r0, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6859      	ldr	r1, [r3, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	440b      	add	r3, r1
 8003216:	fbb0 f3f3 	udiv	r3, r0, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e012      	b.n	8003252 <HAL_I2C_Init+0x18e>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	0099      	lsls	r1, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_Init+0x196>
 8003256:	2301      	movs	r3, #1
 8003258:	e022      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10e      	bne.n	8003280 <HAL_I2C_Init+0x1bc>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1e58      	subs	r0, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	440b      	add	r3, r1
 8003270:	fbb0 f3f3 	udiv	r3, r0, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Init+0x1dc>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	0099      	lsls	r1, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	fbb0 f3f3 	udiv	r3, r0, r3
 8003296:	3301      	adds	r3, #1
 8003298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	6809      	ldr	r1, [r1, #0]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69da      	ldr	r2, [r3, #28]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6911      	ldr	r1, [r2, #16]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68d2      	ldr	r2, [r2, #12]
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	430b      	orrs	r3, r1
 80032e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	000186a0 	.word	0x000186a0
 800333c:	001e847f 	.word	0x001e847f
 8003340:	003d08ff 	.word	0x003d08ff
 8003344:	431bde83 	.word	0x431bde83
 8003348:	10624dd3 	.word	0x10624dd3

0800334c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4603      	mov	r3, r0
 800335c:	817b      	strh	r3, [r7, #10]
 800335e:	460b      	mov	r3, r1
 8003360:	813b      	strh	r3, [r7, #8]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003366:	f7ff fb09 	bl	800297c <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b20      	cmp	r3, #32
 8003376:	f040 80d9 	bne.w	800352c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2319      	movs	r3, #25
 8003380:	2201      	movs	r2, #1
 8003382:	496d      	ldr	r1, [pc, #436]	; (8003538 <HAL_I2C_Mem_Write+0x1ec>)
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fc7f 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
 8003392:	e0cc      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_I2C_Mem_Write+0x56>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0c5      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d007      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2221      	movs	r2, #33	; 0x21
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a4d      	ldr	r2, [pc, #308]	; (800353c <HAL_I2C_Mem_Write+0x1f0>)
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800340a:	88f8      	ldrh	r0, [r7, #6]
 800340c:	893a      	ldrh	r2, [r7, #8]
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9301      	str	r3, [sp, #4]
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	4603      	mov	r3, r0
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fab6 	bl	800398c <I2C_RequestMemoryWrite>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d052      	beq.n	80034cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e081      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fd00 	bl	8003e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b04      	cmp	r3, #4
 8003440:	d107      	bne.n	8003452 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e06b      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	781a      	ldrb	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11b      	bne.n	80034cc <HAL_I2C_Mem_Write+0x180>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	d017      	beq.n	80034cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1aa      	bne.n	800342a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fcec 	bl	8003eb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00d      	beq.n	8003500 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d107      	bne.n	80034fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e016      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	00100002 	.word	0x00100002
 800353c:	ffff0000 	.word	0xffff0000

08003540 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4603      	mov	r3, r0
 8003550:	817b      	strh	r3, [r7, #10]
 8003552:	460b      	mov	r3, r1
 8003554:	813b      	strh	r3, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800355a:	f7ff fa0f 	bl	800297c <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b20      	cmp	r3, #32
 800356a:	f040 8208 	bne.w	800397e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	2319      	movs	r3, #25
 8003574:	2201      	movs	r2, #1
 8003576:	497b      	ldr	r1, [pc, #492]	; (8003764 <HAL_I2C_Mem_Read+0x224>)
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fb85 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
 8003586:	e1fb      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_I2C_Mem_Read+0x56>
 8003592:	2302      	movs	r3, #2
 8003594:	e1f4      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d007      	beq.n	80035bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2222      	movs	r2, #34	; 0x22
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a5b      	ldr	r2, [pc, #364]	; (8003768 <HAL_I2C_Mem_Read+0x228>)
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035fe:	88f8      	ldrh	r0, [r7, #6]
 8003600:	893a      	ldrh	r2, [r7, #8]
 8003602:	8979      	ldrh	r1, [r7, #10]
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	9301      	str	r3, [sp, #4]
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	4603      	mov	r3, r0
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa52 	bl	8003ab8 <I2C_RequestMemoryRead>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1b0      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	2b00      	cmp	r3, #0
 8003624:	d113      	bne.n	800364e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e184      	b.n	8003958 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	2b01      	cmp	r3, #1
 8003654:	d11b      	bne.n	800368e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e164      	b.n	8003958 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	2b02      	cmp	r3, #2
 8003694:	d11b      	bne.n	80036ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	e144      	b.n	8003958 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036e4:	e138      	b.n	8003958 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	f200 80f1 	bhi.w	80038d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d123      	bne.n	8003740 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fc1b 	bl	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e139      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	b2d2      	uxtb	r2, r2
 8003718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800373e:	e10b      	b.n	8003958 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b02      	cmp	r3, #2
 8003746:	d14e      	bne.n	80037e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	2200      	movs	r2, #0
 8003750:	4906      	ldr	r1, [pc, #24]	; (800376c <HAL_I2C_Mem_Read+0x22c>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fa98 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e10e      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
 8003762:	bf00      	nop
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000
 800376c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	3b01      	subs	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037e4:	e0b8      	b.n	8003958 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	2200      	movs	r2, #0
 80037ee:	4966      	ldr	r1, [pc, #408]	; (8003988 <HAL_I2C_Mem_Read+0x448>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fa49 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0bf      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	2200      	movs	r2, #0
 800384a:	494f      	ldr	r1, [pc, #316]	; (8003988 <HAL_I2C_Mem_Read+0x448>)
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fa1b 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e091      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038d0:	e042      	b.n	8003958 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb2e 	bl	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e04c      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b04      	cmp	r3, #4
 8003924:	d118      	bne.n	8003958 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f aec2 	bne.w	80036e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	e000      	b.n	8003980 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800397e:	2302      	movs	r3, #2
  }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	00010004 	.word	0x00010004

0800398c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	817b      	strh	r3, [r7, #10]
 800399e:	460b      	mov	r3, r1
 80039a0:	813b      	strh	r3, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	2200      	movs	r2, #0
 80039be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f960 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00d      	beq.n	80039ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039dc:	d103      	bne.n	80039e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e05f      	b.n	8003aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ea:	897b      	ldrh	r3, [r7, #10]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	492d      	ldr	r1, [pc, #180]	; (8003ab4 <I2C_RequestMemoryWrite+0x128>)
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f998 	bl	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e04c      	b.n	8003aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a28:	6a39      	ldr	r1, [r7, #32]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fa02 	bl	8003e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d107      	bne.n	8003a4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e02b      	b.n	8003aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d105      	bne.n	8003a64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a58:	893b      	ldrh	r3, [r7, #8]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	611a      	str	r2, [r3, #16]
 8003a62:	e021      	b.n	8003aa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a64:	893b      	ldrh	r3, [r7, #8]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a74:	6a39      	ldr	r1, [r7, #32]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f9dc 	bl	8003e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d107      	bne.n	8003a9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e005      	b.n	8003aaa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9e:	893b      	ldrh	r3, [r7, #8]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	00010002 	.word	0x00010002

08003ab8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	817b      	strh	r3, [r7, #10]
 8003aca:	460b      	mov	r3, r1
 8003acc:	813b      	strh	r3, [r7, #8]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f8c2 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00d      	beq.n	8003b26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b18:	d103      	bne.n	8003b22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0aa      	b.n	8003c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	6a3a      	ldr	r2, [r7, #32]
 8003b3a:	4952      	ldr	r1, [pc, #328]	; (8003c84 <I2C_RequestMemoryRead+0x1cc>)
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f8fa 	bl	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e097      	b.n	8003c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	6a39      	ldr	r1, [r7, #32]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 f964 	bl	8003e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d107      	bne.n	8003b8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e076      	b.n	8003c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b94:	893b      	ldrh	r3, [r7, #8]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]
 8003b9e:	e021      	b.n	8003be4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	6a39      	ldr	r1, [r7, #32]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f93e 	bl	8003e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00d      	beq.n	8003bda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d107      	bne.n	8003bd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e050      	b.n	8003c7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bda:	893b      	ldrh	r3, [r7, #8]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	6a39      	ldr	r1, [r7, #32]
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f923 	bl	8003e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00d      	beq.n	8003c10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d107      	bne.n	8003c0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e035      	b.n	8003c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f82b 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c46:	d103      	bne.n	8003c50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e013      	b.n	8003c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c54:	897b      	ldrh	r3, [r7, #10]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	6a3a      	ldr	r2, [r7, #32]
 8003c68:	4906      	ldr	r1, [pc, #24]	; (8003c84 <I2C_RequestMemoryRead+0x1cc>)
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f863 	bl	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	00010002 	.word	0x00010002

08003c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c98:	e025      	b.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d021      	beq.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca2:	f7fe fe6b 	bl	800297c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d116      	bne.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f043 0220 	orr.w	r2, r3, #32
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e023      	b.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d10d      	bne.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	e00c      	b.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	43da      	mvns	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4013      	ands	r3, r2
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d0b6      	beq.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
 8003d42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d44:	e051      	b.n	8003dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d54:	d123      	bne.n	8003d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e046      	b.n	8003e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d021      	beq.n	8003dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da6:	f7fe fde9 	bl	800297c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d116      	bne.n	8003dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e020      	b.n	8003e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	0c1b      	lsrs	r3, r3, #16
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d10c      	bne.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e00b      	b.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	43da      	mvns	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d18d      	bne.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e40:	e02d      	b.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f8ce 	bl	8003fe4 <I2C_IsAcknowledgeFailed>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e02d      	b.n	8003eae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d021      	beq.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fe fd8f 	bl	800297c <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d116      	bne.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e007      	b.n	8003eae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b80      	cmp	r3, #128	; 0x80
 8003eaa:	d1ca      	bne.n	8003e42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ec2:	e02d      	b.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f88d 	bl	8003fe4 <I2C_IsAcknowledgeFailed>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e02d      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eda:	d021      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003edc:	f7fe fd4e 	bl	800297c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d302      	bcc.n	8003ef2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d116      	bne.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d1ca      	bne.n	8003ec4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f44:	e042      	b.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d119      	bne.n	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e029      	b.n	8003fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f88:	f7fe fcf8 	bl	800297c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d116      	bne.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f043 0220 	orr.w	r2, r3, #32
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e007      	b.n	8003fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d1b5      	bne.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffa:	d11b      	bne.n	8004034 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004004:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f043 0204 	orr.w	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
	...

08004044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e264      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d075      	beq.n	800414e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004062:	4ba3      	ldr	r3, [pc, #652]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b04      	cmp	r3, #4
 800406c:	d00c      	beq.n	8004088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800406e:	4ba0      	ldr	r3, [pc, #640]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004076:	2b08      	cmp	r3, #8
 8004078:	d112      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800407a:	4b9d      	ldr	r3, [pc, #628]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004086:	d10b      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	4b99      	ldr	r3, [pc, #612]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d05b      	beq.n	800414c <HAL_RCC_OscConfig+0x108>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d157      	bne.n	800414c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e23f      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d106      	bne.n	80040b8 <HAL_RCC_OscConfig+0x74>
 80040aa:	4b91      	ldr	r3, [pc, #580]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a90      	ldr	r2, [pc, #576]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e01d      	b.n	80040f4 <HAL_RCC_OscConfig+0xb0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x98>
 80040c2:	4b8b      	ldr	r3, [pc, #556]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a8a      	ldr	r2, [pc, #552]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b88      	ldr	r3, [pc, #544]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a87      	ldr	r2, [pc, #540]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e00b      	b.n	80040f4 <HAL_RCC_OscConfig+0xb0>
 80040dc:	4b84      	ldr	r3, [pc, #528]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a83      	ldr	r2, [pc, #524]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b81      	ldr	r3, [pc, #516]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a80      	ldr	r2, [pc, #512]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe fc3e 	bl	800297c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe fc3a 	bl	800297c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e204      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0xc0>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004124:	f7fe fc2a 	bl	800297c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412c:	f7fe fc26 	bl	800297c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1f0      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800413e:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0xe8>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d063      	beq.n	8004222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800415a:	4b65      	ldr	r3, [pc, #404]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b62      	ldr	r3, [pc, #392]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800416e:	2b08      	cmp	r3, #8
 8004170:	d11c      	bne.n	80041ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b5f      	ldr	r3, [pc, #380]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d116      	bne.n	80041ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x152>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e1c4      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004196:	4b56      	ldr	r3, [pc, #344]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4952      	ldr	r1, [pc, #328]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	e03a      	b.n	8004222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b4:	4b4f      	ldr	r3, [pc, #316]	; (80042f4 <HAL_RCC_OscConfig+0x2b0>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fe fbdf 	bl	800297c <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fe fbdb 	bl	800297c <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1a5      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d4:	4b46      	ldr	r3, [pc, #280]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4940      	ldr	r1, [pc, #256]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f6:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <HAL_RCC_OscConfig+0x2b0>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe fbbe 	bl	800297c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004204:	f7fe fbba 	bl	800297c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e184      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	4b36      	ldr	r3, [pc, #216]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d030      	beq.n	8004290 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004236:	4b30      	ldr	r3, [pc, #192]	; (80042f8 <HAL_RCC_OscConfig+0x2b4>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fe fb9e 	bl	800297c <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004244:	f7fe fb9a 	bl	800297c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e164      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x200>
 8004262:	e015      	b.n	8004290 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004264:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCC_OscConfig+0x2b4>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fe fb87 	bl	800297c <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004272:	f7fe fb83 	bl	800297c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e14d      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 8004286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f0      	bne.n	8004272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80a0 	beq.w	80043de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a2:	4b13      	ldr	r3, [pc, #76]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_OscConfig+0x2b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d121      	bne.n	800431e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <HAL_RCC_OscConfig+0x2b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a07      	ldr	r2, [pc, #28]	; (80042fc <HAL_RCC_OscConfig+0x2b8>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fe fb49 	bl	800297c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ec:	e011      	b.n	8004312 <HAL_RCC_OscConfig+0x2ce>
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470000 	.word	0x42470000
 80042f8:	42470e80 	.word	0x42470e80
 80042fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004300:	f7fe fb3c 	bl	800297c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e106      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	4b85      	ldr	r3, [pc, #532]	; (8004528 <HAL_RCC_OscConfig+0x4e4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x2f0>
 8004326:	4b81      	ldr	r3, [pc, #516]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	4a80      	ldr	r2, [pc, #512]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
 8004332:	e01c      	b.n	800436e <HAL_RCC_OscConfig+0x32a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d10c      	bne.n	8004356 <HAL_RCC_OscConfig+0x312>
 800433c:	4b7b      	ldr	r3, [pc, #492]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	4a7a      	ldr	r2, [pc, #488]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 8004342:	f043 0304 	orr.w	r3, r3, #4
 8004346:	6713      	str	r3, [r2, #112]	; 0x70
 8004348:	4b78      	ldr	r3, [pc, #480]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	4a77      	ldr	r2, [pc, #476]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	; 0x70
 8004354:	e00b      	b.n	800436e <HAL_RCC_OscConfig+0x32a>
 8004356:	4b75      	ldr	r3, [pc, #468]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435a:	4a74      	ldr	r2, [pc, #464]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	6713      	str	r3, [r2, #112]	; 0x70
 8004362:	4b72      	ldr	r3, [pc, #456]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a71      	ldr	r2, [pc, #452]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 8004368:	f023 0304 	bic.w	r3, r3, #4
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d015      	beq.n	80043a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fe fb01 	bl	800297c <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437c:	e00a      	b.n	8004394 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437e:	f7fe fafd 	bl	800297c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0c5      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	4b65      	ldr	r3, [pc, #404]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ee      	beq.n	800437e <HAL_RCC_OscConfig+0x33a>
 80043a0:	e014      	b.n	80043cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a2:	f7fe faeb 	bl	800297c <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a8:	e00a      	b.n	80043c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043aa:	f7fe fae7 	bl	800297c <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0af      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c0:	4b5a      	ldr	r3, [pc, #360]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 80043c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ee      	bne.n	80043aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043cc:	7dfb      	ldrb	r3, [r7, #23]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d105      	bne.n	80043de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4b56      	ldr	r3, [pc, #344]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	4a55      	ldr	r2, [pc, #340]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 809b 	beq.w	800451e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e8:	4b50      	ldr	r3, [pc, #320]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 030c 	and.w	r3, r3, #12
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d05c      	beq.n	80044ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d141      	bne.n	8004480 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fc:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <HAL_RCC_OscConfig+0x4ec>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004402:	f7fe fabb 	bl	800297c <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440a:	f7fe fab7 	bl	800297c <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e081      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441c:	4b43      	ldr	r3, [pc, #268]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	019b      	lsls	r3, r3, #6
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	3b01      	subs	r3, #1
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	061b      	lsls	r3, r3, #24
 800444c:	4937      	ldr	r1, [pc, #220]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 800444e:	4313      	orrs	r3, r2
 8004450:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004452:	4b37      	ldr	r3, [pc, #220]	; (8004530 <HAL_RCC_OscConfig+0x4ec>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe fa90 	bl	800297c <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004460:	f7fe fa8c 	bl	800297c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e056      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004472:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0x41c>
 800447e:	e04e      	b.n	800451e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCC_OscConfig+0x4ec>)
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004486:	f7fe fa79 	bl	800297c <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448e:	f7fe fa75 	bl	800297c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e03f      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a0:	4b22      	ldr	r3, [pc, #136]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0x44a>
 80044ac:	e037      	b.n	800451e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e032      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <HAL_RCC_OscConfig+0x4e8>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d028      	beq.n	800451a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d121      	bne.n	800451a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d11a      	bne.n	800451a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ea:	4013      	ands	r3, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d111      	bne.n	800451a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	3b01      	subs	r3, #1
 8004504:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d107      	bne.n	800451a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004516:	429a      	cmp	r2, r3
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40007000 	.word	0x40007000
 800452c:	40023800 	.word	0x40023800
 8004530:	42470060 	.word	0x42470060

08004534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0cc      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004548:	4b68      	ldr	r3, [pc, #416]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d90c      	bls.n	8004570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004556:	4b65      	ldr	r3, [pc, #404]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b63      	ldr	r3, [pc, #396]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b8      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004588:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a0:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a52      	ldr	r2, [pc, #328]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	494d      	ldr	r1, [pc, #308]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d044      	beq.n	8004654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d119      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d003      	beq.n	80045f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d107      	bne.n	8004602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e06f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004602:	4b3b      	ldr	r3, [pc, #236]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e067      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f023 0203 	bic.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4934      	ldr	r1, [pc, #208]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	4313      	orrs	r3, r2
 8004622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004624:	f7fe f9aa 	bl	800297c <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	e00a      	b.n	8004642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462c:	f7fe f9a6 	bl	800297c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f241 3288 	movw	r2, #5000	; 0x1388
 800463a:	4293      	cmp	r3, r2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e04f      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 020c 	and.w	r2, r3, #12
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	429a      	cmp	r2, r3
 8004652:	d1eb      	bne.n	800462c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d20c      	bcs.n	800467c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e032      	b.n	80046e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4916      	ldr	r1, [pc, #88]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004696:	4313      	orrs	r3, r2
 8004698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d009      	beq.n	80046ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	490e      	ldr	r1, [pc, #56]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ba:	f000 f821 	bl	8004700 <HAL_RCC_GetSysClockFreq>
 80046be:	4602      	mov	r2, r0
 80046c0:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	490a      	ldr	r1, [pc, #40]	; (80046f4 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	5ccb      	ldrb	r3, [r1, r3]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046d6:	4b09      	ldr	r3, [pc, #36]	; (80046fc <HAL_RCC_ClockConfig+0x1c8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fe f90a 	bl	80028f4 <HAL_InitTick>

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40023c00 	.word	0x40023c00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	08009f68 	.word	0x08009f68
 80046f8:	20000008 	.word	0x20000008
 80046fc:	2000000c 	.word	0x2000000c

08004700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004704:	b084      	sub	sp, #16
 8004706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	2300      	movs	r3, #0
 8004712:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004718:	4b67      	ldr	r3, [pc, #412]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b08      	cmp	r3, #8
 8004722:	d00d      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x40>
 8004724:	2b08      	cmp	r3, #8
 8004726:	f200 80bd 	bhi.w	80048a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_RCC_GetSysClockFreq+0x34>
 800472e:	2b04      	cmp	r3, #4
 8004730:	d003      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x3a>
 8004732:	e0b7      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b61      	ldr	r3, [pc, #388]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004736:	60bb      	str	r3, [r7, #8]
       break;
 8004738:	e0b7      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473a:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800473c:	60bb      	str	r3, [r7, #8]
      break;
 800473e:	e0b4      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004740:	4b5d      	ldr	r3, [pc, #372]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004748:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474a:	4b5b      	ldr	r3, [pc, #364]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d04d      	beq.n	80047f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b58      	ldr	r3, [pc, #352]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	461a      	mov	r2, r3
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	ea02 0800 	and.w	r8, r2, r0
 800476e:	ea03 0901 	and.w	r9, r3, r1
 8004772:	4640      	mov	r0, r8
 8004774:	4649      	mov	r1, r9
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	014b      	lsls	r3, r1, #5
 8004780:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004784:	0142      	lsls	r2, r0, #5
 8004786:	4610      	mov	r0, r2
 8004788:	4619      	mov	r1, r3
 800478a:	ebb0 0008 	subs.w	r0, r0, r8
 800478e:	eb61 0109 	sbc.w	r1, r1, r9
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	f04f 0300 	mov.w	r3, #0
 800479a:	018b      	lsls	r3, r1, #6
 800479c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a0:	0182      	lsls	r2, r0, #6
 80047a2:	1a12      	subs	r2, r2, r0
 80047a4:	eb63 0301 	sbc.w	r3, r3, r1
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	f04f 0100 	mov.w	r1, #0
 80047b0:	00d9      	lsls	r1, r3, #3
 80047b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b6:	00d0      	lsls	r0, r2, #3
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	eb12 0208 	adds.w	r2, r2, r8
 80047c0:	eb43 0309 	adc.w	r3, r3, r9
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	0259      	lsls	r1, r3, #9
 80047ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047d2:	0250      	lsls	r0, r2, #9
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f7fb fcf8 	bl	80001d8 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e04a      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f2:	4b31      	ldr	r3, [pc, #196]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	461a      	mov	r2, r3
 80047fa:	f04f 0300 	mov.w	r3, #0
 80047fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004802:	f04f 0100 	mov.w	r1, #0
 8004806:	ea02 0400 	and.w	r4, r2, r0
 800480a:	ea03 0501 	and.w	r5, r3, r1
 800480e:	4620      	mov	r0, r4
 8004810:	4629      	mov	r1, r5
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	014b      	lsls	r3, r1, #5
 800481c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004820:	0142      	lsls	r2, r0, #5
 8004822:	4610      	mov	r0, r2
 8004824:	4619      	mov	r1, r3
 8004826:	1b00      	subs	r0, r0, r4
 8004828:	eb61 0105 	sbc.w	r1, r1, r5
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	018b      	lsls	r3, r1, #6
 8004836:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800483a:	0182      	lsls	r2, r0, #6
 800483c:	1a12      	subs	r2, r2, r0
 800483e:	eb63 0301 	sbc.w	r3, r3, r1
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f04f 0100 	mov.w	r1, #0
 800484a:	00d9      	lsls	r1, r3, #3
 800484c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004850:	00d0      	lsls	r0, r2, #3
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	1912      	adds	r2, r2, r4
 8004858:	eb45 0303 	adc.w	r3, r5, r3
 800485c:	f04f 0000 	mov.w	r0, #0
 8004860:	f04f 0100 	mov.w	r1, #0
 8004864:	0299      	lsls	r1, r3, #10
 8004866:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800486a:	0290      	lsls	r0, r2, #10
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	461a      	mov	r2, r3
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	f7fb fcac 	bl	80001d8 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004888:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	3301      	adds	r3, #1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	60bb      	str	r3, [r7, #8]
      break;
 80048a2:	e002      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a4:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048a6:	60bb      	str	r3, [r7, #8]
      break;
 80048a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048aa:	68bb      	ldr	r3, [r7, #8]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	00f42400 	.word	0x00f42400
 80048c0:	007a1200 	.word	0x007a1200

080048c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c8:	4b03      	ldr	r3, [pc, #12]	; (80048d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000008 	.word	0x20000008

080048dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048e0:	f7ff fff0 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	0a9b      	lsrs	r3, r3, #10
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4903      	ldr	r1, [pc, #12]	; (8004900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40023800 	.word	0x40023800
 8004900:	08009f78 	.word	0x08009f78

08004904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004908:	f7ff ffdc 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 800490c:	4602      	mov	r2, r0
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	0b5b      	lsrs	r3, r3, #13
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	4903      	ldr	r1, [pc, #12]	; (8004928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40023800 	.word	0x40023800
 8004928:	08009f78 	.word	0x08009f78

0800492c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e07b      	b.n	8004a36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b00      	cmp	r3, #0
 8004944:	d108      	bne.n	8004958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494e:	d009      	beq.n	8004964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	61da      	str	r2, [r3, #28]
 8004956:	e005      	b.n	8004964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fd fd56 	bl	8002430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e8:	ea42 0103 	orr.w	r1, r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0104 	and.w	r1, r3, #4
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	f003 0210 	and.w	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b088      	sub	sp, #32
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_SPI_Transmit+0x22>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e126      	b.n	8004cae <HAL_SPI_Transmit+0x270>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a68:	f7fd ff88 	bl	800297c <HAL_GetTick>
 8004a6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d002      	beq.n	8004a84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a82:	e10b      	b.n	8004c9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_Transmit+0x52>
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a94:	e102      	b.n	8004c9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2203      	movs	r2, #3
 8004a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	88fa      	ldrh	r2, [r7, #6]
 8004aae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004adc:	d10f      	bne.n	8004afe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004afc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d007      	beq.n	8004b1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b24:	d14b      	bne.n	8004bbe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <HAL_SPI_Transmit+0xf6>
 8004b2e:	8afb      	ldrh	r3, [r7, #22]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d13e      	bne.n	8004bb2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	881a      	ldrh	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b44:	1c9a      	adds	r2, r3, #2
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b58:	e02b      	b.n	8004bb2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d112      	bne.n	8004b8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	881a      	ldrh	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	1c9a      	adds	r2, r3, #2
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b8c:	e011      	b.n	8004bb2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b8e:	f7fd fef5 	bl	800297c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d803      	bhi.n	8004ba6 <HAL_SPI_Transmit+0x168>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d102      	bne.n	8004bac <HAL_SPI_Transmit+0x16e>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bb0:	e074      	b.n	8004c9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ce      	bne.n	8004b5a <HAL_SPI_Transmit+0x11c>
 8004bbc:	e04c      	b.n	8004c58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_SPI_Transmit+0x18e>
 8004bc6:	8afb      	ldrh	r3, [r7, #22]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d140      	bne.n	8004c4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bf2:	e02c      	b.n	8004c4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d113      	bne.n	8004c2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	330c      	adds	r3, #12
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c28:	e011      	b.n	8004c4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c2a:	f7fd fea7 	bl	800297c <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d803      	bhi.n	8004c42 <HAL_SPI_Transmit+0x204>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c40:	d102      	bne.n	8004c48 <HAL_SPI_Transmit+0x20a>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c4c:	e026      	b.n	8004c9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1cd      	bne.n	8004bf4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	6839      	ldr	r1, [r7, #0]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fbcb 	bl	80053f8 <SPI_EndRxTxTransaction>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e000      	b.n	8004c9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cac:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3720      	adds	r7, #32
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b088      	sub	sp, #32
 8004cba:	af02      	add	r7, sp, #8
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd2:	d112      	bne.n	8004cfa <HAL_SPI_Receive+0x44>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10e      	bne.n	8004cfa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 f8f1 	bl	8004ed8 <HAL_SPI_TransmitReceive>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	e0ea      	b.n	8004ed0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_SPI_Receive+0x52>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e0e3      	b.n	8004ed0 <HAL_SPI_Receive+0x21a>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d10:	f7fd fe34 	bl	800297c <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d002      	beq.n	8004d28 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
 8004d24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d26:	e0ca      	b.n	8004ebe <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <HAL_SPI_Receive+0x7e>
 8004d2e:	88fb      	ldrh	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d38:	e0c1      	b.n	8004ebe <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d80:	d10f      	bne.n	8004da2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d007      	beq.n	8004dc0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d162      	bne.n	8004e8e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004dc8:	e02e      	b.n	8004e28 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d115      	bne.n	8004e04 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f103 020c 	add.w	r2, r3, #12
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	7812      	ldrb	r2, [r2, #0]
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e02:	e011      	b.n	8004e28 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e04:	f7fd fdba 	bl	800297c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d803      	bhi.n	8004e1c <HAL_SPI_Receive+0x166>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1a:	d102      	bne.n	8004e22 <HAL_SPI_Receive+0x16c>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d102      	bne.n	8004e28 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e26:	e04a      	b.n	8004ebe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1cb      	bne.n	8004dca <HAL_SPI_Receive+0x114>
 8004e32:	e031      	b.n	8004e98 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d113      	bne.n	8004e6a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	b292      	uxth	r2, r2
 8004e4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e54:	1c9a      	adds	r2, r3, #2
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e68:	e011      	b.n	8004e8e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e6a:	f7fd fd87 	bl	800297c <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d803      	bhi.n	8004e82 <HAL_SPI_Receive+0x1cc>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e80:	d102      	bne.n	8004e88 <HAL_SPI_Receive+0x1d2>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d102      	bne.n	8004e8e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e8c:	e017      	b.n	8004ebe <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1cd      	bne.n	8004e34 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fa45 	bl	800532c <SPI_EndRxTransaction>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	75fb      	strb	r3, [r7, #23]
 8004eba:	e000      	b.n	8004ebe <HAL_SPI_Receive+0x208>
  }

error :
 8004ebc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	; 0x30
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x26>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e18a      	b.n	8005214 <HAL_SPI_TransmitReceive+0x33c>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f06:	f7fd fd39 	bl	800297c <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d00f      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x70>
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f2e:	d107      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d103      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x68>
 8004f38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f3c:	2b04      	cmp	r3, #4
 8004f3e:	d003      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
 8004f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f46:	e15b      	b.n	8005200 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x82>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x82>
 8004f54:	887b      	ldrh	r3, [r7, #2]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d103      	bne.n	8004f62 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f60:	e14e      	b.n	8005200 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d003      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2205      	movs	r2, #5
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	887a      	ldrh	r2, [r7, #2]
 8004f86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	887a      	ldrh	r2, [r7, #2]
 8004f98:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	887a      	ldrh	r2, [r7, #2]
 8004f9e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d007      	beq.n	8004fca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd2:	d178      	bne.n	80050c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <HAL_SPI_TransmitReceive+0x10a>
 8004fdc:	8b7b      	ldrh	r3, [r7, #26]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d166      	bne.n	80050b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	881a      	ldrh	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	1c9a      	adds	r2, r3, #2
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	3b01      	subs	r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005006:	e053      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d11b      	bne.n	800504e <HAL_SPI_TransmitReceive+0x176>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800501a:	b29b      	uxth	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <HAL_SPI_TransmitReceive+0x176>
 8005020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005022:	2b01      	cmp	r3, #1
 8005024:	d113      	bne.n	800504e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	881a      	ldrh	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d119      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x1b8>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d014      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	b292      	uxth	r2, r2
 8005072:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	1c9a      	adds	r2, r3, #2
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800508c:	2301      	movs	r3, #1
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005090:	f7fd fc74 	bl	800297c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800509c:	429a      	cmp	r2, r3
 800509e:	d807      	bhi.n	80050b0 <HAL_SPI_TransmitReceive+0x1d8>
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a6:	d003      	beq.n	80050b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050ae:	e0a7      	b.n	8005200 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1a6      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x130>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1a1      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x130>
 80050c4:	e07c      	b.n	80051c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x1fc>
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d16b      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fa:	e057      	b.n	80051ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b02      	cmp	r3, #2
 8005108:	d11c      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x26c>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x26c>
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d114      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	7812      	ldrb	r2, [r2, #0]
 8005126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d119      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x2ae>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d014      	beq.n	8005186 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005182:	2301      	movs	r3, #1
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005186:	f7fd fbf9 	bl	800297c <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005192:	429a      	cmp	r2, r3
 8005194:	d803      	bhi.n	800519e <HAL_SPI_TransmitReceive+0x2c6>
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d102      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x2cc>
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d103      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051aa:	e029      	b.n	8005200 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1a2      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x224>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d19d      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f917 	bl	80053f8 <SPI_EndRxTxTransaction>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d006      	beq.n	80051de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051dc:	e010      	b.n	8005200 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051e6:	2300      	movs	r3, #0
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	e000      	b.n	8005200 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005210:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005214:	4618      	mov	r0, r3
 8005216:	3730      	adds	r7, #48	; 0x30
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800522c:	f7fd fba6 	bl	800297c <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	4413      	add	r3, r2
 800523a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800523c:	f7fd fb9e 	bl	800297c <HAL_GetTick>
 8005240:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005242:	4b39      	ldr	r3, [pc, #228]	; (8005328 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	015b      	lsls	r3, r3, #5
 8005248:	0d1b      	lsrs	r3, r3, #20
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005252:	e054      	b.n	80052fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525a:	d050      	beq.n	80052fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800525c:	f7fd fb8e 	bl	800297c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	429a      	cmp	r2, r3
 800526a:	d902      	bls.n	8005272 <SPI_WaitFlagStateUntilTimeout+0x56>
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d13d      	bne.n	80052ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005280:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528a:	d111      	bne.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005294:	d004      	beq.n	80052a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529e:	d107      	bne.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b8:	d10f      	bne.n	80052da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e017      	b.n	800531e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	429a      	cmp	r2, r3
 800531a:	d19b      	bne.n	8005254 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000008 	.word	0x20000008

0800532c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005340:	d111      	bne.n	8005366 <SPI_EndRxTransaction+0x3a>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534a:	d004      	beq.n	8005356 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d107      	bne.n	8005366 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005364:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536e:	d12a      	bne.n	80053c6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005378:	d012      	beq.n	80053a0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2200      	movs	r2, #0
 8005382:	2180      	movs	r1, #128	; 0x80
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f7ff ff49 	bl	800521c <SPI_WaitFlagStateUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02d      	beq.n	80053ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e026      	b.n	80053ee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	2101      	movs	r1, #1
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff ff36 	bl	800521c <SPI_WaitFlagStateUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01a      	beq.n	80053ec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e013      	b.n	80053ee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2200      	movs	r2, #0
 80053ce:	2101      	movs	r1, #1
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff ff23 	bl	800521c <SPI_WaitFlagStateUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	f043 0220 	orr.w	r2, r3, #32
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e000      	b.n	80053ee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <SPI_EndRxTxTransaction+0x7c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <SPI_EndRxTxTransaction+0x80>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	0d5b      	lsrs	r3, r3, #21
 8005410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005414:	fb02 f303 	mul.w	r3, r2, r3
 8005418:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005422:	d112      	bne.n	800544a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2200      	movs	r2, #0
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff fef4 	bl	800521c <SPI_WaitFlagStateUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	f043 0220 	orr.w	r2, r3, #32
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e00f      	b.n	800546a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	3b01      	subs	r3, #1
 8005454:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d0f2      	beq.n	800544a <SPI_EndRxTxTransaction+0x52>
 8005464:	e000      	b.n	8005468 <SPI_EndRxTxTransaction+0x70>
        break;
 8005466:	bf00      	nop
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000008 	.word	0x20000008
 8005478:	165e9f81 	.word	0x165e9f81

0800547c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e034      	b.n	80054fc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7fb ff9a 	bl	80013e0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3308      	adds	r3, #8
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f001 fc6e 	bl	8006d98 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	461a      	mov	r2, r3
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	f001 fcb8 	bl	8006e3c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6858      	ldr	r0, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	f001 fced 	bl	8006eb8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	6892      	ldr	r2, [r2, #8]
 80054f2:	f041 0101 	orr.w	r1, r1, #1
 80054f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e041      	b.n	800559a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fd f88c 	bl	8002648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f000 fa96 	bl	8005a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d001      	beq.n	80055bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e04e      	b.n	800565a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a23      	ldr	r2, [pc, #140]	; (8005668 <HAL_TIM_Base_Start_IT+0xc4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d022      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e6:	d01d      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1f      	ldr	r2, [pc, #124]	; (800566c <HAL_TIM_Base_Start_IT+0xc8>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d018      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1e      	ldr	r2, [pc, #120]	; (8005670 <HAL_TIM_Base_Start_IT+0xcc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d013      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <HAL_TIM_Base_Start_IT+0xd0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00e      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <HAL_TIM_Base_Start_IT+0xd4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d009      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a19      	ldr	r2, [pc, #100]	; (800567c <HAL_TIM_Base_Start_IT+0xd8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d004      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x80>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_TIM_Base_Start_IT+0xdc>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d111      	bne.n	8005648 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b06      	cmp	r3, #6
 8005634:	d010      	beq.n	8005658 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005646:	e007      	b.n	8005658 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	40010000 	.word	0x40010000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40010400 	.word	0x40010400
 800567c:	40014000 	.word	0x40014000
 8005680:	40001800 	.word	0x40001800

08005684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0202 	mvn.w	r2, #2
 80056b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9b5 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f9a7 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f9b8 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0304 	and.w	r3, r3, #4
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d122      	bne.n	8005734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d11b      	bne.n	8005734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0204 	mvn.w	r2, #4
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2202      	movs	r2, #2
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f98b 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f97d 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f98e 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b08      	cmp	r3, #8
 8005740:	d122      	bne.n	8005788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b08      	cmp	r3, #8
 800574e:	d11b      	bne.n	8005788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0208 	mvn.w	r2, #8
 8005758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2204      	movs	r2, #4
 800575e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f961 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 8005774:	e005      	b.n	8005782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f953 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f964 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 0310 	and.w	r3, r3, #16
 8005792:	2b10      	cmp	r3, #16
 8005794:	d122      	bne.n	80057dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d11b      	bne.n	80057dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f06f 0210 	mvn.w	r2, #16
 80057ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2208      	movs	r2, #8
 80057b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f937 	bl	8005a36 <HAL_TIM_IC_CaptureCallback>
 80057c8:	e005      	b.n	80057d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f929 	bl	8005a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f93a 	bl	8005a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0201 	mvn.w	r2, #1
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fc fd98 	bl	8002338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b80      	cmp	r3, #128	; 0x80
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005820:	2b80      	cmp	r3, #128	; 0x80
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fae0 	bl	8005df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d10e      	bne.n	8005860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d107      	bne.n	8005860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8ff 	bl	8005a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b20      	cmp	r3, #32
 800586c:	d10e      	bne.n	800588c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b20      	cmp	r3, #32
 800587a:	d107      	bne.n	800588c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0220 	mvn.w	r2, #32
 8005884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 faaa 	bl	8005de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_TIM_ConfigClockSource+0x1c>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e0b4      	b.n	8005a1a <HAL_TIM_ConfigClockSource+0x186>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68ba      	ldr	r2, [r7, #8]
 80058de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e8:	d03e      	beq.n	8005968 <HAL_TIM_ConfigClockSource+0xd4>
 80058ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ee:	f200 8087 	bhi.w	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 80058f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058f6:	f000 8086 	beq.w	8005a06 <HAL_TIM_ConfigClockSource+0x172>
 80058fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fe:	d87f      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005900:	2b70      	cmp	r3, #112	; 0x70
 8005902:	d01a      	beq.n	800593a <HAL_TIM_ConfigClockSource+0xa6>
 8005904:	2b70      	cmp	r3, #112	; 0x70
 8005906:	d87b      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005908:	2b60      	cmp	r3, #96	; 0x60
 800590a:	d050      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x11a>
 800590c:	2b60      	cmp	r3, #96	; 0x60
 800590e:	d877      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005910:	2b50      	cmp	r3, #80	; 0x50
 8005912:	d03c      	beq.n	800598e <HAL_TIM_ConfigClockSource+0xfa>
 8005914:	2b50      	cmp	r3, #80	; 0x50
 8005916:	d873      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d058      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x13a>
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d86f      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005920:	2b30      	cmp	r3, #48	; 0x30
 8005922:	d064      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	2b30      	cmp	r3, #48	; 0x30
 8005926:	d86b      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005928:	2b20      	cmp	r3, #32
 800592a:	d060      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 800592c:	2b20      	cmp	r3, #32
 800592e:	d867      	bhi.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d05c      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 8005934:	2b10      	cmp	r3, #16
 8005936:	d05a      	beq.n	80059ee <HAL_TIM_ConfigClockSource+0x15a>
 8005938:	e062      	b.n	8005a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6899      	ldr	r1, [r3, #8]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f000 f9ad 	bl	8005ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800595c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	609a      	str	r2, [r3, #8]
      break;
 8005966:	e04f      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6818      	ldr	r0, [r3, #0]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	6899      	ldr	r1, [r3, #8]
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f000 f996 	bl	8005ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800598a:	609a      	str	r2, [r3, #8]
      break;
 800598c:	e03c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	461a      	mov	r2, r3
 800599c:	f000 f90a 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2150      	movs	r1, #80	; 0x50
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f963 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80059ac:	e02c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	461a      	mov	r2, r3
 80059bc:	f000 f929 	bl	8005c12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2160      	movs	r1, #96	; 0x60
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f953 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80059cc:	e01c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	461a      	mov	r2, r3
 80059dc:	f000 f8ea 	bl	8005bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2140      	movs	r1, #64	; 0x40
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f943 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80059ec:	e00c      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f000 f93a 	bl	8005c72 <TIM_ITRx_SetConfig>
      break;
 80059fe:	e003      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e000      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a40      	ldr	r2, [pc, #256]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a92:	d00f      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3d      	ldr	r2, [pc, #244]	; (8005b8c <TIM_Base_SetConfig+0x118>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00b      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3c      	ldr	r2, [pc, #240]	; (8005b90 <TIM_Base_SetConfig+0x11c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d007      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a3b      	ldr	r2, [pc, #236]	; (8005b94 <TIM_Base_SetConfig+0x120>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3a      	ldr	r2, [pc, #232]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d108      	bne.n	8005ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2f      	ldr	r2, [pc, #188]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d02b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad4:	d027      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2c      	ldr	r2, [pc, #176]	; (8005b8c <TIM_Base_SetConfig+0x118>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d023      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2b      	ldr	r2, [pc, #172]	; (8005b90 <TIM_Base_SetConfig+0x11c>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01f      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a2a      	ldr	r2, [pc, #168]	; (8005b94 <TIM_Base_SetConfig+0x120>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d017      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <TIM_Base_SetConfig+0x128>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <TIM_Base_SetConfig+0x12c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00f      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a26      	ldr	r2, [pc, #152]	; (8005ba4 <TIM_Base_SetConfig+0x130>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00b      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a25      	ldr	r2, [pc, #148]	; (8005ba8 <TIM_Base_SetConfig+0x134>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a24      	ldr	r2, [pc, #144]	; (8005bac <TIM_Base_SetConfig+0x138>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <TIM_Base_SetConfig+0x13c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d108      	bne.n	8005b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a0a      	ldr	r2, [pc, #40]	; (8005b88 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d003      	beq.n	8005b6c <TIM_Base_SetConfig+0xf8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a0c      	ldr	r2, [pc, #48]	; (8005b98 <TIM_Base_SetConfig+0x124>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d103      	bne.n	8005b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	615a      	str	r2, [r3, #20]
}
 8005b7a:	bf00      	nop
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	40000400 	.word	0x40000400
 8005b90:	40000800 	.word	0x40000800
 8005b94:	40000c00 	.word	0x40000c00
 8005b98:	40010400 	.word	0x40010400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800
 8005ba8:	40001800 	.word	0x40001800
 8005bac:	40001c00 	.word	0x40001c00
 8005bb0:	40002000 	.word	0x40002000

08005bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f023 0201 	bic.w	r2, r3, #1
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f023 030a 	bic.w	r3, r3, #10
 8005bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	621a      	str	r2, [r3, #32]
}
 8005c06:	bf00      	nop
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b087      	sub	sp, #28
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f023 0210 	bic.w	r2, r3, #16
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	031b      	lsls	r3, r3, #12
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	621a      	str	r2, [r3, #32]
}
 8005c66:	bf00      	nop
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f043 0307 	orr.w	r3, r3, #7
 8005c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	609a      	str	r2, [r3, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e05a      	b.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a21      	ldr	r2, [pc, #132]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d4c:	d01d      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a1b      	ldr	r2, [pc, #108]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a1a      	ldr	r2, [pc, #104]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a18      	ldr	r2, [pc, #96]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10c      	bne.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40010400 	.word	0x40010400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40001800 	.word	0x40001800

08005de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e03f      	b.n	8005e9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7fc fc86 	bl	8002740 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2224      	movs	r2, #36	; 0x24
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fddb 	bl	8006a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691a      	ldr	r2, [r3, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b08a      	sub	sp, #40	; 0x28
 8005ea6:	af02      	add	r7, sp, #8
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d17c      	bne.n	8005fbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_UART_Transmit+0x2c>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e075      	b.n	8005fbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_UART_Transmit+0x3e>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e06e      	b.n	8005fbe <HAL_UART_Transmit+0x11c>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2221      	movs	r2, #33	; 0x21
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ef6:	f7fc fd41 	bl	800297c <HAL_GetTick>
 8005efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f10:	d108      	bne.n	8005f24 <HAL_UART_Transmit+0x82>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	e003      	b.n	8005f2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f34:	e02a      	b.n	8005f8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2180      	movs	r1, #128	; 0x80
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fb1f 	bl	8006584 <UART_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e036      	b.n	8005fbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	3302      	adds	r3, #2
 8005f6a:	61bb      	str	r3, [r7, #24]
 8005f6c:	e007      	b.n	8005f7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1cf      	bne.n	8005f36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	2140      	movs	r1, #64	; 0x40
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f000 faef 	bl	8006584 <UART_WaitOnFlagUntilTimeout>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e006      	b.n	8005fbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2220      	movs	r2, #32
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e000      	b.n	8005fbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d11d      	bne.n	800601c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <HAL_UART_Receive_IT+0x26>
 8005fe6:	88fb      	ldrh	r3, [r7, #6]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e016      	b.n	800601e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Receive_IT+0x38>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e00f      	b.n	800601e <HAL_UART_Receive_IT+0x58>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	461a      	mov	r2, r3
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 fb24 	bl	8006660 <UART_Start_Receive_IT>
 8006018:	4603      	mov	r3, r0
 800601a:	e000      	b.n	800601e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b0ba      	sub	sp, #232	; 0xe8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800604e:	2300      	movs	r3, #0
 8006050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800605a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006066:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10f      	bne.n	800608e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0320 	and.w	r3, r3, #32
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_UART_IRQHandler+0x66>
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fc03 	bl	8006892 <UART_Receive_IT>
      return;
 800608c:	e256      	b.n	800653c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800608e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80de 	beq.w	8006254 <HAL_UART_IRQHandler+0x22c>
 8006098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d106      	bne.n	80060b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 80d1 	beq.w	8006254 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00b      	beq.n	80060d6 <HAL_UART_IRQHandler+0xae>
 80060be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0201 	orr.w	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <HAL_UART_IRQHandler+0xd2>
 80060e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	f043 0202 	orr.w	r2, r3, #2
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_UART_IRQHandler+0xf6>
 8006106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d005      	beq.n	800611e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f043 0204 	orr.w	r2, r3, #4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d011      	beq.n	800614e <HAL_UART_IRQHandler+0x126>
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d105      	bne.n	8006142 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d005      	beq.n	800614e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	f043 0208 	orr.w	r2, r3, #8
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 81ed 	beq.w	8006532 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <HAL_UART_IRQHandler+0x14e>
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d002      	beq.n	8006176 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fb8e 	bl	8006892 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	bf0c      	ite	eq
 8006184:	2301      	moveq	r3, #1
 8006186:	2300      	movne	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <HAL_UART_IRQHandler+0x17a>
 800619a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04f      	beq.n	8006242 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa96 	bl	80066d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	d141      	bne.n	800623a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	3314      	adds	r3, #20
 80061bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	3314      	adds	r3, #20
 80061de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1d9      	bne.n	80061b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	2b00      	cmp	r3, #0
 8006208:	d013      	beq.n	8006232 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	4a7d      	ldr	r2, [pc, #500]	; (8006404 <HAL_UART_IRQHandler+0x3dc>)
 8006210:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	4618      	mov	r0, r3
 8006218:	f7fc fd61 	bl	8002cde <HAL_DMA_Abort_IT>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d016      	beq.n	8006250 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800622c:	4610      	mov	r0, r2
 800622e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	e00e      	b.n	8006250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f990 	bl	8006558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	e00a      	b.n	8006250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f98c 	bl	8006558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006240:	e006      	b.n	8006250 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f988 	bl	8006558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800624e:	e170      	b.n	8006532 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006250:	bf00      	nop
    return;
 8006252:	e16e      	b.n	8006532 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	2b01      	cmp	r3, #1
 800625a:	f040 814a 	bne.w	80064f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800625e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8143 	beq.w	80064f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800626c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006270:	f003 0310 	and.w	r3, r3, #16
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 813c 	beq.w	80064f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	f040 80b4 	bne.w	8006408 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8140 	beq.w	8006536 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062be:	429a      	cmp	r2, r3
 80062c0:	f080 8139 	bcs.w	8006536 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d6:	f000 8088 	beq.w	80063ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	330c      	adds	r3, #12
 8006302:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800630a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006312:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800631e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1d9      	bne.n	80062da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3314      	adds	r3, #20
 800632c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3314      	adds	r3, #20
 8006346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800634a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800634e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006352:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800635c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e1      	bne.n	8006326 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006386:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800638c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800638e:	e841 2300 	strex	r3, r2, [r1]
 8006392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e3      	bne.n	8006362 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063b2:	e853 3f00 	ldrex	r3, [r3]
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ba:	f023 0310 	bic.w	r3, r3, #16
 80063be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063d4:	e841 2300 	strex	r3, r2, [r1]
 80063d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e3      	bne.n	80063a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fc fc0a 	bl	8002bfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f8b6 	bl	800656c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006400:	e099      	b.n	8006536 <HAL_UART_IRQHandler+0x50e>
 8006402:	bf00      	nop
 8006404:	0800679b 	.word	0x0800679b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 808b 	beq.w	800653a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8086 	beq.w	800653a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006452:	647a      	str	r2, [r7, #68]	; 0x44
 8006454:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	623b      	str	r3, [r7, #32]
   return(result);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800648a:	633a      	str	r2, [r7, #48]	; 0x30
 800648c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e3      	bne.n	8006466 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064d0:	61fa      	str	r2, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	69b9      	ldr	r1, [r7, #24]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	617b      	str	r3, [r7, #20]
   return(result);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e3      	bne.n	80064ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f83e 	bl	800656c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f0:	e023      	b.n	800653a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_UART_IRQHandler+0x4ea>
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f959 	bl	80067c2 <UART_Transmit_IT>
    return;
 8006510:	e014      	b.n	800653c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <HAL_UART_IRQHandler+0x514>
 800651e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f999 	bl	8006862 <UART_EndTransmit_IT>
    return;
 8006530:	e004      	b.n	800653c <HAL_UART_IRQHandler+0x514>
    return;
 8006532:	bf00      	nop
 8006534:	e002      	b.n	800653c <HAL_UART_IRQHandler+0x514>
      return;
 8006536:	bf00      	nop
 8006538:	e000      	b.n	800653c <HAL_UART_IRQHandler+0x514>
      return;
 800653a:	bf00      	nop
  }
}
 800653c:	37e8      	adds	r7, #232	; 0xe8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop

08006544 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b090      	sub	sp, #64	; 0x40
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	e050      	b.n	8006638 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d04c      	beq.n	8006638 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065a4:	f7fc f9ea 	bl	800297c <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d241      	bcs.n	8006638 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065d4:	637a      	str	r2, [r7, #52]	; 0x34
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e5      	bne.n	80065b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3314      	adds	r3, #20
 80065ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	613b      	str	r3, [r7, #16]
   return(result);
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3314      	adds	r3, #20
 8006606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006608:	623a      	str	r2, [r7, #32]
 800660a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	69f9      	ldr	r1, [r7, #28]
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	61bb      	str	r3, [r7, #24]
   return(result);
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e5      	bne.n	80065e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e00f      	b.n	8006658 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4013      	ands	r3, r2
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	429a      	cmp	r2, r3
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	461a      	mov	r2, r3
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	429a      	cmp	r2, r3
 8006654:	d09f      	beq.n	8006596 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3740      	adds	r7, #64	; 0x40
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2222      	movs	r2, #34	; 0x22
 800668a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695a      	ldr	r2, [r3, #20]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0220 	orr.w	r2, r2, #32
 80066c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b095      	sub	sp, #84	; 0x54
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066fc:	643a      	str	r2, [r7, #64]	; 0x40
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006702:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e5      	bne.n	80066dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3314      	adds	r3, #20
 8006716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	e853 3f00 	ldrex	r3, [r3]
 800671e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f023 0301 	bic.w	r3, r3, #1
 8006726:	64bb      	str	r3, [r7, #72]	; 0x48
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006738:	e841 2300 	strex	r3, r2, [r1]
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1e5      	bne.n	8006710 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	2b01      	cmp	r3, #1
 800674a:	d119      	bne.n	8006780 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	60bb      	str	r3, [r7, #8]
   return(result);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f023 0310 	bic.w	r3, r3, #16
 8006762:	647b      	str	r3, [r7, #68]	; 0x44
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800676c:	61ba      	str	r2, [r7, #24]
 800676e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6979      	ldr	r1, [r7, #20]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	613b      	str	r3, [r7, #16]
   return(result);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e5      	bne.n	800674c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800678e:	bf00      	nop
 8006790:	3754      	adds	r7, #84	; 0x54
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff fecf 	bl	8006558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ba:	bf00      	nop
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b21      	cmp	r3, #33	; 0x21
 80067d4:	d13e      	bne.n	8006854 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067de:	d114      	bne.n	800680a <UART_Transmit_IT+0x48>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d110      	bne.n	800680a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	1c9a      	adds	r2, r3, #2
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	621a      	str	r2, [r3, #32]
 8006808:	e008      	b.n	800681c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	1c59      	adds	r1, r3, #1
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6211      	str	r1, [r2, #32]
 8006814:	781a      	ldrb	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29b      	uxth	r3, r3
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	4619      	mov	r1, r3
 800682a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10f      	bne.n	8006850 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800683e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800684e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	e000      	b.n	8006856 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006878:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff fe5e 	bl	8006544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b08c      	sub	sp, #48	; 0x30
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b22      	cmp	r3, #34	; 0x22
 80068a4:	f040 80ab 	bne.w	80069fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d117      	bne.n	80068e2 <UART_Receive_IT+0x50>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d113      	bne.n	80068e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	1c9a      	adds	r2, r3, #2
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	629a      	str	r2, [r3, #40]	; 0x28
 80068e0:	e026      	b.n	8006930 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068e8:	2300      	movs	r3, #0
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f4:	d007      	beq.n	8006906 <UART_Receive_IT+0x74>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10a      	bne.n	8006914 <UART_Receive_IT+0x82>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d106      	bne.n	8006914 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	e008      	b.n	8006926 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006920:	b2da      	uxtb	r2, r3
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29b      	uxth	r3, r3
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	4619      	mov	r1, r3
 800693e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006940:	2b00      	cmp	r3, #0
 8006942:	d15a      	bne.n	80069fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0220 	bic.w	r2, r2, #32
 8006952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006962:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	2b01      	cmp	r3, #1
 8006982:	d135      	bne.n	80069f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	613b      	str	r3, [r7, #16]
   return(result);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f023 0310 	bic.w	r3, r3, #16
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	330c      	adds	r3, #12
 80069a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069aa:	623a      	str	r2, [r7, #32]
 80069ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	69f9      	ldr	r1, [r7, #28]
 80069b0:	6a3a      	ldr	r2, [r7, #32]
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e5      	bne.n	800698a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d10a      	bne.n	80069e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069cc:	2300      	movs	r3, #0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff fdbf 	bl	800656c <HAL_UARTEx_RxEventCallback>
 80069ee:	e002      	b.n	80069f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7fb fe5d 	bl	80026b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e002      	b.n	8006a00 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e000      	b.n	8006a00 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069fe:	2302      	movs	r3, #2
  }
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3730      	adds	r7, #48	; 0x30
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	b09f      	sub	sp, #124	; 0x7c
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1e:	68d9      	ldr	r1, [r3, #12]
 8006a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	ea40 0301 	orr.w	r3, r0, r1
 8006a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a4c:	f021 010c 	bic.w	r1, r1, #12
 8006a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a56:	430b      	orrs	r3, r1
 8006a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a66:	6999      	ldr	r1, [r3, #24]
 8006a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	ea40 0301 	orr.w	r3, r0, r1
 8006a70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4bc5      	ldr	r3, [pc, #788]	; (8006d8c <UART_SetConfig+0x384>)
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d004      	beq.n	8006a86 <UART_SetConfig+0x7e>
 8006a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	4bc3      	ldr	r3, [pc, #780]	; (8006d90 <UART_SetConfig+0x388>)
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d103      	bne.n	8006a8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a86:	f7fd ff3d 	bl	8004904 <HAL_RCC_GetPCLK2Freq>
 8006a8a:	6778      	str	r0, [r7, #116]	; 0x74
 8006a8c:	e002      	b.n	8006a94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a8e:	f7fd ff25 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8006a92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9c:	f040 80b6 	bne.w	8006c0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	f04f 0500 	mov.w	r5, #0
 8006aa8:	4622      	mov	r2, r4
 8006aaa:	462b      	mov	r3, r5
 8006aac:	1891      	adds	r1, r2, r2
 8006aae:	6439      	str	r1, [r7, #64]	; 0x40
 8006ab0:	415b      	adcs	r3, r3
 8006ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8006ab4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ab8:	1912      	adds	r2, r2, r4
 8006aba:	eb45 0303 	adc.w	r3, r5, r3
 8006abe:	f04f 0000 	mov.w	r0, #0
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	00d9      	lsls	r1, r3, #3
 8006ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006acc:	00d0      	lsls	r0, r2, #3
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	1911      	adds	r1, r2, r4
 8006ad4:	6639      	str	r1, [r7, #96]	; 0x60
 8006ad6:	416b      	adcs	r3, r5
 8006ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8006ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	1891      	adds	r1, r2, r2
 8006ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ae8:	415b      	adcs	r3, r3
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006af0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006af4:	f7f9 fb70 	bl	80001d8 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4ba5      	ldr	r3, [pc, #660]	; (8006d94 <UART_SetConfig+0x38c>)
 8006afe:	fba3 2302 	umull	r2, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	011e      	lsls	r6, r3, #4
 8006b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b08:	461c      	mov	r4, r3
 8006b0a:	f04f 0500 	mov.w	r5, #0
 8006b0e:	4622      	mov	r2, r4
 8006b10:	462b      	mov	r3, r5
 8006b12:	1891      	adds	r1, r2, r2
 8006b14:	6339      	str	r1, [r7, #48]	; 0x30
 8006b16:	415b      	adcs	r3, r3
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b1e:	1912      	adds	r2, r2, r4
 8006b20:	eb45 0303 	adc.w	r3, r5, r3
 8006b24:	f04f 0000 	mov.w	r0, #0
 8006b28:	f04f 0100 	mov.w	r1, #0
 8006b2c:	00d9      	lsls	r1, r3, #3
 8006b2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b32:	00d0      	lsls	r0, r2, #3
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	1911      	adds	r1, r2, r4
 8006b3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b3c:	416b      	adcs	r3, r5
 8006b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	461a      	mov	r2, r3
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	1891      	adds	r1, r2, r2
 8006b4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b4e:	415b      	adcs	r3, r3
 8006b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b5a:	f7f9 fb3d 	bl	80001d8 <__aeabi_uldivmod>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4b8c      	ldr	r3, [pc, #560]	; (8006d94 <UART_SetConfig+0x38c>)
 8006b64:	fba3 1302 	umull	r1, r3, r3, r2
 8006b68:	095b      	lsrs	r3, r3, #5
 8006b6a:	2164      	movs	r1, #100	; 0x64
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	3332      	adds	r3, #50	; 0x32
 8006b76:	4a87      	ldr	r2, [pc, #540]	; (8006d94 <UART_SetConfig+0x38c>)
 8006b78:	fba2 2303 	umull	r2, r3, r2, r3
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b84:	441e      	add	r6, r3
 8006b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f04f 0100 	mov.w	r1, #0
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	1894      	adds	r4, r2, r2
 8006b94:	623c      	str	r4, [r7, #32]
 8006b96:	415b      	adcs	r3, r3
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b9e:	1812      	adds	r2, r2, r0
 8006ba0:	eb41 0303 	adc.w	r3, r1, r3
 8006ba4:	f04f 0400 	mov.w	r4, #0
 8006ba8:	f04f 0500 	mov.w	r5, #0
 8006bac:	00dd      	lsls	r5, r3, #3
 8006bae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bb2:	00d4      	lsls	r4, r2, #3
 8006bb4:	4622      	mov	r2, r4
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	1814      	adds	r4, r2, r0
 8006bba:	653c      	str	r4, [r7, #80]	; 0x50
 8006bbc:	414b      	adcs	r3, r1
 8006bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8006bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	1891      	adds	r1, r2, r2
 8006bcc:	61b9      	str	r1, [r7, #24]
 8006bce:	415b      	adcs	r3, r3
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006bda:	f7f9 fafd 	bl	80001d8 <__aeabi_uldivmod>
 8006bde:	4602      	mov	r2, r0
 8006be0:	460b      	mov	r3, r1
 8006be2:	4b6c      	ldr	r3, [pc, #432]	; (8006d94 <UART_SetConfig+0x38c>)
 8006be4:	fba3 1302 	umull	r1, r3, r3, r2
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	2164      	movs	r1, #100	; 0x64
 8006bec:	fb01 f303 	mul.w	r3, r1, r3
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	3332      	adds	r3, #50	; 0x32
 8006bf6:	4a67      	ldr	r2, [pc, #412]	; (8006d94 <UART_SetConfig+0x38c>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	f003 0207 	and.w	r2, r3, #7
 8006c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4432      	add	r2, r6
 8006c08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c0a:	e0b9      	b.n	8006d80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0e:	461c      	mov	r4, r3
 8006c10:	f04f 0500 	mov.w	r5, #0
 8006c14:	4622      	mov	r2, r4
 8006c16:	462b      	mov	r3, r5
 8006c18:	1891      	adds	r1, r2, r2
 8006c1a:	6139      	str	r1, [r7, #16]
 8006c1c:	415b      	adcs	r3, r3
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c24:	1912      	adds	r2, r2, r4
 8006c26:	eb45 0303 	adc.w	r3, r5, r3
 8006c2a:	f04f 0000 	mov.w	r0, #0
 8006c2e:	f04f 0100 	mov.w	r1, #0
 8006c32:	00d9      	lsls	r1, r3, #3
 8006c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c38:	00d0      	lsls	r0, r2, #3
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	eb12 0804 	adds.w	r8, r2, r4
 8006c42:	eb43 0905 	adc.w	r9, r3, r5
 8006c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f04f 0100 	mov.w	r1, #0
 8006c50:	f04f 0200 	mov.w	r2, #0
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	008b      	lsls	r3, r1, #2
 8006c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c5e:	0082      	lsls	r2, r0, #2
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f7f9 fab8 	bl	80001d8 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4b49      	ldr	r3, [pc, #292]	; (8006d94 <UART_SetConfig+0x38c>)
 8006c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	011e      	lsls	r6, r3, #4
 8006c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f04f 0100 	mov.w	r1, #0
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	1894      	adds	r4, r2, r2
 8006c84:	60bc      	str	r4, [r7, #8]
 8006c86:	415b      	adcs	r3, r3
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c8e:	1812      	adds	r2, r2, r0
 8006c90:	eb41 0303 	adc.w	r3, r1, r3
 8006c94:	f04f 0400 	mov.w	r4, #0
 8006c98:	f04f 0500 	mov.w	r5, #0
 8006c9c:	00dd      	lsls	r5, r3, #3
 8006c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ca2:	00d4      	lsls	r4, r2, #3
 8006ca4:	4622      	mov	r2, r4
 8006ca6:	462b      	mov	r3, r5
 8006ca8:	1814      	adds	r4, r2, r0
 8006caa:	64bc      	str	r4, [r7, #72]	; 0x48
 8006cac:	414b      	adcs	r3, r1
 8006cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f04f 0100 	mov.w	r1, #0
 8006cba:	f04f 0200 	mov.w	r2, #0
 8006cbe:	f04f 0300 	mov.w	r3, #0
 8006cc2:	008b      	lsls	r3, r1, #2
 8006cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cc8:	0082      	lsls	r2, r0, #2
 8006cca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006cce:	f7f9 fa83 	bl	80001d8 <__aeabi_uldivmod>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <UART_SetConfig+0x38c>)
 8006cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	2164      	movs	r1, #100	; 0x64
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	3332      	adds	r3, #50	; 0x32
 8006cea:	4a2a      	ldr	r2, [pc, #168]	; (8006d94 <UART_SetConfig+0x38c>)
 8006cec:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf0:	095b      	lsrs	r3, r3, #5
 8006cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cf6:	441e      	add	r6, r3
 8006cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f04f 0100 	mov.w	r1, #0
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	1894      	adds	r4, r2, r2
 8006d06:	603c      	str	r4, [r7, #0]
 8006d08:	415b      	adcs	r3, r3
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d10:	1812      	adds	r2, r2, r0
 8006d12:	eb41 0303 	adc.w	r3, r1, r3
 8006d16:	f04f 0400 	mov.w	r4, #0
 8006d1a:	f04f 0500 	mov.w	r5, #0
 8006d1e:	00dd      	lsls	r5, r3, #3
 8006d20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d24:	00d4      	lsls	r4, r2, #3
 8006d26:	4622      	mov	r2, r4
 8006d28:	462b      	mov	r3, r5
 8006d2a:	eb12 0a00 	adds.w	sl, r2, r0
 8006d2e:	eb43 0b01 	adc.w	fp, r3, r1
 8006d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f04f 0100 	mov.w	r1, #0
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	008b      	lsls	r3, r1, #2
 8006d46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d4a:	0082      	lsls	r2, r0, #2
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	4659      	mov	r1, fp
 8006d50:	f7f9 fa42 	bl	80001d8 <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4b0e      	ldr	r3, [pc, #56]	; (8006d94 <UART_SetConfig+0x38c>)
 8006d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d5e:	095b      	lsrs	r3, r3, #5
 8006d60:	2164      	movs	r1, #100	; 0x64
 8006d62:	fb01 f303 	mul.w	r3, r1, r3
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	3332      	adds	r3, #50	; 0x32
 8006d6c:	4a09      	ldr	r2, [pc, #36]	; (8006d94 <UART_SetConfig+0x38c>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4432      	add	r2, r6
 8006d7e:	609a      	str	r2, [r3, #8]
}
 8006d80:	bf00      	nop
 8006d82:	377c      	adds	r7, #124	; 0x7c
 8006d84:	46bd      	mov	sp, r7
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40011000 	.word	0x40011000
 8006d90:	40011400 	.word	0x40011400
 8006d94:	51eb851f 	.word	0x51eb851f

08006d98 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <FSMC_NORSRAM_Init+0xa0>)
 8006db6:	4013      	ands	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006dc2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006dc8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006dce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006dd4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006dda:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006de0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006de6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006dec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006df2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006df8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006dfe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006e04:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d103      	bne.n	8006e1c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	fff00080 	.word	0xfff00080

08006e3c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e56:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e5e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e6a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e72:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e7a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e84:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	3b02      	subs	r3, #2
 8006e8c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006e8e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e94:	4313      	orrs	r3, r2
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6979      	ldr	r1, [r7, #20]
 8006ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed0:	d122      	bne.n	8006f18 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eda:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4b15      	ldr	r3, [pc, #84]	; (8006f34 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006eee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006ef6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006efe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f04:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6979      	ldr	r1, [r7, #20]
 8006f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f16:	e005      	b.n	8006f24 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	cff00000 	.word	0xcff00000

08006f38 <__libc_init_array>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	4d0d      	ldr	r5, [pc, #52]	; (8006f70 <__libc_init_array+0x38>)
 8006f3c:	4c0d      	ldr	r4, [pc, #52]	; (8006f74 <__libc_init_array+0x3c>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	2600      	movs	r6, #0
 8006f44:	42a6      	cmp	r6, r4
 8006f46:	d109      	bne.n	8006f5c <__libc_init_array+0x24>
 8006f48:	4d0b      	ldr	r5, [pc, #44]	; (8006f78 <__libc_init_array+0x40>)
 8006f4a:	4c0c      	ldr	r4, [pc, #48]	; (8006f7c <__libc_init_array+0x44>)
 8006f4c:	f000 f820 	bl	8006f90 <_init>
 8006f50:	1b64      	subs	r4, r4, r5
 8006f52:	10a4      	asrs	r4, r4, #2
 8006f54:	2600      	movs	r6, #0
 8006f56:	42a6      	cmp	r6, r4
 8006f58:	d105      	bne.n	8006f66 <__libc_init_array+0x2e>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f60:	4798      	blx	r3
 8006f62:	3601      	adds	r6, #1
 8006f64:	e7ee      	b.n	8006f44 <__libc_init_array+0xc>
 8006f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6a:	4798      	blx	r3
 8006f6c:	3601      	adds	r6, #1
 8006f6e:	e7f2      	b.n	8006f56 <__libc_init_array+0x1e>
 8006f70:	08009f88 	.word	0x08009f88
 8006f74:	08009f88 	.word	0x08009f88
 8006f78:	08009f88 	.word	0x08009f88
 8006f7c:	08009f8c 	.word	0x08009f8c

08006f80 <memset>:
 8006f80:	4402      	add	r2, r0
 8006f82:	4603      	mov	r3, r0
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d100      	bne.n	8006f8a <memset+0xa>
 8006f88:	4770      	bx	lr
 8006f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f8e:	e7f9      	b.n	8006f84 <memset+0x4>

08006f90 <_init>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	bf00      	nop
 8006f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f96:	bc08      	pop	{r3}
 8006f98:	469e      	mov	lr, r3
 8006f9a:	4770      	bx	lr

08006f9c <_fini>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr
