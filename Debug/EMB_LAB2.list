
EMB_LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe0  08006fe4  08006fe4  00016fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc4  08009fc4  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc4  08009fc4  00019fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fcc  08009fcc  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fcc  08009fcc  00019fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fd0  08009fd0  00019fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08009fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          00000264  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000298  20000298  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4ae  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f30  00000000  00000000  0003f512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001568  00000000  00000000  00043448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013c0  00000000  00000000  000449b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253b9  00000000  00000000  00045d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d231  00000000  00000000  0006b129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3a2b  00000000  00000000  0008835a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015bd85  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057bc  00000000  00000000  0015bdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000034 	.word	0x20000034
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006fcc 	.word	0x08006fcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000038 	.word	0x20000038
 80001c4:	08006fcc 	.word	0x08006fcc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2108      	movs	r1, #8
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <button_init+0x14>)
 80004da:	f002 fddd 	bl	8003098 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020c00 	.word	0x40020c00

080004e8 <button_Scan>:

void button_Scan(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2108      	movs	r1, #8
 80004f2:	482f      	ldr	r0, [pc, #188]	; (80005b0 <button_Scan+0xc8>)
 80004f4:	f002 fdd0 	bl	8003098 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	482c      	ldr	r0, [pc, #176]	; (80005b0 <button_Scan+0xc8>)
 80004fe:	f002 fdcb 	bl	8003098 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000502:	230a      	movs	r3, #10
 8000504:	2202      	movs	r2, #2
 8000506:	492b      	ldr	r1, [pc, #172]	; (80005b4 <button_Scan+0xcc>)
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <button_Scan+0xd0>)
 800050a:	f004 fbf2 	bl	8004cf2 <HAL_SPI_Receive>
	  int button_index = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000516:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	e03f      	b.n	800059e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	db06      	blt.n	8000532 <button_Scan+0x4a>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dc03      	bgt.n	8000532 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e018      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dd07      	ble.n	8000548 <button_Scan+0x60>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc04      	bgt.n	8000548 <button_Scan+0x60>
			  button_index = 7 - i;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f1c3 0307 	rsb	r3, r3, #7
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	e00d      	b.n	8000564 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	dd06      	ble.n	800055c <button_Scan+0x74>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0b      	cmp	r3, #11
 8000552:	dc03      	bgt.n	800055c <button_Scan+0x74>
			  button_index = i + 4;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3304      	adds	r3, #4
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	e003      	b.n	8000564 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f1c3 0317 	rsb	r3, r3, #23
 8000562:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <button_Scan+0xcc>)
 8000566:	881a      	ldrh	r2, [r3, #0]
 8000568:	897b      	ldrh	r3, [r7, #10]
 800056a:	4013      	ands	r3, r2
 800056c:	b29b      	uxth	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <button_Scan+0x96>
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2100      	movs	r1, #0
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800057c:	e009      	b.n	8000592 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057e:	4a0f      	ldr	r2, [pc, #60]	; (80005bc <button_Scan+0xd4>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000586:	3301      	adds	r3, #1
 8000588:	b299      	uxth	r1, r3
 800058a:	4a0c      	ldr	r2, [pc, #48]	; (80005bc <button_Scan+0xd4>)
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000592:	897b      	ldrh	r3, [r7, #10]
 8000594:	085b      	lsrs	r3, r3, #1
 8000596:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3301      	adds	r3, #1
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0f      	cmp	r3, #15
 80005a2:	ddbc      	ble.n	800051e <button_Scan+0x36>
	  }
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020c00 	.word	0x40020c00
 80005b4:	20000050 	.word	0x20000050
 80005b8:	200001b0 	.word	0x200001b0
 80005bc:	200000a0 	.word	0x200000a0

080005c0 <ds3231_Write>:
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
		while(1);
	};
}

void ds3231_Write(uint8_t address, uint8_t value){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af04      	add	r7, sp, #16
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f93c 	bl	8002850 <DEC2BCD>
 80005d8:	4603      	mov	r3, r0
 80005da:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	230a      	movs	r3, #10
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	f107 030f 	add.w	r3, r7, #15
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2301      	movs	r3, #1
 80005f0:	21d0      	movs	r1, #208	; 0xd0
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <ds3231_Write+0x40>)
 80005f4:	f002 fec8 	bl	8003388 <HAL_I2C_Mem_Write>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000120 	.word	0x20000120

08000604 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800060a:	230a      	movs	r3, #10
 800060c:	9302      	str	r3, [sp, #8]
 800060e:	2307      	movs	r3, #7
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2301      	movs	r3, #1
 8000618:	2200      	movs	r2, #0
 800061a:	21d0      	movs	r1, #208	; 0xd0
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <ds3231_ReadTime+0xa8>)
 800061e:	f002 ffad 	bl	800357c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f8f8 	bl	800281c <BCD2DEC>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <ds3231_ReadTime+0xac>)
 8000632:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000636:	785b      	ldrb	r3, [r3, #1]
 8000638:	4618      	mov	r0, r3
 800063a:	f002 f8ef 	bl	800281c <BCD2DEC>
 800063e:	4603      	mov	r3, r0
 8000640:	461a      	mov	r2, r3
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <ds3231_ReadTime+0xb0>)
 8000644:	701a      	strb	r2, [r3, #0]
	ds3231_hour = BCD2DEC(ds3231_buffer[2]);
 8000646:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000648:	789b      	ldrb	r3, [r3, #2]
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f8e6 	bl	800281c <BCD2DEC>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <ds3231_ReadTime+0xb4>)
 8000656:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800065a:	78db      	ldrb	r3, [r3, #3]
 800065c:	4618      	mov	r0, r3
 800065e:	f002 f8dd 	bl	800281c <BCD2DEC>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <ds3231_ReadTime+0xb8>)
 8000668:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f8d4 	bl	800281c <BCD2DEC>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <ds3231_ReadTime+0xbc>)
 800067a:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <ds3231_ReadTime+0xa4>)
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	4618      	mov	r0, r3
 8000682:	f002 f8cb 	bl	800281c <BCD2DEC>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <ds3231_ReadTime+0xc0>)
 800068c:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <ds3231_ReadTime+0xa4>)
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f8c2 	bl	800281c <BCD2DEC>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <ds3231_ReadTime+0xc4>)
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000c8 	.word	0x200000c8
 80006ac:	20000120 	.word	0x20000120
 80006b0:	200000c0 	.word	0x200000c0
 80006b4:	200000c3 	.word	0x200000c3
 80006b8:	200000c2 	.word	0x200000c2
 80006bc:	200000c5 	.word	0x200000c5
 80006c0:	200000c4 	.word	0x200000c4
 80006c4:	200000c6 	.word	0x200000c6
 80006c8:	200000c1 	.word	0x200000c1

080006cc <initializeTime>:
 */

#include "global.h"

void initializeTime()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 80006d0:	2118      	movs	r1, #24
 80006d2:	2006      	movs	r0, #6
 80006d4:	f7ff ff74 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 80006d8:	210b      	movs	r1, #11
 80006da:	2005      	movs	r0, #5
 80006dc:	f7ff ff70 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 15);
 80006e0:	210f      	movs	r1, #15
 80006e2:	2004      	movs	r0, #4
 80006e4:	f7ff ff6c 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 80006e8:	2106      	movs	r1, #6
 80006ea:	2003      	movs	r0, #3
 80006ec:	f7ff ff68 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 15);
 80006f0:	210f      	movs	r1, #15
 80006f2:	2002      	movs	r0, #2
 80006f4:	f7ff ff64 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 15);
 80006f8:	210f      	movs	r1, #15
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ff60 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 15);
 8000700:	210f      	movs	r1, #15
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff ff5c 	bl	80005c0 <ds3231_Write>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <updateTime>:

void updateTime(int new_year, int new_month, int new_date, int new_day, int new_hour, int new_min, int new_sec)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
 8000718:	603b      	str	r3, [r7, #0]
	ds3231_Write(ADDRESS_YEAR, new_year);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	2006      	movs	r0, #6
 8000722:	f7ff ff4d 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, new_month);
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4619      	mov	r1, r3
 800072c:	2005      	movs	r0, #5
 800072e:	f7ff ff47 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, new_date);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4619      	mov	r1, r3
 8000738:	2004      	movs	r0, #4
 800073a:	f7ff ff41 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, new_day);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4619      	mov	r1, r3
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff ff3b 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, new_hour);
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	b2db      	uxtb	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	2002      	movs	r0, #2
 8000752:	f7ff ff35 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, new_min);
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4619      	mov	r1, r3
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ff2f 	bl	80005c0 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, new_sec);
 8000762:	6a3b      	ldr	r3, [r7, #32]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4619      	mov	r1, r3
 8000768:	2000      	movs	r0, #0
 800076a:	f7ff ff29 	bl	80005c0 <ds3231_Write>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <updateAlarmTime>:

void updateAlarmTime(int new_year, int new_month, int new_date, int new_day, int new_hour, int new_min, int new_sec)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
    year_alarm = new_year;
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <updateAlarmTime+0x44>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6013      	str	r3, [r2, #0]
    month_alarm = new_month;
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <updateAlarmTime+0x48>)
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	6013      	str	r3, [r2, #0]
    date_alarm = new_date;
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <updateAlarmTime+0x4c>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6013      	str	r3, [r2, #0]
    day_alarm = new_day;
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <updateAlarmTime+0x50>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	6013      	str	r3, [r2, #0]
    hour_alarm = new_hour;
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <updateAlarmTime+0x54>)
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	6013      	str	r3, [r2, #0]
    min_alarm = new_min;
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <updateAlarmTime+0x58>)
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	6013      	str	r3, [r2, #0]
    sec_alarm = new_sec;
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <updateAlarmTime+0x5c>)
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004
 80007c4:	20000008 	.word	0x20000008
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	20000014 	.word	0x20000014
 80007d4:	20000018 	.word	0x20000018

080007d8 <displayTime>:
void displayTime()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af04      	add	r7, sp, #16
    int blinkColor1, blinkColor2;
    if(timer1 % 10 == 0)
 80007de:	4b9c      	ldr	r3, [pc, #624]	; (8000a50 <displayTime+0x278>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	4b9c      	ldr	r3, [pc, #624]	; (8000a54 <displayTime+0x27c>)
 80007e4:	fb83 2301 	smull	r2, r3, r3, r1
 80007e8:	109a      	asrs	r2, r3, #2
 80007ea:	17cb      	asrs	r3, r1, #31
 80007ec:	1ad2      	subs	r2, r2, r3
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	1aca      	subs	r2, r1, r3
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8125 	bne.w	8000a48 <displayTime+0x270>
    {
    	if ((mode == SettingMode || mode == AlarmSettingMode))
 80007fe:	4b96      	ldr	r3, [pc, #600]	; (8000a58 <displayTime+0x280>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d004      	beq.n	8000810 <displayTime+0x38>
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <displayTime+0x280>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b03      	cmp	r3, #3
 800080c:	f040 80b3 	bne.w	8000976 <displayTime+0x19e>
    	{
    		blinkstate ^= 1;
 8000810:	4b92      	ldr	r3, [pc, #584]	; (8000a5c <displayTime+0x284>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f083 0301 	eor.w	r3, r3, #1
 8000818:	4a90      	ldr	r2, [pc, #576]	; (8000a5c <displayTime+0x284>)
 800081a:	6013      	str	r3, [r2, #0]
    		blinkColor1 = (blinkstate == 1) ? GREEN : BLACK;
 800081c:	4b8f      	ldr	r3, [pc, #572]	; (8000a5c <displayTime+0x284>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d102      	bne.n	800082a <displayTime+0x52>
 8000824:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000828:	e000      	b.n	800082c <displayTime+0x54>
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
    		blinkColor2 = (blinkstate == 1) ? YELLOW : BLACK;
 800082e:	4b8b      	ldr	r3, [pc, #556]	; (8000a5c <displayTime+0x284>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d102      	bne.n	800083c <displayTime+0x64>
 8000836:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800083a:	e000      	b.n	800083e <displayTime+0x66>
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]

    		lcd_ShowIntNum(70, 130, hour_temp, 2, (current_parameter == 2) ? blinkColor1 : GREEN, BLACK, 24);
 8000840:	4b87      	ldr	r3, [pc, #540]	; (8000a60 <displayTime+0x288>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b87      	ldr	r3, [pc, #540]	; (8000a64 <displayTime+0x28c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d102      	bne.n	8000854 <displayTime+0x7c>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	b29b      	uxth	r3, r3
 8000852:	e001      	b.n	8000858 <displayTime+0x80>
 8000854:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000858:	2118      	movs	r1, #24
 800085a:	9102      	str	r1, [sp, #8]
 800085c:	2100      	movs	r1, #0
 800085e:	9101      	str	r1, [sp, #4]
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	2302      	movs	r3, #2
 8000864:	2182      	movs	r1, #130	; 0x82
 8000866:	2046      	movs	r0, #70	; 0x46
 8000868:	f001 f942 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 130, min_temp, 2, (current_parameter == 1) ? blinkColor1 : GREEN, BLACK, 24);
 800086c:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <displayTime+0x290>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b29a      	uxth	r2, r3
 8000872:	4b7c      	ldr	r3, [pc, #496]	; (8000a64 <displayTime+0x28c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d102      	bne.n	8000880 <displayTime+0xa8>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	b29b      	uxth	r3, r3
 800087e:	e001      	b.n	8000884 <displayTime+0xac>
 8000880:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000884:	2118      	movs	r1, #24
 8000886:	9102      	str	r1, [sp, #8]
 8000888:	2100      	movs	r1, #0
 800088a:	9101      	str	r1, [sp, #4]
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2302      	movs	r3, #2
 8000890:	2182      	movs	r1, #130	; 0x82
 8000892:	206e      	movs	r0, #110	; 0x6e
 8000894:	f001 f92c 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 130, sec_temp, 2, (current_parameter == 0) ? blinkColor1 : GREEN, BLACK, 24);
 8000898:	4b74      	ldr	r3, [pc, #464]	; (8000a6c <displayTime+0x294>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b71      	ldr	r3, [pc, #452]	; (8000a64 <displayTime+0x28c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d102      	bne.n	80008ac <displayTime+0xd4>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	e001      	b.n	80008b0 <displayTime+0xd8>
 80008ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008b0:	2118      	movs	r1, #24
 80008b2:	9102      	str	r1, [sp, #8]
 80008b4:	2100      	movs	r1, #0
 80008b6:	9101      	str	r1, [sp, #4]
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2302      	movs	r3, #2
 80008bc:	2182      	movs	r1, #130	; 0x82
 80008be:	2096      	movs	r0, #150	; 0x96
 80008c0:	f001 f916 	bl	8001af0 <lcd_ShowIntNum>

    		lcd_ShowIntNum(20, 100, day_temp, 2, (current_parameter == 3) ? blinkColor2 : YELLOW, BLACK, 24);
 80008c4:	4b6a      	ldr	r3, [pc, #424]	; (8000a70 <displayTime+0x298>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	4b66      	ldr	r3, [pc, #408]	; (8000a64 <displayTime+0x28c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d102      	bne.n	80008d8 <displayTime+0x100>
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	e001      	b.n	80008dc <displayTime+0x104>
 80008d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80008dc:	2118      	movs	r1, #24
 80008de:	9102      	str	r1, [sp, #8]
 80008e0:	2100      	movs	r1, #0
 80008e2:	9101      	str	r1, [sp, #4]
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2302      	movs	r3, #2
 80008e8:	2164      	movs	r1, #100	; 0x64
 80008ea:	2014      	movs	r0, #20
 80008ec:	f001 f900 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, date_temp, 2, (current_parameter == 4) ? blinkColor2 : YELLOW, BLACK, 24);
 80008f0:	4b60      	ldr	r3, [pc, #384]	; (8000a74 <displayTime+0x29c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	4b5b      	ldr	r3, [pc, #364]	; (8000a64 <displayTime+0x28c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b04      	cmp	r3, #4
 80008fc:	d102      	bne.n	8000904 <displayTime+0x12c>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b29b      	uxth	r3, r3
 8000902:	e001      	b.n	8000908 <displayTime+0x130>
 8000904:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000908:	2118      	movs	r1, #24
 800090a:	9102      	str	r1, [sp, #8]
 800090c:	2100      	movs	r1, #0
 800090e:	9101      	str	r1, [sp, #4]
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2302      	movs	r3, #2
 8000914:	2164      	movs	r1, #100	; 0x64
 8000916:	2046      	movs	r0, #70	; 0x46
 8000918:	f001 f8ea 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 100, month_temp, 2, (current_parameter == 5) ? blinkColor2 : YELLOW, BLACK, 24);
 800091c:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <displayTime+0x2a0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b50      	ldr	r3, [pc, #320]	; (8000a64 <displayTime+0x28c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b05      	cmp	r3, #5
 8000928:	d102      	bne.n	8000930 <displayTime+0x158>
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b29b      	uxth	r3, r3
 800092e:	e001      	b.n	8000934 <displayTime+0x15c>
 8000930:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000934:	2118      	movs	r1, #24
 8000936:	9102      	str	r1, [sp, #8]
 8000938:	2100      	movs	r1, #0
 800093a:	9101      	str	r1, [sp, #4]
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2302      	movs	r3, #2
 8000940:	2164      	movs	r1, #100	; 0x64
 8000942:	206e      	movs	r0, #110	; 0x6e
 8000944:	f001 f8d4 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 100, year_temp, 2, (current_parameter == 6) ? blinkColor2 : YELLOW, BLACK, 24);
 8000948:	4b4c      	ldr	r3, [pc, #304]	; (8000a7c <displayTime+0x2a4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <displayTime+0x28c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b06      	cmp	r3, #6
 8000954:	d102      	bne.n	800095c <displayTime+0x184>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	e001      	b.n	8000960 <displayTime+0x188>
 800095c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000960:	2118      	movs	r1, #24
 8000962:	9102      	str	r1, [sp, #8]
 8000964:	2100      	movs	r1, #0
 8000966:	9101      	str	r1, [sp, #4]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2302      	movs	r3, #2
 800096c:	2164      	movs	r1, #100	; 0x64
 800096e:	2096      	movs	r0, #150	; 0x96
 8000970:	f001 f8be 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, ds3231_date, 2, YELLOW, BLACK, 24);
    		lcd_ShowIntNum(110, 100, ds3231_month, 2, YELLOW, BLACK, 24);
    		lcd_ShowIntNum(150, 100, ds3231_year, 2, YELLOW, BLACK, 24);
    	}
    }
}
 8000974:	e068      	b.n	8000a48 <displayTime+0x270>
    		lcd_ShowIntNum(70, 130, ds3231_hour, 2, GREEN, BLACK, 24);
 8000976:	4b42      	ldr	r3, [pc, #264]	; (8000a80 <displayTime+0x2a8>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b29a      	uxth	r2, r3
 800097c:	2318      	movs	r3, #24
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2300      	movs	r3, #0
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	2302      	movs	r3, #2
 800098c:	2182      	movs	r1, #130	; 0x82
 800098e:	2046      	movs	r0, #70	; 0x46
 8000990:	f001 f8ae 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 130, ds3231_min, 2, GREEN, BLACK, 24);
 8000994:	4b3b      	ldr	r3, [pc, #236]	; (8000a84 <displayTime+0x2ac>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2318      	movs	r3, #24
 800099c:	9302      	str	r3, [sp, #8]
 800099e:	2300      	movs	r3, #0
 80009a0:	9301      	str	r3, [sp, #4]
 80009a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2302      	movs	r3, #2
 80009aa:	2182      	movs	r1, #130	; 0x82
 80009ac:	206e      	movs	r0, #110	; 0x6e
 80009ae:	f001 f89f 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 130, ds3231_sec, 2, GREEN, BLACK, 24);
 80009b2:	4b35      	ldr	r3, [pc, #212]	; (8000a88 <displayTime+0x2b0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	2318      	movs	r3, #24
 80009ba:	9302      	str	r3, [sp, #8]
 80009bc:	2300      	movs	r3, #0
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2302      	movs	r3, #2
 80009c8:	2182      	movs	r1, #130	; 0x82
 80009ca:	2096      	movs	r0, #150	; 0x96
 80009cc:	f001 f890 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(20, 100, ds3231_day, 2, YELLOW, BLACK, 24);
 80009d0:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <displayTime+0x2b4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	2318      	movs	r3, #24
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	2300      	movs	r3, #0
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2302      	movs	r3, #2
 80009e6:	2164      	movs	r1, #100	; 0x64
 80009e8:	2014      	movs	r0, #20
 80009ea:	f001 f881 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(70, 100, ds3231_date, 2, YELLOW, BLACK, 24);
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <displayTime+0x2b8>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	2318      	movs	r3, #24
 80009f6:	9302      	str	r3, [sp, #8]
 80009f8:	2300      	movs	r3, #0
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2302      	movs	r3, #2
 8000a04:	2164      	movs	r1, #100	; 0x64
 8000a06:	2046      	movs	r0, #70	; 0x46
 8000a08:	f001 f872 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(110, 100, ds3231_month, 2, YELLOW, BLACK, 24);
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <displayTime+0x2bc>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	2318      	movs	r3, #24
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2300      	movs	r3, #0
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2302      	movs	r3, #2
 8000a22:	2164      	movs	r1, #100	; 0x64
 8000a24:	206e      	movs	r0, #110	; 0x6e
 8000a26:	f001 f863 	bl	8001af0 <lcd_ShowIntNum>
    		lcd_ShowIntNum(150, 100, ds3231_year, 2, YELLOW, BLACK, 24);
 8000a2a:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <displayTime+0x2c0>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	2318      	movs	r3, #24
 8000a32:	9302      	str	r3, [sp, #8]
 8000a34:	2300      	movs	r3, #0
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	2164      	movs	r1, #100	; 0x64
 8000a42:	2096      	movs	r0, #150	; 0x96
 8000a44:	f001 f854 	bl	8001af0 <lcd_ShowIntNum>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000005c 	.word	0x2000005c
 8000a54:	66666667 	.word	0x66666667
 8000a58:	20000058 	.word	0x20000058
 8000a5c:	20000088 	.word	0x20000088
 8000a60:	20000078 	.word	0x20000078
 8000a64:	20000084 	.word	0x20000084
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	20000080 	.word	0x20000080
 8000a70:	20000074 	.word	0x20000074
 8000a74:	20000070 	.word	0x20000070
 8000a78:	2000006c 	.word	0x2000006c
 8000a7c:	20000068 	.word	0x20000068
 8000a80:	200000c2 	.word	0x200000c2
 8000a84:	200000c3 	.word	0x200000c3
 8000a88:	200000c0 	.word	0x200000c0
 8000a8c:	200000c5 	.word	0x200000c5
 8000a90:	200000c4 	.word	0x200000c4
 8000a94:	200000c6 	.word	0x200000c6
 8000a98:	200000c1 	.word	0x200000c1

08000a9c <displayStatus>:

void displayStatus()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af04      	add	r7, sp, #16
    lcd_Fill(0, 0, 240, 20, BLUE);
 8000aa2:	231f      	movs	r3, #31
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2314      	movs	r3, #20
 8000aa8:	22f0      	movs	r2, #240	; 0xf0
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fee5 	bl	800187c <lcd_Fill>

    switch (mode)
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <displayStatus+0x88>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d022      	beq.n	8000b00 <displayStatus+0x64>
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	dc2e      	bgt.n	8000b1c <displayStatus+0x80>
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d002      	beq.n	8000ac8 <displayStatus+0x2c>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d00e      	beq.n	8000ae4 <displayStatus+0x48>
            break;
        case AlarmSettingMode:
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Alarm Setting", RED, BLUE, 16, 1);
            break;
        default:
            break;
 8000ac6:	e029      	b.n	8000b1c <displayStatus+0x80>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Normal", RED, BLUE, 16, 1);
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9302      	str	r3, [sp, #8]
 8000acc:	2310      	movs	r3, #16
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	231f      	movs	r3, #31
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ad8:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <displayStatus+0x8c>)
 8000ada:	2102      	movs	r1, #2
 8000adc:	2000      	movs	r0, #0
 8000ade:	f001 fa6d 	bl	8001fbc <lcd_StrCenter>
            break;
 8000ae2:	e01c      	b.n	8000b1e <displayStatus+0x82>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Time Setting", RED, BLUE, 16, 1);
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	9302      	str	r3, [sp, #8]
 8000ae8:	2310      	movs	r3, #16
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	231f      	movs	r3, #31
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <displayStatus+0x90>)
 8000af6:	2102      	movs	r1, #2
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 fa5f 	bl	8001fbc <lcd_StrCenter>
            break;
 8000afe:	e00e      	b.n	8000b1e <displayStatus+0x82>
            lcd_StrCenter(0, 2, (unsigned char *)"Mode: Alarm Setting", RED, BLUE, 16, 1);
 8000b00:	2301      	movs	r3, #1
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	2310      	movs	r3, #16
 8000b06:	9301      	str	r3, [sp, #4]
 8000b08:	231f      	movs	r3, #31
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <displayStatus+0x94>)
 8000b12:	2102      	movs	r1, #2
 8000b14:	2000      	movs	r0, #0
 8000b16:	f001 fa51 	bl	8001fbc <lcd_StrCenter>
            break;
 8000b1a:	e000      	b.n	8000b1e <displayStatus+0x82>
            break;
 8000b1c:	bf00      	nop
    }
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000058 	.word	0x20000058
 8000b28:	08006fe4 	.word	0x08006fe4
 8000b2c:	08006ff4 	.word	0x08006ff4
 8000b30:	08007008 	.word	0x08007008

08000b34 <checkAlarmTime>:

int checkAlarmTime()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	return (ds3231_hour == hour_alarm && (ds3231_min == min_alarm && ds3231_sec == sec_alarm)
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <checkAlarmTime+0xb0>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <checkAlarmTime+0xb4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
			|| (ds3231_sec >= sec_alarm && ds3231_min == min_alarm)
			|| (ds3231_sec <= sec_alarm && ds3231_min == min_alarm + 1)
			&& ds3231_year == year_alarm && ds3231_month == month_alarm && ds3231_date == date_alarm
			&& ds3231_day == day_alarm) ? 1 : 0;
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d10d      	bne.n	8000b62 <checkAlarmTime+0x2e>
	return (ds3231_hour == hour_alarm && (ds3231_min == min_alarm && ds3231_sec == sec_alarm)
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <checkAlarmTime+0xb8>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <checkAlarmTime+0xbc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d106      	bne.n	8000b62 <checkAlarmTime+0x2e>
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <checkAlarmTime+0xc0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <checkAlarmTime+0xc4>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d038      	beq.n	8000bd4 <checkAlarmTime+0xa0>
			|| (ds3231_sec >= sec_alarm && ds3231_min == min_alarm)
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <checkAlarmTime+0xc0>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <checkAlarmTime+0xc4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	db06      	blt.n	8000b7e <checkAlarmTime+0x4a>
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <checkAlarmTime+0xb8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <checkAlarmTime+0xbc>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d02a      	beq.n	8000bd4 <checkAlarmTime+0xa0>
			|| (ds3231_sec <= sec_alarm && ds3231_min == min_alarm + 1)
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <checkAlarmTime+0xc0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <checkAlarmTime+0xc4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
			&& ds3231_day == day_alarm) ? 1 : 0;
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dc25      	bgt.n	8000bd8 <checkAlarmTime+0xa4>
			|| (ds3231_sec <= sec_alarm && ds3231_min == min_alarm + 1)
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <checkAlarmTime+0xb8>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <checkAlarmTime+0xbc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d11d      	bne.n	8000bd8 <checkAlarmTime+0xa4>
			&& ds3231_year == year_alarm && ds3231_month == month_alarm && ds3231_date == date_alarm
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <checkAlarmTime+0xc8>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <checkAlarmTime+0xcc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d116      	bne.n	8000bd8 <checkAlarmTime+0xa4>
 8000baa:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <checkAlarmTime+0xd0>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <checkAlarmTime+0xd4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d10f      	bne.n	8000bd8 <checkAlarmTime+0xa4>
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <checkAlarmTime+0xd8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <checkAlarmTime+0xdc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d108      	bne.n	8000bd8 <checkAlarmTime+0xa4>
			&& ds3231_day == day_alarm) ? 1 : 0;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <checkAlarmTime+0xe0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <checkAlarmTime+0xe4>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d101      	bne.n	8000bd8 <checkAlarmTime+0xa4>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e000      	b.n	8000bda <checkAlarmTime+0xa6>
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	200000c2 	.word	0x200000c2
 8000be8:	20000010 	.word	0x20000010
 8000bec:	200000c3 	.word	0x200000c3
 8000bf0:	20000014 	.word	0x20000014
 8000bf4:	200000c0 	.word	0x200000c0
 8000bf8:	20000018 	.word	0x20000018
 8000bfc:	200000c1 	.word	0x200000c1
 8000c00:	20000000 	.word	0x20000000
 8000c04:	200000c6 	.word	0x200000c6
 8000c08:	20000004 	.word	0x20000004
 8000c0c:	200000c4 	.word	0x200000c4
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200000c5 	.word	0x200000c5
 8000c18:	2000000c 	.word	0x2000000c

08000c1c <warnAlarmTime>:

void warnAlarmTime(){lcd_ShowStr(70, 160, (unsigned char *)"ALARM!", WHITE, RED, 16, 0);}
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af04      	add	r7, sp, #16
 8000c22:	2300      	movs	r3, #0
 8000c24:	9302      	str	r3, [sp, #8]
 8000c26:	2310      	movs	r3, #16
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <warnAlarmTime+0x28>)
 8000c36:	21a0      	movs	r1, #160	; 0xa0
 8000c38:	2046      	movs	r0, #70	; 0x46
 8000c3a:	f001 f95b 	bl	8001ef4 <lcd_ShowStr>
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800701c 	.word	0x0800701c

08000c48 <increment>:

void increment()
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
	if(alarm_on == 0)
 8000c4c:	4b93      	ldr	r3, [pc, #588]	; (8000e9c <increment+0x254>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f040 808f 	bne.w	8000d74 <increment+0x12c>
	{
		switch (current_parameter)
 8000c56:	4b92      	ldr	r3, [pc, #584]	; (8000ea0 <increment+0x258>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	f200 8118 	bhi.w	8000e90 <increment+0x248>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <increment+0x20>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c85 	.word	0x08000c85
 8000c6c:	08000ca9 	.word	0x08000ca9
 8000c70:	08000ccd 	.word	0x08000ccd
 8000c74:	08000cef 	.word	0x08000cef
 8000c78:	08000d11 	.word	0x08000d11
 8000c7c:	08000d33 	.word	0x08000d33
 8000c80:	08000d55 	.word	0x08000d55
		{
		case 0: sec_temp = (sec_temp + 1) % 60; 		break;
 8000c84:	4b87      	ldr	r3, [pc, #540]	; (8000ea4 <increment+0x25c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	4b87      	ldr	r3, [pc, #540]	; (8000ea8 <increment+0x260>)
 8000c8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c90:	4413      	add	r3, r2
 8000c92:	1159      	asrs	r1, r3, #5
 8000c94:	17d3      	asrs	r3, r2, #31
 8000c96:	1ac9      	subs	r1, r1, r3
 8000c98:	460b      	mov	r3, r1
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	1ad1      	subs	r1, r2, r3
 8000ca2:	4b80      	ldr	r3, [pc, #512]	; (8000ea4 <increment+0x25c>)
 8000ca4:	6019      	str	r1, [r3, #0]
 8000ca6:	e0f3      	b.n	8000e90 <increment+0x248>
		case 1: min_temp = (min_temp + 1) % 60; 		break;
 8000ca8:	4b80      	ldr	r3, [pc, #512]	; (8000eac <increment+0x264>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1c5a      	adds	r2, r3, #1
 8000cae:	4b7e      	ldr	r3, [pc, #504]	; (8000ea8 <increment+0x260>)
 8000cb0:	fb83 1302 	smull	r1, r3, r3, r2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	1159      	asrs	r1, r3, #5
 8000cb8:	17d3      	asrs	r3, r2, #31
 8000cba:	1ac9      	subs	r1, r1, r3
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	1ad1      	subs	r1, r2, r3
 8000cc6:	4b79      	ldr	r3, [pc, #484]	; (8000eac <increment+0x264>)
 8000cc8:	6019      	str	r1, [r3, #0]
 8000cca:	e0e1      	b.n	8000e90 <increment+0x248>
		case 2: hour_temp = (hour_temp + 1) % 24; 		break;
 8000ccc:	4b78      	ldr	r3, [pc, #480]	; (8000eb0 <increment+0x268>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1c59      	adds	r1, r3, #1
 8000cd2:	4b78      	ldr	r3, [pc, #480]	; (8000eb4 <increment+0x26c>)
 8000cd4:	fb83 2301 	smull	r2, r3, r3, r1
 8000cd8:	109a      	asrs	r2, r3, #2
 8000cda:	17cb      	asrs	r3, r1, #31
 8000cdc:	1ad2      	subs	r2, r2, r3
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	1aca      	subs	r2, r1, r3
 8000ce8:	4b71      	ldr	r3, [pc, #452]	; (8000eb0 <increment+0x268>)
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e0d0      	b.n	8000e90 <increment+0x248>
		case 3: day_temp = (day_temp % 7) + 1; 			break;
 8000cee:	4b72      	ldr	r3, [pc, #456]	; (8000eb8 <increment+0x270>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b72      	ldr	r3, [pc, #456]	; (8000ebc <increment+0x274>)
 8000cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	1099      	asrs	r1, r3, #2
 8000cfc:	17d3      	asrs	r3, r2, #31
 8000cfe:	1ac9      	subs	r1, r1, r3
 8000d00:	460b      	mov	r3, r1
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	1ad1      	subs	r1, r2, r3
 8000d08:	1c4b      	adds	r3, r1, #1
 8000d0a:	4a6b      	ldr	r2, [pc, #428]	; (8000eb8 <increment+0x270>)
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e0bf      	b.n	8000e90 <increment+0x248>
		case 4: date_temp = (date_temp % 31) + 1; 		break;
 8000d10:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <increment+0x278>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b6b      	ldr	r3, [pc, #428]	; (8000ec4 <increment+0x27c>)
 8000d16:	fb83 1302 	smull	r1, r3, r3, r2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	1119      	asrs	r1, r3, #4
 8000d1e:	17d3      	asrs	r3, r2, #31
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	460b      	mov	r3, r1
 8000d24:	015b      	lsls	r3, r3, #5
 8000d26:	1a5b      	subs	r3, r3, r1
 8000d28:	1ad1      	subs	r1, r2, r3
 8000d2a:	1c4b      	adds	r3, r1, #1
 8000d2c:	4a64      	ldr	r2, [pc, #400]	; (8000ec0 <increment+0x278>)
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	e0ae      	b.n	8000e90 <increment+0x248>
		case 5: month_temp = (month_temp % 12) + 1; 	break;
 8000d32:	4b65      	ldr	r3, [pc, #404]	; (8000ec8 <increment+0x280>)
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	4b5f      	ldr	r3, [pc, #380]	; (8000eb4 <increment+0x26c>)
 8000d38:	fb83 2301 	smull	r2, r3, r3, r1
 8000d3c:	105a      	asrs	r2, r3, #1
 8000d3e:	17cb      	asrs	r3, r1, #31
 8000d40:	1ad2      	subs	r2, r2, r3
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	1aca      	subs	r2, r1, r3
 8000d4c:	1c53      	adds	r3, r2, #1
 8000d4e:	4a5e      	ldr	r2, [pc, #376]	; (8000ec8 <increment+0x280>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e09d      	b.n	8000e90 <increment+0x248>
		case 6: year_temp = (year_temp % 100) + 1; 		break;
 8000d54:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <increment+0x284>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b5d      	ldr	r3, [pc, #372]	; (8000ed0 <increment+0x288>)
 8000d5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d5e:	1159      	asrs	r1, r3, #5
 8000d60:	17d3      	asrs	r3, r2, #31
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	2164      	movs	r1, #100	; 0x64
 8000d66:	fb01 f303 	mul.w	r3, r1, r3
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <increment+0x284>)
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e08d      	b.n	8000e90 <increment+0x248>
		}
	}
	else
	{
		switch (current_parameter)
 8000d74:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <increment+0x258>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	f200 8089 	bhi.w	8000e90 <increment+0x248>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <increment+0x13c>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000da1 	.word	0x08000da1
 8000d88:	08000dc5 	.word	0x08000dc5
 8000d8c:	08000de9 	.word	0x08000de9
 8000d90:	08000e0b 	.word	0x08000e0b
 8000d94:	08000e2d 	.word	0x08000e2d
 8000d98:	08000e4f 	.word	0x08000e4f
 8000d9c:	08000e71 	.word	0x08000e71
		{
		case 0: sec_alarm = (sec_alarm + 1) % 60; 		break;
 8000da0:	4b4c      	ldr	r3, [pc, #304]	; (8000ed4 <increment+0x28c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <increment+0x260>)
 8000da8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dac:	4413      	add	r3, r2
 8000dae:	1159      	asrs	r1, r3, #5
 8000db0:	17d3      	asrs	r3, r2, #31
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	460b      	mov	r3, r1
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	1ad1      	subs	r1, r2, r3
 8000dbe:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <increment+0x28c>)
 8000dc0:	6019      	str	r1, [r3, #0]
 8000dc2:	e065      	b.n	8000e90 <increment+0x248>
		case 1: min_alarm = (min_alarm + 1) % 60; 		break;
 8000dc4:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <increment+0x290>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	4b37      	ldr	r3, [pc, #220]	; (8000ea8 <increment+0x260>)
 8000dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	1159      	asrs	r1, r3, #5
 8000dd4:	17d3      	asrs	r3, r2, #31
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	460b      	mov	r3, r1
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	1ad1      	subs	r1, r2, r3
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <increment+0x290>)
 8000de4:	6019      	str	r1, [r3, #0]
 8000de6:	e053      	b.n	8000e90 <increment+0x248>
		case 2: hour_alarm = (hour_alarm + 1) % 24; 	break;
 8000de8:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <increment+0x294>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	1c59      	adds	r1, r3, #1
 8000dee:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <increment+0x26c>)
 8000df0:	fb83 2301 	smull	r2, r3, r3, r1
 8000df4:	109a      	asrs	r2, r3, #2
 8000df6:	17cb      	asrs	r3, r1, #31
 8000df8:	1ad2      	subs	r2, r2, r3
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	1aca      	subs	r2, r1, r3
 8000e04:	4b35      	ldr	r3, [pc, #212]	; (8000edc <increment+0x294>)
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e042      	b.n	8000e90 <increment+0x248>
		case 3: day_alarm = (day_alarm % 7) + 1; 		break;
 8000e0a:	4b35      	ldr	r3, [pc, #212]	; (8000ee0 <increment+0x298>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <increment+0x274>)
 8000e10:	fb83 1302 	smull	r1, r3, r3, r2
 8000e14:	4413      	add	r3, r2
 8000e16:	1099      	asrs	r1, r3, #2
 8000e18:	17d3      	asrs	r3, r2, #31
 8000e1a:	1ac9      	subs	r1, r1, r3
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	1ad1      	subs	r1, r2, r3
 8000e24:	1c4b      	adds	r3, r1, #1
 8000e26:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <increment+0x298>)
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e031      	b.n	8000e90 <increment+0x248>
		case 4: date_alarm = (date_alarm % 31) + 1; 	break;
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <increment+0x29c>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <increment+0x27c>)
 8000e32:	fb83 1302 	smull	r1, r3, r3, r2
 8000e36:	4413      	add	r3, r2
 8000e38:	1119      	asrs	r1, r3, #4
 8000e3a:	17d3      	asrs	r3, r2, #31
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	015b      	lsls	r3, r3, #5
 8000e42:	1a5b      	subs	r3, r3, r1
 8000e44:	1ad1      	subs	r1, r2, r3
 8000e46:	1c4b      	adds	r3, r1, #1
 8000e48:	4a26      	ldr	r2, [pc, #152]	; (8000ee4 <increment+0x29c>)
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	e020      	b.n	8000e90 <increment+0x248>
		case 5: month_alarm = (month_alarm % 12) + 1; 	break;
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <increment+0x2a0>)
 8000e50:	6819      	ldr	r1, [r3, #0]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <increment+0x26c>)
 8000e54:	fb83 2301 	smull	r2, r3, r3, r1
 8000e58:	105a      	asrs	r2, r3, #1
 8000e5a:	17cb      	asrs	r3, r1, #31
 8000e5c:	1ad2      	subs	r2, r2, r3
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	1aca      	subs	r2, r1, r3
 8000e68:	1c53      	adds	r3, r2, #1
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <increment+0x2a0>)
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e00f      	b.n	8000e90 <increment+0x248>
		case 6: year_alarm = (year_alarm % 100) + 1; 	break;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <increment+0x2a4>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <increment+0x288>)
 8000e76:	fb83 1302 	smull	r1, r3, r3, r2
 8000e7a:	1159      	asrs	r1, r3, #5
 8000e7c:	17d3      	asrs	r3, r2, #31
 8000e7e:	1acb      	subs	r3, r1, r3
 8000e80:	2164      	movs	r1, #100	; 0x64
 8000e82:	fb01 f303 	mul.w	r3, r1, r3
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	3301      	adds	r3, #1
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <increment+0x2a4>)
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	bf00      	nop
		}
	}
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000001c 	.word	0x2000001c
 8000ea0:	20000084 	.word	0x20000084
 8000ea4:	20000080 	.word	0x20000080
 8000ea8:	88888889 	.word	0x88888889
 8000eac:	2000007c 	.word	0x2000007c
 8000eb0:	20000078 	.word	0x20000078
 8000eb4:	2aaaaaab 	.word	0x2aaaaaab
 8000eb8:	20000074 	.word	0x20000074
 8000ebc:	92492493 	.word	0x92492493
 8000ec0:	20000070 	.word	0x20000070
 8000ec4:	84210843 	.word	0x84210843
 8000ec8:	2000006c 	.word	0x2000006c
 8000ecc:	20000068 	.word	0x20000068
 8000ed0:	51eb851f 	.word	0x51eb851f
 8000ed4:	20000018 	.word	0x20000018
 8000ed8:	20000014 	.word	0x20000014
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	20000000 	.word	0x20000000

08000ef0 <incrementParameter>:

void incrementParameter()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	if(timer2 == 0 && is_pressed == 0)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <incrementParameter+0x60>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d105      	bne.n	8000f08 <incrementParameter+0x18>
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <incrementParameter+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <incrementParameter+0x18>
		increment();
 8000f04:	f7ff fea0 	bl	8000c48 <increment>
	if(is_pressed == 0)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <incrementParameter+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d111      	bne.n	8000f34 <incrementParameter+0x44>
	{
		timer2++;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <incrementParameter+0x60>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <incrementParameter+0x60>)
 8000f18:	6013      	str	r3, [r2, #0]
		if(timer2 >= 40)
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <incrementParameter+0x60>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b27      	cmp	r3, #39	; 0x27
 8000f20:	dd08      	ble.n	8000f34 <incrementParameter+0x44>
		{
			timer1 = 0;
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <incrementParameter+0x68>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			timer2 = 0;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <incrementParameter+0x60>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
			is_pressed = 1;
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <incrementParameter+0x64>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
		}
	}
	if(is_pressed == 1)
 8000f34:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <incrementParameter+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d107      	bne.n	8000f4c <incrementParameter+0x5c>
	{
		if((timer1 % 4) == 0)
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <incrementParameter+0x68>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <incrementParameter+0x5c>
			increment();
 8000f48:	f7ff fe7e 	bl	8000c48 <increment>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000060 	.word	0x20000060
 8000f54:	20000064 	.word	0x20000064
 8000f58:	2000005c 	.word	0x2000005c

08000f5c <fsm_mode>:

void fsm_mode()
{
 8000f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af04      	add	r7, sp, #16
	ds3231_ReadTime();
 8000f62:	f7ff fb4f 	bl	8000604 <ds3231_ReadTime>
	if(checkAlarmTime() && alarm_on == 1)
 8000f66:	f7ff fde5 	bl	8000b34 <checkAlarmTime>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <fsm_mode+0x22>
 8000f70:	4b75      	ldr	r3, [pc, #468]	; (8001148 <fsm_mode+0x1ec>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <fsm_mode+0x22>
		warnAlarmTime();
 8000f78:	f7ff fe50 	bl	8000c1c <warnAlarmTime>
 8000f7c:	e00b      	b.n	8000f96 <fsm_mode+0x3a>
	else
		lcd_ShowStr(70, 160, (unsigned char *)"      ", BLACK, BLACK, 16, 0);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	2310      	movs	r3, #16
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	2300      	movs	r3, #0
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	4a6f      	ldr	r2, [pc, #444]	; (800114c <fsm_mode+0x1f0>)
 8000f8e:	21a0      	movs	r1, #160	; 0xa0
 8000f90:	2046      	movs	r0, #70	; 0x46
 8000f92:	f000 ffaf 	bl	8001ef4 <lcd_ShowStr>

    switch (mode)
 8000f96:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <fsm_mode+0x1f4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	f200 8159 	bhi.w	8001252 <fsm_mode+0x2f6>
 8000fa0:	a201      	add	r2, pc, #4	; (adr r2, 8000fa8 <fsm_mode+0x4c>)
 8000fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa6:	bf00      	nop
 8000fa8:	08000fb9 	.word	0x08000fb9
 8000fac:	08000fc9 	.word	0x08000fc9
 8000fb0:	08001033 	.word	0x08001033
 8000fb4:	08001135 	.word	0x08001135
    {
        case ModeInit:
            initializeTime();
 8000fb8:	f7ff fb88 	bl	80006cc <initializeTime>
            ds3231_ReadTime();
 8000fbc:	f7ff fb22 	bl	8000604 <ds3231_ReadTime>
            mode = NormalMode;
 8000fc0:	4b63      	ldr	r3, [pc, #396]	; (8001150 <fsm_mode+0x1f4>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
            break;
 8000fc6:	e145      	b.n	8001254 <fsm_mode+0x2f8>

        case NormalMode:
        	displayStatus();
 8000fc8:	f7ff fd68 	bl	8000a9c <displayStatus>
            if(button_count[0] >= 3)
 8000fcc:	4b61      	ldr	r3, [pc, #388]	; (8001154 <fsm_mode+0x1f8>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d92b      	bls.n	800102c <fsm_mode+0xd0>
            {
                timer1 = 0;
 8000fd4:	4b60      	ldr	r3, [pc, #384]	; (8001158 <fsm_mode+0x1fc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
                current_parameter = 0;
 8000fda:	4b60      	ldr	r3, [pc, #384]	; (800115c <fsm_mode+0x200>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
                hour_temp = ds3231_hour;
 8000fe0:	4b5f      	ldr	r3, [pc, #380]	; (8001160 <fsm_mode+0x204>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <fsm_mode+0x208>)
 8000fe8:	601a      	str	r2, [r3, #0]
                min_temp = ds3231_min;
 8000fea:	4b5f      	ldr	r3, [pc, #380]	; (8001168 <fsm_mode+0x20c>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b5e      	ldr	r3, [pc, #376]	; (800116c <fsm_mode+0x210>)
 8000ff2:	601a      	str	r2, [r3, #0]
                sec_temp = ds3231_sec;
 8000ff4:	4b5e      	ldr	r3, [pc, #376]	; (8001170 <fsm_mode+0x214>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b5e      	ldr	r3, [pc, #376]	; (8001174 <fsm_mode+0x218>)
 8000ffc:	601a      	str	r2, [r3, #0]
                day_temp = ds3231_day;
 8000ffe:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <fsm_mode+0x21c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	4b5d      	ldr	r3, [pc, #372]	; (800117c <fsm_mode+0x220>)
 8001006:	601a      	str	r2, [r3, #0]
                date_temp = ds3231_date;
 8001008:	4b5d      	ldr	r3, [pc, #372]	; (8001180 <fsm_mode+0x224>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b5d      	ldr	r3, [pc, #372]	; (8001184 <fsm_mode+0x228>)
 8001010:	601a      	str	r2, [r3, #0]
                month_temp = ds3231_month;
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <fsm_mode+0x22c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b5c      	ldr	r3, [pc, #368]	; (800118c <fsm_mode+0x230>)
 800101a:	601a      	str	r2, [r3, #0]
                year_temp = ds3231_year;
 800101c:	4b5c      	ldr	r3, [pc, #368]	; (8001190 <fsm_mode+0x234>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b5c      	ldr	r3, [pc, #368]	; (8001194 <fsm_mode+0x238>)
 8001024:	601a      	str	r2, [r3, #0]
                mode = SettingMode;
 8001026:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <fsm_mode+0x1f4>)
 8001028:	2202      	movs	r2, #2
 800102a:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 800102c:	f7ff fbd4 	bl	80007d8 <displayTime>
            break;
 8001030:	e110      	b.n	8001254 <fsm_mode+0x2f8>

        case SettingMode:
        	displayStatus();
 8001032:	f7ff fd33 	bl	8000a9c <displayStatus>
            if(button_count[4] >= 5)
 8001036:	4b47      	ldr	r3, [pc, #284]	; (8001154 <fsm_mode+0x1f8>)
 8001038:	891b      	ldrh	r3, [r3, #8]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d902      	bls.n	8001044 <fsm_mode+0xe8>
            	incrementParameter();
 800103e:	f7ff ff57 	bl	8000ef0 <incrementParameter>
 8001042:	e002      	b.n	800104a <fsm_mode+0xee>
            else
            	timer2 = 0;
 8001044:	4b54      	ldr	r3, [pc, #336]	; (8001198 <fsm_mode+0x23c>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

            if(button_count[12] >= 3)
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <fsm_mode+0x1f8>)
 800104c:	8b1b      	ldrh	r3, [r3, #24]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d93d      	bls.n	80010ce <fsm_mode+0x172>
            {
                current_parameter++;
 8001052:	4b42      	ldr	r3, [pc, #264]	; (800115c <fsm_mode+0x200>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a40      	ldr	r2, [pc, #256]	; (800115c <fsm_mode+0x200>)
 800105a:	6013      	str	r3, [r2, #0]
                if(current_parameter > 6)
 800105c:	4b3f      	ldr	r3, [pc, #252]	; (800115c <fsm_mode+0x200>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b06      	cmp	r3, #6
 8001062:	dd1e      	ble.n	80010a2 <fsm_mode+0x146>
                {
                	timer1 = 0;
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <fsm_mode+0x1fc>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
                    current_parameter = 0;
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <fsm_mode+0x200>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
                    updateTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 8001070:	4b48      	ldr	r3, [pc, #288]	; (8001194 <fsm_mode+0x238>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	4b45      	ldr	r3, [pc, #276]	; (800118c <fsm_mode+0x230>)
 8001076:	681c      	ldr	r4, [r3, #0]
 8001078:	4b42      	ldr	r3, [pc, #264]	; (8001184 <fsm_mode+0x228>)
 800107a:	681d      	ldr	r5, [r3, #0]
 800107c:	4b3f      	ldr	r3, [pc, #252]	; (800117c <fsm_mode+0x220>)
 800107e:	681e      	ldr	r6, [r3, #0]
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <fsm_mode+0x208>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a39      	ldr	r2, [pc, #228]	; (800116c <fsm_mode+0x210>)
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	493a      	ldr	r1, [pc, #232]	; (8001174 <fsm_mode+0x218>)
 800108a:	6809      	ldr	r1, [r1, #0]
 800108c:	9102      	str	r1, [sp, #8]
 800108e:	9201      	str	r2, [sp, #4]
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	4633      	mov	r3, r6
 8001094:	462a      	mov	r2, r5
 8001096:	4621      	mov	r1, r4
 8001098:	f7ff fb38 	bl	800070c <updateTime>
                    mode = NormalMode;
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <fsm_mode+0x1f4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
                }
                updateTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <fsm_mode+0x238>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <fsm_mode+0x230>)
 80010a8:	681c      	ldr	r4, [r3, #0]
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <fsm_mode+0x228>)
 80010ac:	681d      	ldr	r5, [r3, #0]
 80010ae:	4b33      	ldr	r3, [pc, #204]	; (800117c <fsm_mode+0x220>)
 80010b0:	681e      	ldr	r6, [r3, #0]
 80010b2:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <fsm_mode+0x208>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a2d      	ldr	r2, [pc, #180]	; (800116c <fsm_mode+0x210>)
 80010b8:	6812      	ldr	r2, [r2, #0]
 80010ba:	492e      	ldr	r1, [pc, #184]	; (8001174 <fsm_mode+0x218>)
 80010bc:	6809      	ldr	r1, [r1, #0]
 80010be:	9102      	str	r1, [sp, #8]
 80010c0:	9201      	str	r2, [sp, #4]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	4633      	mov	r3, r6
 80010c6:	462a      	mov	r2, r5
 80010c8:	4621      	mov	r1, r4
 80010ca:	f7ff fb1f 	bl	800070c <updateTime>
            }

            if(button_count[0] >= 3)
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <fsm_mode+0x1f8>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d92b      	bls.n	800112e <fsm_mode+0x1d2>
            {
            	timer1 = 0;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <fsm_mode+0x1fc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
            	current_parameter = 0;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <fsm_mode+0x200>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
            	hour_temp = ds3231_hour;
 80010e2:	4b1f      	ldr	r3, [pc, #124]	; (8001160 <fsm_mode+0x204>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <fsm_mode+0x208>)
 80010ea:	601a      	str	r2, [r3, #0]
            	min_temp = ds3231_min;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <fsm_mode+0x20c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <fsm_mode+0x210>)
 80010f4:	601a      	str	r2, [r3, #0]
            	sec_temp = ds3231_sec;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <fsm_mode+0x214>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <fsm_mode+0x218>)
 80010fe:	601a      	str	r2, [r3, #0]
            	day_temp = ds3231_day;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <fsm_mode+0x21c>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <fsm_mode+0x220>)
 8001108:	601a      	str	r2, [r3, #0]
            	date_temp = ds3231_date;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <fsm_mode+0x224>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <fsm_mode+0x228>)
 8001112:	601a      	str	r2, [r3, #0]
            	month_temp = ds3231_month;
 8001114:	4b1c      	ldr	r3, [pc, #112]	; (8001188 <fsm_mode+0x22c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <fsm_mode+0x230>)
 800111c:	601a      	str	r2, [r3, #0]
            	year_temp = ds3231_year;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <fsm_mode+0x234>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <fsm_mode+0x238>)
 8001126:	601a      	str	r2, [r3, #0]
            	mode = AlarmSettingMode;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <fsm_mode+0x1f4>)
 800112a:	2203      	movs	r2, #3
 800112c:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 800112e:	f7ff fb53 	bl	80007d8 <displayTime>
            break;
 8001132:	e08f      	b.n	8001254 <fsm_mode+0x2f8>

        case AlarmSettingMode:
        	displayStatus();
 8001134:	f7ff fcb2 	bl	8000a9c <displayStatus>
            if(button_count[4] >= 5)
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <fsm_mode+0x1f8>)
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d92d      	bls.n	800119c <fsm_mode+0x240>
            	incrementParameter();
 8001140:	f7ff fed6 	bl	8000ef0 <incrementParameter>
 8001144:	e02d      	b.n	80011a2 <fsm_mode+0x246>
 8001146:	bf00      	nop
 8001148:	2000001c 	.word	0x2000001c
 800114c:	08007024 	.word	0x08007024
 8001150:	20000058 	.word	0x20000058
 8001154:	200000a0 	.word	0x200000a0
 8001158:	2000005c 	.word	0x2000005c
 800115c:	20000084 	.word	0x20000084
 8001160:	200000c2 	.word	0x200000c2
 8001164:	20000078 	.word	0x20000078
 8001168:	200000c3 	.word	0x200000c3
 800116c:	2000007c 	.word	0x2000007c
 8001170:	200000c0 	.word	0x200000c0
 8001174:	20000080 	.word	0x20000080
 8001178:	200000c5 	.word	0x200000c5
 800117c:	20000074 	.word	0x20000074
 8001180:	200000c4 	.word	0x200000c4
 8001184:	20000070 	.word	0x20000070
 8001188:	200000c6 	.word	0x200000c6
 800118c:	2000006c 	.word	0x2000006c
 8001190:	200000c1 	.word	0x200000c1
 8001194:	20000068 	.word	0x20000068
 8001198:	20000060 	.word	0x20000060
            else
            	timer2 = 0;
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <fsm_mode+0x300>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

            if(button_count[12] >= 3)
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <fsm_mode+0x304>)
 80011a4:	8b1b      	ldrh	r3, [r3, #24]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d943      	bls.n	8001232 <fsm_mode+0x2d6>
            {
            	current_parameter++;
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <fsm_mode+0x308>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <fsm_mode+0x308>)
 80011b2:	6013      	str	r3, [r2, #0]
            	if(current_parameter > 6)
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <fsm_mode+0x308>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	dd21      	ble.n	8001200 <fsm_mode+0x2a4>
            	{
            		timer1 = 0;
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <fsm_mode+0x30c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
            		current_parameter = 0;
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <fsm_mode+0x308>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
            		updateAlarmTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <fsm_mode+0x310>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <fsm_mode+0x314>)
 80011ce:	681c      	ldr	r4, [r3, #0]
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <fsm_mode+0x318>)
 80011d2:	681d      	ldr	r5, [r3, #0]
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <fsm_mode+0x31c>)
 80011d6:	681e      	ldr	r6, [r3, #0]
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <fsm_mode+0x320>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a28      	ldr	r2, [pc, #160]	; (8001280 <fsm_mode+0x324>)
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	4928      	ldr	r1, [pc, #160]	; (8001284 <fsm_mode+0x328>)
 80011e2:	6809      	ldr	r1, [r1, #0]
 80011e4:	9102      	str	r1, [sp, #8]
 80011e6:	9201      	str	r2, [sp, #4]
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	4633      	mov	r3, r6
 80011ec:	462a      	mov	r2, r5
 80011ee:	4621      	mov	r1, r4
 80011f0:	f7ff fac2 	bl	8000778 <updateAlarmTime>
            		alarm_on = 1;
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <fsm_mode+0x32c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
            		mode = NormalMode;
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <fsm_mode+0x330>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
            	}
            	alarm_on = 1;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <fsm_mode+0x32c>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
            	updateAlarmTime(year_temp, month_temp, date_temp, day_temp, hour_temp, min_temp, sec_temp);
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <fsm_mode+0x310>)
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <fsm_mode+0x314>)
 800120c:	681c      	ldr	r4, [r3, #0]
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <fsm_mode+0x318>)
 8001210:	681d      	ldr	r5, [r3, #0]
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <fsm_mode+0x31c>)
 8001214:	681e      	ldr	r6, [r3, #0]
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <fsm_mode+0x320>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <fsm_mode+0x324>)
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	4919      	ldr	r1, [pc, #100]	; (8001284 <fsm_mode+0x328>)
 8001220:	6809      	ldr	r1, [r1, #0]
 8001222:	9102      	str	r1, [sp, #8]
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4633      	mov	r3, r6
 800122a:	462a      	mov	r2, r5
 800122c:	4621      	mov	r1, r4
 800122e:	f7ff faa3 	bl	8000778 <updateAlarmTime>
            }

            if(button_count[0] >= 3)
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <fsm_mode+0x304>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d908      	bls.n	800124c <fsm_mode+0x2f0>
            {
            	timer1 = 0;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <fsm_mode+0x30c>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
            	current_parameter = 0;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <fsm_mode+0x308>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
            	mode = NormalMode;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <fsm_mode+0x330>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]
            }
            displayTime();
 800124c:	f7ff fac4 	bl	80007d8 <displayTime>
            break;
 8001250:	e000      	b.n	8001254 <fsm_mode+0x2f8>

        default:
            break;
 8001252:	bf00      	nop
    }
}
 8001254:	bf00      	nop
 8001256:	3704      	adds	r7, #4
 8001258:	46bd      	mov	sp, r7
 800125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125c:	20000060 	.word	0x20000060
 8001260:	200000a0 	.word	0x200000a0
 8001264:	20000084 	.word	0x20000084
 8001268:	2000005c 	.word	0x2000005c
 800126c:	20000068 	.word	0x20000068
 8001270:	2000006c 	.word	0x2000006c
 8001274:	20000070 	.word	0x20000070
 8001278:	20000074 	.word	0x20000074
 800127c:	20000078 	.word	0x20000078
 8001280:	2000007c 	.word	0x2000007c
 8001284:	20000080 	.word	0x20000080
 8001288:	2000001c 	.word	0x2000001c
 800128c:	20000058 	.word	0x20000058

08001290 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80012aa:	463b      	mov	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <MX_FSMC_Init+0xec>)
 80012be:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012c2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	; (800137c <MX_FSMC_Init+0xec>)
 80012c6:	4a2e      	ldr	r2, [pc, #184]	; (8001380 <MX_FSMC_Init+0xf0>)
 80012c8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <MX_FSMC_Init+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012d0:	4b2a      	ldr	r3, [pc, #168]	; (800137c <MX_FSMC_Init+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <MX_FSMC_Init+0xec>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <MX_FSMC_Init+0xec>)
 80012de:	2210      	movs	r2, #16
 80012e0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_FSMC_Init+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <MX_FSMC_Init+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <MX_FSMC_Init+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_FSMC_Init+0xec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <MX_FSMC_Init+0xec>)
 80012fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001302:	4b1e      	ldr	r3, [pc, #120]	; (800137c <MX_FSMC_Init+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001308:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_FSMC_Init+0xec>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_FSMC_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_FSMC_Init+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_FSMC_Init+0xec>)
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001322:	230f      	movs	r3, #15
 8001324:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001326:	230f      	movs	r3, #15
 8001328:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800132a:	233c      	movs	r3, #60	; 0x3c
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001332:	2310      	movs	r3, #16
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001336:	2311      	movs	r3, #17
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800133e:	2308      	movs	r3, #8
 8001340:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001342:	230f      	movs	r3, #15
 8001344:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001346:	2309      	movs	r3, #9
 8001348:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800134e:	2310      	movs	r3, #16
 8001350:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001352:	2311      	movs	r3, #17
 8001354:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800135a:	463a      	mov	r2, r7
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <MX_FSMC_Init+0xec>)
 8001364:	f004 f8a8 	bl	80054b8 <HAL_SRAM_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800136e:	f000 ffd5 	bl	800231c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001372:	bf00      	nop
 8001374:	3738      	adds	r7, #56	; 0x38
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200000d0 	.word	0x200000d0
 8001380:	a0000104 	.word	0xa0000104

08001384 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_FSMC_MspInit+0x88>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d131      	bne.n	8001404 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_FSMC_MspInit+0x88>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_FSMC_MspInit+0x8c>)
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <HAL_FSMC_MspInit+0x8c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_FSMC_MspInit+0x8c>)
 80013b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013c2:	f64f 7388 	movw	r3, #65416	; 0xff88
 80013c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013d4:	230c      	movs	r3, #12
 80013d6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <HAL_FSMC_MspInit+0x90>)
 80013de:	f001 fcbf 	bl	8002d60 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013e2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80013e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013f4:	230c      	movs	r3, #12
 80013f6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <HAL_FSMC_MspInit+0x94>)
 80013fe:	f001 fcaf 	bl	8002d60 <HAL_GPIO_Init>
 8001402:	e000      	b.n	8001406 <HAL_FSMC_MspInit+0x82>
    return;
 8001404:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000054 	.word	0x20000054
 8001410:	40023800 	.word	0x40023800
 8001414:	40021000 	.word	0x40021000
 8001418:	40020c00 	.word	0x40020c00

0800141c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001424:	f7ff ffae 	bl	8001384 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b6f      	ldr	r3, [pc, #444]	; (8001608 <MX_GPIO_Init+0x1d8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a6e      	ldr	r2, [pc, #440]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b68      	ldr	r3, [pc, #416]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a67      	ldr	r2, [pc, #412]	; (8001608 <MX_GPIO_Init+0x1d8>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b65      	ldr	r3, [pc, #404]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b61      	ldr	r3, [pc, #388]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a60      	ldr	r2, [pc, #384]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b5a      	ldr	r3, [pc, #360]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a59      	ldr	r2, [pc, #356]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b57      	ldr	r3, [pc, #348]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b53      	ldr	r3, [pc, #332]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a52      	ldr	r2, [pc, #328]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b50      	ldr	r3, [pc, #320]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a4b      	ldr	r2, [pc, #300]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b49      	ldr	r3, [pc, #292]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b45      	ldr	r3, [pc, #276]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a44      	ldr	r2, [pc, #272]	; (8001608 <MX_GPIO_Init+0x1d8>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b42      	ldr	r3, [pc, #264]	; (8001608 <MX_GPIO_Init+0x1d8>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	2170      	movs	r1, #112	; 0x70
 800150e:	483f      	ldr	r0, [pc, #252]	; (800160c <MX_GPIO_Init+0x1dc>)
 8001510:	f001 fdc2 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151a:	483d      	ldr	r0, [pc, #244]	; (8001610 <MX_GPIO_Init+0x1e0>)
 800151c:	f001 fdbc 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2140      	movs	r1, #64	; 0x40
 8001524:	483b      	ldr	r0, [pc, #236]	; (8001614 <MX_GPIO_Init+0x1e4>)
 8001526:	f001 fdb7 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001530:	4839      	ldr	r0, [pc, #228]	; (8001618 <MX_GPIO_Init+0x1e8>)
 8001532:	f001 fdb1 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2108      	movs	r1, #8
 800153a:	4838      	ldr	r0, [pc, #224]	; (800161c <MX_GPIO_Init+0x1ec>)
 800153c:	f001 fdac 	bl	8003098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8001540:	2370      	movs	r3, #112	; 0x70
 8001542:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	482d      	ldr	r0, [pc, #180]	; (800160c <MX_GPIO_Init+0x1dc>)
 8001558:	f001 fc02 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 800155c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4826      	ldr	r0, [pc, #152]	; (8001610 <MX_GPIO_Init+0x1e0>)
 8001576:	f001 fbf3 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800157a:	23c0      	movs	r3, #192	; 0xc0
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4822      	ldr	r0, [pc, #136]	; (8001618 <MX_GPIO_Init+0x1e8>)
 800158e:	f001 fbe7 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8001592:	2330      	movs	r3, #48	; 0x30
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	481a      	ldr	r0, [pc, #104]	; (8001610 <MX_GPIO_Init+0x1e0>)
 80015a6:	f001 fbdb 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80015aa:	2340      	movs	r3, #64	; 0x40
 80015ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 031c 	add.w	r3, r7, #28
 80015be:	4619      	mov	r1, r3
 80015c0:	4814      	ldr	r0, [pc, #80]	; (8001614 <MX_GPIO_Init+0x1e4>)
 80015c2:	f001 fbcd 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80015c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4619      	mov	r1, r3
 80015de:	480e      	ldr	r0, [pc, #56]	; (8001618 <MX_GPIO_Init+0x1e8>)
 80015e0:	f001 fbbe 	bl	8002d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80015e4:	2308      	movs	r3, #8
 80015e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	4808      	ldr	r0, [pc, #32]	; (800161c <MX_GPIO_Init+0x1ec>)
 80015fc:	f001 fbb0 	bl	8002d60 <HAL_GPIO_Init>

}
 8001600:	bf00      	nop
 8001602:	3730      	adds	r7, #48	; 0x30
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40021000 	.word	0x40021000
 8001610:	40020800 	.word	0x40020800
 8001614:	40021800 	.word	0x40021800
 8001618:	40020000 	.word	0x40020000
 800161c:	40020c00 	.word	0x40020c00

08001620 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f001 fd4f 	bl	8003100 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fe58 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000120 	.word	0x20000120
 8001674:	40005400 	.word	0x40005400
 8001678:	000186a0 	.word	0x000186a0

0800167c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_I2C_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12b      	bne.n	80016f6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ba:	23c0      	movs	r3, #192	; 0xc0
 80016bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016be:	2312      	movs	r3, #18
 80016c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ca:	2304      	movs	r3, #4
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <HAL_I2C_MspInit+0x8c>)
 80016d6:	f001 fb43 	bl	8002d60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	; 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400

0800170c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <LCD_WR_REG+0x1c>)
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	8013      	strh	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	600ffffe 	.word	0x600ffffe

0800172c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <LCD_WR_DATA+0x1c>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	8053      	strh	r3, [r2, #2]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	600ffffe 	.word	0x600ffffe

0800174c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <LCD_RD_DATA+0x20>)
 8001754:	885b      	ldrh	r3, [r3, #2]
 8001756:	b29b      	uxth	r3, r3
 8001758:	80fb      	strh	r3, [r7, #6]
	return ram;
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	b29b      	uxth	r3, r3
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	600ffffe 	.word	0x600ffffe

08001770 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4604      	mov	r4, r0
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4623      	mov	r3, r4
 8001780:	80fb      	strh	r3, [r7, #6]
 8001782:	4603      	mov	r3, r0
 8001784:	80bb      	strh	r3, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	807b      	strh	r3, [r7, #2]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800178e:	202a      	movs	r0, #42	; 0x2a
 8001790:	f7ff ffbc 	bl	800170c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ffc6 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ffc0 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ffba 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ffb4 	bl	800172c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80017c4:	202b      	movs	r0, #43	; 0x2b
 80017c6:	f7ff ffa1 	bl	800170c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ffab 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80017d6:	88bb      	ldrh	r3, [r7, #4]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ffa5 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80017e2:	883b      	ldrh	r3, [r7, #0]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff9f 	bl	800172c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff99 	bl	800172c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80017fa:	202c      	movs	r0, #44	; 0x2c
 80017fc:	f7ff ff86 	bl	800170c <LCD_WR_REG>
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b29b      	uxth	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <lcd_Clear+0x70>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <lcd_Clear+0x70>)
 800182c:	885b      	ldrh	r3, [r3, #2]
 800182e:	3b01      	subs	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	2100      	movs	r1, #0
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff ff9b 	bl	8001770 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 800183a:	2300      	movs	r3, #0
 800183c:	81fb      	strh	r3, [r7, #14]
 800183e:	e011      	b.n	8001864 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8001840:	2300      	movs	r3, #0
 8001842:	81bb      	strh	r3, [r7, #12]
 8001844:	e006      	b.n	8001854 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001846:	88fb      	ldrh	r3, [r7, #6]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff6f 	bl	800172c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800184e:	89bb      	ldrh	r3, [r7, #12]
 8001850:	3301      	adds	r3, #1
 8001852:	81bb      	strh	r3, [r7, #12]
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <lcd_Clear+0x70>)
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	89ba      	ldrh	r2, [r7, #12]
 800185a:	429a      	cmp	r2, r3
 800185c:	d3f3      	bcc.n	8001846 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 800185e:	89fb      	ldrh	r3, [r7, #14]
 8001860:	3301      	adds	r3, #1
 8001862:	81fb      	strh	r3, [r7, #14]
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <lcd_Clear+0x70>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	89fa      	ldrh	r2, [r7, #14]
 800186a:	429a      	cmp	r2, r3
 800186c:	d3e8      	bcc.n	8001840 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000174 	.word	0x20000174

0800187c <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	80fb      	strh	r3, [r7, #6]
 800188e:	4603      	mov	r3, r0
 8001890:	80bb      	strh	r3, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800189a:	887b      	ldrh	r3, [r7, #2]
 800189c:	3b01      	subs	r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	88b9      	ldrh	r1, [r7, #4]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	f7ff ff61 	bl	8001770 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 80018ae:	88bb      	ldrh	r3, [r7, #4]
 80018b0:	81fb      	strh	r3, [r7, #14]
 80018b2:	e010      	b.n	80018d6 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	81bb      	strh	r3, [r7, #12]
 80018b8:	e006      	b.n	80018c8 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 80018ba:	8c3b      	ldrh	r3, [r7, #32]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff35 	bl	800172c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 80018c2:	89bb      	ldrh	r3, [r7, #12]
 80018c4:	3301      	adds	r3, #1
 80018c6:	81bb      	strh	r3, [r7, #12]
 80018c8:	89ba      	ldrh	r2, [r7, #12]
 80018ca:	887b      	ldrh	r3, [r7, #2]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d3f4      	bcc.n	80018ba <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 80018d0:	89fb      	ldrh	r3, [r7, #14]
 80018d2:	3301      	adds	r3, #1
 80018d4:	81fb      	strh	r3, [r7, #14]
 80018d6:	89fa      	ldrh	r2, [r7, #14]
 80018d8:	883b      	ldrh	r3, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3ea      	bcc.n	80018b4 <lcd_Fill+0x38>
		}
	}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	460b      	mov	r3, r1
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	88b9      	ldrh	r1, [r7, #4]
 8001900:	88f8      	ldrh	r0, [r7, #6]
 8001902:	f7ff ff35 	bl	8001770 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff0f 	bl	800172c <LCD_WR_DATA>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
 800191e:	4604      	mov	r4, r0
 8001920:	4608      	mov	r0, r1
 8001922:	4611      	mov	r1, r2
 8001924:	461a      	mov	r2, r3
 8001926:	4623      	mov	r3, r4
 8001928:	80fb      	strh	r3, [r7, #6]
 800192a:	4603      	mov	r3, r0
 800192c:	80bb      	strh	r3, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
 8001932:	4613      	mov	r3, r2
 8001934:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001936:	2300      	movs	r3, #0
 8001938:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800193e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4413      	add	r3, r2
 8001962:	b29a      	uxth	r2, r3
 8001964:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001968:	b29b      	uxth	r3, r3
 800196a:	fb12 f303 	smulbb	r3, r2, r3
 800196e:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	3b20      	subs	r3, #32
 8001974:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	b29a      	uxth	r2, r3
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	4413      	add	r3, r2
 800197e:	b29b      	uxth	r3, r3
 8001980:	3b01      	subs	r3, #1
 8001982:	b29c      	uxth	r4, r3
 8001984:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001988:	b29a      	uxth	r2, r3
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	b29b      	uxth	r3, r3
 8001990:	3b01      	subs	r3, #1
 8001992:	b29b      	uxth	r3, r3
 8001994:	88b9      	ldrh	r1, [r7, #4]
 8001996:	88f8      	ldrh	r0, [r7, #6]
 8001998:	4622      	mov	r2, r4
 800199a:	f7ff fee9 	bl	8001770 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	827b      	strh	r3, [r7, #18]
 80019a2:	e07a      	b.n	8001a9a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80019a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d028      	beq.n	80019fe <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 80019ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d108      	bne.n	80019c6 <lcd_ShowChar+0xae>
 80019b4:	78fa      	ldrb	r2, [r7, #3]
 80019b6:	8a7b      	ldrh	r3, [r7, #18]
 80019b8:	493c      	ldr	r1, [pc, #240]	; (8001aac <lcd_ShowChar+0x194>)
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	440a      	add	r2, r1
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	75fb      	strb	r3, [r7, #23]
 80019c4:	e01b      	b.n	80019fe <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 80019c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ca:	2b18      	cmp	r3, #24
 80019cc:	d10b      	bne.n	80019e6 <lcd_ShowChar+0xce>
 80019ce:	78fa      	ldrb	r2, [r7, #3]
 80019d0:	8a79      	ldrh	r1, [r7, #18]
 80019d2:	4837      	ldr	r0, [pc, #220]	; (8001ab0 <lcd_ShowChar+0x198>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4403      	add	r3, r0
 80019de:	440b      	add	r3, r1
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	75fb      	strb	r3, [r7, #23]
 80019e4:	e00b      	b.n	80019fe <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 80019e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ea:	2b20      	cmp	r3, #32
 80019ec:	d15a      	bne.n	8001aa4 <lcd_ShowChar+0x18c>
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	8a7b      	ldrh	r3, [r7, #18]
 80019f2:	4930      	ldr	r1, [pc, #192]	; (8001ab4 <lcd_ShowChar+0x19c>)
 80019f4:	0192      	lsls	r2, r2, #6
 80019f6:	440a      	add	r2, r1
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	75bb      	strb	r3, [r7, #22]
 8001a02:	e044      	b.n	8001a8e <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d120      	bne.n	8001a4e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a0c:	7dfa      	ldrb	r2, [r7, #23]
 8001a0e:	7dbb      	ldrb	r3, [r7, #22]
 8001a10:	fa42 f303 	asr.w	r3, r2, r3
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <lcd_ShowChar+0x10e>
 8001a1c:	883b      	ldrh	r3, [r7, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fe84 	bl	800172c <LCD_WR_DATA>
 8001a24:	e003      	b.n	8001a2e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fe7f 	bl	800172c <LCD_WR_DATA>
				m++;
 8001a2e:	7d7b      	ldrb	r3, [r7, #21]
 8001a30:	3301      	adds	r3, #1
 8001a32:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a3c:	fb02 f201 	mul.w	r2, r2, r1
 8001a40:	1a9b      	subs	r3, r3, r2
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11f      	bne.n	8001a88 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	757b      	strb	r3, [r7, #21]
					break;
 8001a4c:	e022      	b.n	8001a94 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a4e:	7dfa      	ldrb	r2, [r7, #23]
 8001a50:	7dbb      	ldrb	r3, [r7, #22]
 8001a52:	fa42 f303 	asr.w	r3, r2, r3
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <lcd_ShowChar+0x152>
 8001a5e:	883a      	ldrh	r2, [r7, #0]
 8001a60:	88b9      	ldrh	r1, [r7, #4]
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff3f 	bl	80018e8 <lcd_DrawPoint>
				x++;
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	8a3b      	ldrh	r3, [r7, #16]
 8001a74:	1ad2      	subs	r2, r2, r3
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d105      	bne.n	8001a88 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a7c:	8a3b      	ldrh	r3, [r7, #16]
 8001a7e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	80bb      	strh	r3, [r7, #4]
					break;
 8001a86:	e005      	b.n	8001a94 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001a88:	7dbb      	ldrb	r3, [r7, #22]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	75bb      	strb	r3, [r7, #22]
 8001a8e:	7dbb      	ldrb	r3, [r7, #22]
 8001a90:	2b07      	cmp	r3, #7
 8001a92:	d9b7      	bls.n	8001a04 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001a94:	8a7b      	ldrh	r3, [r7, #18]
 8001a96:	3301      	adds	r3, #1
 8001a98:	827b      	strh	r3, [r7, #18]
 8001a9a:	8a7a      	ldrh	r2, [r7, #18]
 8001a9c:	89bb      	ldrh	r3, [r7, #12]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d380      	bcc.n	80019a4 <lcd_ShowChar+0x8c>
 8001aa2:	e000      	b.n	8001aa6 <lcd_ShowChar+0x18e>
		else return;
 8001aa4:	bf00      	nop
				}
			}
		}
	}
}
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	0800702c 	.word	0x0800702c
 8001ab0:	0800761c 	.word	0x0800761c
 8001ab4:	080087ec 	.word	0x080087ec

08001ab8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460a      	mov	r2, r1
 8001ac2:	71fb      	strb	r3, [r7, #7]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001acc:	e004      	b.n	8001ad8 <mypow+0x20>
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	1e5a      	subs	r2, r3, #1
 8001adc:	71ba      	strb	r2, [r7, #6]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1f5      	bne.n	8001ace <mypow+0x16>
	return result;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af04      	add	r7, sp, #16
 8001af6:	4604      	mov	r4, r0
 8001af8:	4608      	mov	r0, r1
 8001afa:	4611      	mov	r1, r2
 8001afc:	461a      	mov	r2, r3
 8001afe:	4623      	mov	r3, r4
 8001b00:	80fb      	strh	r3, [r7, #6]
 8001b02:	4603      	mov	r3, r0
 8001b04:	80bb      	strh	r3, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	807b      	strh	r3, [r7, #2]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001b12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e059      	b.n	8001bd4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001b20:	887c      	ldrh	r4, [r7, #2]
 8001b22:	787a      	ldrb	r2, [r7, #1]
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4619      	mov	r1, r3
 8001b30:	200a      	movs	r0, #10
 8001b32:	f7ff ffc1 	bl	8001ab8 <mypow>
 8001b36:	4603      	mov	r3, r0
 8001b38:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <lcd_ShowIntNum+0xf8>)
 8001b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	1aca      	subs	r2, r1, r3
 8001b4e:	4613      	mov	r3, r2
 8001b50:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d121      	bne.n	8001b9c <lcd_ShowIntNum+0xac>
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	787b      	ldrb	r3, [r7, #1]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	da1c      	bge.n	8001b9c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001b62:	7b3b      	ldrb	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d117      	bne.n	8001b98 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	7b7b      	ldrb	r3, [r7, #13]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	fb12 f303 	smulbb	r3, r2, r3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b298      	uxth	r0, r3
 8001b7c:	8c3a      	ldrh	r2, [r7, #32]
 8001b7e:	88b9      	ldrh	r1, [r7, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	2220      	movs	r2, #32
 8001b92:	f7ff fec1 	bl	8001918 <lcd_ShowChar>
				continue;
 8001b96:	e01a      	b.n	8001bce <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	7b7b      	ldrb	r3, [r7, #13]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	fb12 f303 	smulbb	r3, r2, r3
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4413      	add	r3, r2
 8001bae:	b298      	uxth	r0, r3
 8001bb0:	7b3b      	ldrb	r3, [r7, #12]
 8001bb2:	3330      	adds	r3, #48	; 0x30
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	8c3c      	ldrh	r4, [r7, #32]
 8001bb8:	88b9      	ldrh	r1, [r7, #4]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	4623      	mov	r3, r4
 8001bca:	f7ff fea5 	bl	8001918 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	787b      	ldrb	r3, [r7, #1]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d3a1      	bcc.n	8001b20 <lcd_ShowIntNum+0x30>
	}
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd90      	pop	{r4, r7, pc}
 8001be6:	bf00      	nop
 8001be8:	cccccccd 	.word	0xcccccccd

08001bec <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d007      	beq.n	8001c16 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <lcd_SetDir+0x44>)
 8001c08:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c0c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <lcd_SetDir+0x44>)
 8001c10:	22f0      	movs	r2, #240	; 0xf0
 8001c12:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001c14:	e006      	b.n	8001c24 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <lcd_SetDir+0x44>)
 8001c18:	22f0      	movs	r2, #240	; 0xf0
 8001c1a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <lcd_SetDir+0x44>)
 8001c1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c22:	805a      	strh	r2, [r3, #2]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000174 	.word	0x20000174

08001c34 <lcd_init>:


void lcd_init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c3e:	48aa      	ldr	r0, [pc, #680]	; (8001ee8 <lcd_init+0x2b4>)
 8001c40:	f001 fa2a 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c48:	f000 fec2 	bl	80029d0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c52:	48a5      	ldr	r0, [pc, #660]	; (8001ee8 <lcd_init+0x2b4>)
 8001c54:	f001 fa20 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c5c:	f000 feb8 	bl	80029d0 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff ffc3 	bl	8001bec <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001c66:	20d3      	movs	r0, #211	; 0xd3
 8001c68:	f7ff fd50 	bl	800170c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001c6c:	f7ff fd6e 	bl	800174c <LCD_RD_DATA>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b9d      	ldr	r3, [pc, #628]	; (8001eec <lcd_init+0x2b8>)
 8001c76:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c78:	f7ff fd68 	bl	800174c <LCD_RD_DATA>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b9a      	ldr	r3, [pc, #616]	; (8001eec <lcd_init+0x2b8>)
 8001c82:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001c84:	f7ff fd62 	bl	800174c <LCD_RD_DATA>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b97      	ldr	r3, [pc, #604]	; (8001eec <lcd_init+0x2b8>)
 8001c8e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001c90:	4b96      	ldr	r3, [pc, #600]	; (8001eec <lcd_init+0x2b8>)
 8001c92:	889b      	ldrh	r3, [r3, #4]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b94      	ldr	r3, [pc, #592]	; (8001eec <lcd_init+0x2b8>)
 8001c9a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001c9c:	f7ff fd56 	bl	800174c <LCD_RD_DATA>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b91      	ldr	r3, [pc, #580]	; (8001eec <lcd_init+0x2b8>)
 8001ca6:	889b      	ldrh	r3, [r3, #4]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b8f      	ldr	r3, [pc, #572]	; (8001eec <lcd_init+0x2b8>)
 8001cae:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001cb0:	20cf      	movs	r0, #207	; 0xcf
 8001cb2:	f7ff fd2b 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff fd38 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001cbc:	20c1      	movs	r0, #193	; 0xc1
 8001cbe:	f7ff fd35 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001cc2:	2030      	movs	r0, #48	; 0x30
 8001cc4:	f7ff fd32 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001cc8:	20ed      	movs	r0, #237	; 0xed
 8001cca:	f7ff fd1f 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001cce:	2064      	movs	r0, #100	; 0x64
 8001cd0:	f7ff fd2c 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	f7ff fd29 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001cda:	2012      	movs	r0, #18
 8001cdc:	f7ff fd26 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001ce0:	2081      	movs	r0, #129	; 0x81
 8001ce2:	f7ff fd23 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001ce6:	20e8      	movs	r0, #232	; 0xe8
 8001ce8:	f7ff fd10 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001cec:	2085      	movs	r0, #133	; 0x85
 8001cee:	f7ff fd1d 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001cf2:	2010      	movs	r0, #16
 8001cf4:	f7ff fd1a 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001cf8:	207a      	movs	r0, #122	; 0x7a
 8001cfa:	f7ff fd17 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001cfe:	20cb      	movs	r0, #203	; 0xcb
 8001d00:	f7ff fd04 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001d04:	2039      	movs	r0, #57	; 0x39
 8001d06:	f7ff fd11 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001d0a:	202c      	movs	r0, #44	; 0x2c
 8001d0c:	f7ff fd0e 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff fd0b 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001d16:	2034      	movs	r0, #52	; 0x34
 8001d18:	f7ff fd08 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7ff fd05 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001d22:	20f7      	movs	r0, #247	; 0xf7
 8001d24:	f7ff fcf2 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001d28:	2020      	movs	r0, #32
 8001d2a:	f7ff fcff 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001d2e:	20ea      	movs	r0, #234	; 0xea
 8001d30:	f7ff fcec 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f7ff fcf9 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fcf6 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001d40:	20c0      	movs	r0, #192	; 0xc0
 8001d42:	f7ff fce3 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001d46:	201b      	movs	r0, #27
 8001d48:	f7ff fcf0 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001d4c:	20c1      	movs	r0, #193	; 0xc1
 8001d4e:	f7ff fcdd 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001d52:	2001      	movs	r0, #1
 8001d54:	f7ff fcea 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001d58:	20c5      	movs	r0, #197	; 0xc5
 8001d5a:	f7ff fcd7 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001d5e:	2030      	movs	r0, #48	; 0x30
 8001d60:	f7ff fce4 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001d64:	2030      	movs	r0, #48	; 0x30
 8001d66:	f7ff fce1 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001d6a:	20c7      	movs	r0, #199	; 0xc7
 8001d6c:	f7ff fcce 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001d70:	20b7      	movs	r0, #183	; 0xb7
 8001d72:	f7ff fcdb 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001d76:	2036      	movs	r0, #54	; 0x36
 8001d78:	f7ff fcc8 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001d7c:	2008      	movs	r0, #8
 8001d7e:	f7ff fcd5 	bl	800172c <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 8001d82:	203a      	movs	r0, #58	; 0x3a
 8001d84:	f7ff fcc2 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001d88:	2055      	movs	r0, #85	; 0x55
 8001d8a:	f7ff fccf 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001d8e:	20b1      	movs	r0, #177	; 0xb1
 8001d90:	f7ff fcbc 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fcc9 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001d9a:	201a      	movs	r0, #26
 8001d9c:	f7ff fcc6 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001da0:	20b6      	movs	r0, #182	; 0xb6
 8001da2:	f7ff fcb3 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001da6:	200a      	movs	r0, #10
 8001da8:	f7ff fcc0 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001dac:	20a2      	movs	r0, #162	; 0xa2
 8001dae:	f7ff fcbd 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001db2:	20f2      	movs	r0, #242	; 0xf2
 8001db4:	f7ff fcaa 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001db8:	2000      	movs	r0, #0
 8001dba:	f7ff fcb7 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001dbe:	2026      	movs	r0, #38	; 0x26
 8001dc0:	f7ff fca4 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff fcb1 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001dca:	20e0      	movs	r0, #224	; 0xe0
 8001dcc:	f7ff fc9e 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f7ff fcab 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001dd6:	202a      	movs	r0, #42	; 0x2a
 8001dd8:	f7ff fca8 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001ddc:	2028      	movs	r0, #40	; 0x28
 8001dde:	f7ff fca5 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001de2:	2008      	movs	r0, #8
 8001de4:	f7ff fca2 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001de8:	200e      	movs	r0, #14
 8001dea:	f7ff fc9f 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001dee:	2008      	movs	r0, #8
 8001df0:	f7ff fc9c 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001df4:	2054      	movs	r0, #84	; 0x54
 8001df6:	f7ff fc99 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001dfa:	20a9      	movs	r0, #169	; 0xa9
 8001dfc:	f7ff fc96 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001e00:	2043      	movs	r0, #67	; 0x43
 8001e02:	f7ff fc93 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001e06:	200a      	movs	r0, #10
 8001e08:	f7ff fc90 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e0c:	200f      	movs	r0, #15
 8001e0e:	f7ff fc8d 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fc8a 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fc87 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fc84 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff fc81 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001e2a:	20e1      	movs	r0, #225	; 0xe1
 8001e2c:	f7ff fc6e 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff fc7b 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001e36:	2015      	movs	r0, #21
 8001e38:	f7ff fc78 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001e3c:	2017      	movs	r0, #23
 8001e3e:	f7ff fc75 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001e42:	2007      	movs	r0, #7
 8001e44:	f7ff fc72 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001e48:	2011      	movs	r0, #17
 8001e4a:	f7ff fc6f 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001e4e:	2006      	movs	r0, #6
 8001e50:	f7ff fc6c 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001e54:	202b      	movs	r0, #43	; 0x2b
 8001e56:	f7ff fc69 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001e5a:	2056      	movs	r0, #86	; 0x56
 8001e5c:	f7ff fc66 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001e60:	203c      	movs	r0, #60	; 0x3c
 8001e62:	f7ff fc63 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001e66:	2005      	movs	r0, #5
 8001e68:	f7ff fc60 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001e6c:	2010      	movs	r0, #16
 8001e6e:	f7ff fc5d 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e72:	200f      	movs	r0, #15
 8001e74:	f7ff fc5a 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e78:	203f      	movs	r0, #63	; 0x3f
 8001e7a:	f7ff fc57 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001e7e:	203f      	movs	r0, #63	; 0x3f
 8001e80:	f7ff fc54 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001e84:	200f      	movs	r0, #15
 8001e86:	f7ff fc51 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001e8a:	202b      	movs	r0, #43	; 0x2b
 8001e8c:	f7ff fc3e 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fc4b 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fc48 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff fc45 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001ea2:	203f      	movs	r0, #63	; 0x3f
 8001ea4:	f7ff fc42 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001ea8:	202a      	movs	r0, #42	; 0x2a
 8001eaa:	f7ff fc2f 	bl	800170c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff fc3c 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff fc39 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff fc36 	bl	800172c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001ec0:	20ef      	movs	r0, #239	; 0xef
 8001ec2:	f7ff fc33 	bl	800172c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001ec6:	2011      	movs	r0, #17
 8001ec8:	f7ff fc20 	bl	800170c <LCD_WR_REG>
	HAL_Delay(120);
 8001ecc:	2078      	movs	r0, #120	; 0x78
 8001ece:	f000 fd7f 	bl	80029d0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001ed2:	2029      	movs	r0, #41	; 0x29
 8001ed4:	f7ff fc1a 	bl	800170c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ede:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <lcd_init+0x2bc>)
 8001ee0:	f001 f8da 	bl	8003098 <HAL_GPIO_WritePin>
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	20000174 	.word	0x20000174
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b08b      	sub	sp, #44	; 0x2c
 8001ef8:	af04      	add	r7, sp, #16
 8001efa:	60ba      	str	r2, [r7, #8]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	81fb      	strh	r3, [r7, #14]
 8001f02:	460b      	mov	r3, r1
 8001f04:	81bb      	strh	r3, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8001f0a:	89fb      	ldrh	r3, [r7, #14]
 8001f0c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001f12:	e048      	b.n	8001fa6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001f14:	7dfb      	ldrb	r3, [r7, #23]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d145      	bne.n	8001fa6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001f1a:	89fa      	ldrh	r2, [r7, #14]
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <lcd_ShowStr+0xc4>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	1acb      	subs	r3, r1, r3
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dc3f      	bgt.n	8001fb0 <lcd_ShowStr+0xbc>
 8001f30:	89ba      	ldrh	r2, [r7, #12]
 8001f32:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <lcd_ShowStr+0xc4>)
 8001f34:	885b      	ldrh	r3, [r3, #2]
 8001f36:	4619      	mov	r1, r3
 8001f38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f3c:	1acb      	subs	r3, r1, r3
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	dc36      	bgt.n	8001fb0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d902      	bls.n	8001f50 <lcd_ShowStr+0x5c>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	75fb      	strb	r3, [r7, #23]
 8001f4e:	e02a      	b.n	8001fa6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b0d      	cmp	r3, #13
 8001f56:	d10b      	bne.n	8001f70 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001f58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	89bb      	ldrh	r3, [r7, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001f64:	8abb      	ldrh	r3, [r7, #20]
 8001f66:	81fb      	strh	r3, [r7, #14]
					str++;
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	e017      	b.n	8001fa0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	88fc      	ldrh	r4, [r7, #6]
 8001f76:	89b9      	ldrh	r1, [r7, #12]
 8001f78:	89f8      	ldrh	r0, [r7, #14]
 8001f7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	f7ff fcc4 	bl	8001918 <lcd_ShowChar>
					x+=sizey/2;
 8001f90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001f94:	085b      	lsrs	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	89fb      	ldrh	r3, [r7, #14]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1b2      	bne.n	8001f14 <lcd_ShowStr+0x20>
 8001fae:	e000      	b.n	8001fb2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001fb0:	bf00      	nop
			}
		}
	}
}
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	20000174 	.word	0x20000174

08001fbc <lcd_StrCenter>:


void lcd_StrCenter(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af04      	add	r7, sp, #16
 8001fc2:	60ba      	str	r2, [r7, #8]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	81fb      	strh	r3, [r7, #14]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	81bb      	strh	r3, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
	uint16_t len=strlen((const char *)str);
 8001fd2:	68b8      	ldr	r0, [r7, #8]
 8001fd4:	f7fe f8f8 	bl	80001c8 <strlen>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	82fb      	strh	r3, [r7, #22]
	uint16_t x1=(lcddev.width-len*8)/2;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <lcd_StrCenter+0x60>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	8afb      	ldrh	r3, [r7, #22]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	0fda      	lsrs	r2, r3, #31
 8001fea:	4413      	add	r3, r2
 8001fec:	105b      	asrs	r3, r3, #1
 8001fee:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x+x1,y,str,fc,bc,sizey,mode);
 8001ff0:	89fa      	ldrh	r2, [r7, #14]
 8001ff2:	8abb      	ldrh	r3, [r7, #20]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	89b9      	ldrh	r1, [r7, #12]
 8001ffc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	8c3b      	ldrh	r3, [r7, #32]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f7ff ff70 	bl	8001ef4 <lcd_ShowStr>
}
 8002014:	bf00      	nop
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	20000174 	.word	0x20000174

08002020 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8002024:	2201      	movs	r2, #1
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <led7_init+0x14>)
 800202a:	f001 f835 	bl	8003098 <HAL_GPIO_WritePin>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40021800 	.word	0x40021800

08002038 <led7_Scan>:

void led7_Scan(){
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800203c:	4b3f      	ldr	r3, [pc, #252]	; (800213c <led7_Scan+0x104>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b3d      	ldr	r3, [pc, #244]	; (800213c <led7_Scan+0x104>)
 8002046:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <led7_Scan+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3d      	ldr	r2, [pc, #244]	; (8002144 <led7_Scan+0x10c>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b21a      	sxth	r2, r3
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <led7_Scan+0x104>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	b21b      	sxth	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b21b      	sxth	r3, r3
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b36      	ldr	r3, [pc, #216]	; (800213c <led7_Scan+0x104>)
 8002062:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8002064:	4b36      	ldr	r3, [pc, #216]	; (8002140 <led7_Scan+0x108>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d847      	bhi.n	80020fc <led7_Scan+0xc4>
 800206c:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <led7_Scan+0x3c>)
 800206e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002072:	bf00      	nop
 8002074:	08002085 	.word	0x08002085
 8002078:	080020a3 	.word	0x080020a3
 800207c:	080020c1 	.word	0x080020c1
 8002080:	080020df 	.word	0x080020df
	case 0:
		spi_buffer |= 0x00b0;
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <led7_Scan+0x104>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <led7_Scan+0x104>)
 8002090:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8002092:	4b2a      	ldr	r3, [pc, #168]	; (800213c <led7_Scan+0x104>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <led7_Scan+0x104>)
 800209e:	801a      	strh	r2, [r3, #0]
		break;
 80020a0:	e02d      	b.n	80020fe <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80020a2:	4b26      	ldr	r3, [pc, #152]	; (800213c <led7_Scan+0x104>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <led7_Scan+0x104>)
 80020ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <led7_Scan+0x104>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f023 0320 	bic.w	r3, r3, #32
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b20      	ldr	r3, [pc, #128]	; (800213c <led7_Scan+0x104>)
 80020bc:	801a      	strh	r2, [r3, #0]
		break;
 80020be:	e01e      	b.n	80020fe <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80020c0:	4b1e      	ldr	r3, [pc, #120]	; (800213c <led7_Scan+0x104>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <led7_Scan+0x104>)
 80020cc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <led7_Scan+0x104>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f023 0310 	bic.w	r3, r3, #16
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b18      	ldr	r3, [pc, #96]	; (800213c <led7_Scan+0x104>)
 80020da:	801a      	strh	r2, [r3, #0]
		break;
 80020dc:	e00f      	b.n	80020fe <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <led7_Scan+0x104>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <led7_Scan+0x104>)
 80020ea:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <led7_Scan+0x104>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <led7_Scan+0x104>)
 80020f8:	801a      	strh	r2, [r3, #0]
		break;
 80020fa:	e000      	b.n	80020fe <led7_Scan+0xc6>
	default:
		break;
 80020fc:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <led7_Scan+0x108>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	425a      	negs	r2, r3
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	f002 0203 	and.w	r2, r2, #3
 800210e:	bf58      	it	pl
 8002110:	4253      	negpl	r3, r2
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <led7_Scan+0x108>)
 8002114:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	480b      	ldr	r0, [pc, #44]	; (8002148 <led7_Scan+0x110>)
 800211c:	f000 ffbc 	bl	8003098 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8002120:	2301      	movs	r3, #1
 8002122:	2202      	movs	r2, #2
 8002124:	4905      	ldr	r1, [pc, #20]	; (800213c <led7_Scan+0x104>)
 8002126:	4809      	ldr	r0, [pc, #36]	; (800214c <led7_Scan+0x114>)
 8002128:	f002 fca7 	bl	8004a7a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800212c:	2201      	movs	r2, #1
 800212e:	2140      	movs	r1, #64	; 0x40
 8002130:	4805      	ldr	r0, [pc, #20]	; (8002148 <led7_Scan+0x110>)
 8002132:	f000 ffb1 	bl	8003098 <HAL_GPIO_WritePin>
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000024 	.word	0x20000024
 8002140:	2000008c 	.word	0x2000008c
 8002144:	20000020 	.word	0x20000020
 8002148:	40021800 	.word	0x40021800
 800214c:	200001b0 	.word	0x200001b0

08002150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002154:	f000 fbca 	bl	80028ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002158:	f000 f830 	bl	80021bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800215c:	f7ff f968 	bl	8001430 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002160:	f000 fa44 	bl	80025ec <MX_TIM2_Init>
  MX_SPI1_Init();
 8002164:	f000 f94c 	bl	8002400 <MX_SPI1_Init>
  MX_FSMC_Init();
 8002168:	f7ff f892 	bl	8001290 <MX_FSMC_Init>
  MX_I2C1_Init();
 800216c:	f7ff fa58 	bl	8001620 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002170:	f000 fada 	bl	8002728 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8002174:	f000 f88c 	bl	8002290 <system_init>
  lcd_Clear(BLACK);
 8002178:	2000      	movs	r0, #0
 800217a:	f7ff fb45 	bl	8001808 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 800217e:	bf00      	nop
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <main+0x64>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0fb      	beq.n	8002180 <main+0x30>
	  flag_timer2 = 0;
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <main+0x64>)
 800218a:	2200      	movs	r2, #0
 800218c:	801a      	strh	r2, [r3, #0]
	  timer1++;
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <main+0x68>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <main+0x68>)
 8002196:	6013      	str	r3, [r2, #0]
	  if(timer1 >= 200)
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <main+0x68>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2bc7      	cmp	r3, #199	; 0xc7
 800219e:	dd02      	ble.n	80021a6 <main+0x56>
		  timer1 = 0;
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <main+0x68>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
	  button_Scan();
 80021a6:	f7fe f99f 	bl	80004e8 <button_Scan>
	  test_LedDebug();
 80021aa:	f000 f893 	bl	80022d4 <test_LedDebug>
	  fsm_mode();
 80021ae:	f7fe fed5 	bl	8000f5c <fsm_mode>
	  while(!flag_timer2);
 80021b2:	e7e4      	b.n	800217e <main+0x2e>
 80021b4:	20000098 	.word	0x20000098
 80021b8:	2000005c 	.word	0x2000005c

080021bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b094      	sub	sp, #80	; 0x50
 80021c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021c2:	f107 0320 	add.w	r3, r7, #32
 80021c6:	2230      	movs	r2, #48	; 0x30
 80021c8:	2100      	movs	r1, #0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fef6 	bl	8006fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <SystemClock_Config+0xcc>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <SystemClock_Config+0xcc>)
 80021ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <SystemClock_Config+0xcc>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <SystemClock_Config+0xd0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <SystemClock_Config+0xd0>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <SystemClock_Config+0xd0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002218:	2302      	movs	r3, #2
 800221a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221c:	2301      	movs	r3, #1
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002220:	2310      	movs	r3, #16
 8002222:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002224:	2302      	movs	r3, #2
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002228:	2300      	movs	r3, #0
 800222a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800222c:	2308      	movs	r3, #8
 800222e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002230:	23a8      	movs	r3, #168	; 0xa8
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002234:	2302      	movs	r3, #2
 8002236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002238:	2304      	movs	r3, #4
 800223a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223c:	f107 0320 	add.w	r3, r7, #32
 8002240:	4618      	mov	r0, r3
 8002242:	f001 ff1d 	bl	8004080 <HAL_RCC_OscConfig>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800224c:	f000 f866 	bl	800231c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002250:	230f      	movs	r3, #15
 8002252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002254:	2302      	movs	r3, #2
 8002256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800225c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002266:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2105      	movs	r1, #5
 800226e:	4618      	mov	r0, r3
 8002270:	f002 f97e 	bl	8004570 <HAL_RCC_ClockConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800227a:	f000 f84f 	bl	800231c <Error_Handler>
  }
}
 800227e:	bf00      	nop
 8002280:	3750      	adds	r7, #80	; 0x50
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40007000 	.word	0x40007000

08002290 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8002294:	2200      	movs	r2, #0
 8002296:	2120      	movs	r1, #32
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <system_init+0x40>)
 800229a:	f000 fefd 	bl	8003098 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800229e:	2200      	movs	r2, #0
 80022a0:	2140      	movs	r1, #64	; 0x40
 80022a2:	480b      	ldr	r0, [pc, #44]	; (80022d0 <system_init+0x40>)
 80022a4:	f000 fef8 	bl	8003098 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2110      	movs	r1, #16
 80022ac:	4808      	ldr	r0, [pc, #32]	; (80022d0 <system_init+0x40>)
 80022ae:	f000 fef3 	bl	8003098 <HAL_GPIO_WritePin>
	  timer_init();
 80022b2:	f000 f839 	bl	8002328 <timer_init>
	  led7_init();
 80022b6:	f7ff feb3 	bl	8002020 <led7_init>
	  button_init();
 80022ba:	f7fe f909 	bl	80004d0 <button_init>
	  lcd_init();
 80022be:	f7ff fcb9 	bl	8001c34 <lcd_init>
	  uart_init_rs232();
 80022c2:	f000 fa05 	bl	80026d0 <uart_init_rs232>
	  setTimer2(50);
 80022c6:	2032      	movs	r0, #50	; 0x32
 80022c8:	f000 f838 	bl	800233c <setTimer2>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000

080022d4 <test_LedDebug>:

uint16_t count_led_debug = 0;

void test_LedDebug(){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <test_LedDebug+0x3c>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <test_LedDebug+0x40>)
 80022e0:	fb83 1302 	smull	r1, r3, r3, r2
 80022e4:	10d9      	asrs	r1, r3, #3
 80022e6:	17d3      	asrs	r3, r2, #31
 80022e8:	1ac9      	subs	r1, r1, r3
 80022ea:	460b      	mov	r3, r1
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	1ad1      	subs	r1, r2, r3
 80022f4:	b28a      	uxth	r2, r1
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <test_LedDebug+0x3c>)
 80022f8:	801a      	strh	r2, [r3, #0]
	if(count_led_debug == 0){
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <test_LedDebug+0x3c>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8002302:	2110      	movs	r1, #16
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <test_LedDebug+0x44>)
 8002306:	f000 fee0 	bl	80030ca <HAL_GPIO_TogglePin>
	}
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000090 	.word	0x20000090
 8002314:	66666667 	.word	0x66666667
 8002318:	40021000 	.word	0x40021000

0800231c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002324:	e7fe      	b.n	8002324 <Error_Handler+0x8>
	...

08002328 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <timer_init+0x10>)
 800232e:	f003 f957 	bl	80055e0 <HAL_TIM_Base_Start_IT>
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000208 	.word	0x20000208

0800233c <setTimer2>:
	timer1_counter = timer1_MUL;
	flag_timer1 = 0;
}

void setTimer2(uint16_t duration)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE;
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <setTimer2+0x2c>)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <setTimer2+0x2c>)
 800234e:	881a      	ldrh	r2, [r3, #0]
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <setTimer2+0x30>)
 8002352:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <setTimer2+0x34>)
 8002356:	2200      	movs	r2, #0
 8002358:	801a      	strh	r2, [r3, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	2000009c 	.word	0x2000009c
 800236c:	2000009a 	.word	0x2000009a
 8002370:	20000098 	.word	0x20000098

08002374 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002384:	d12b      	bne.n	80023de <HAL_TIM_PeriodElapsedCallback+0x6a>
	{
		if(timer1_counter > 0)
 8002386:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d010      	beq.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timer1_counter--;
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002398:	801a      	strh	r2, [r3, #0]
			if(timer1_counter == 0)
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				flag_timer1 = 1;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_TIM_PeriodElapsedCallback+0x78>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	801a      	strh	r2, [r3, #0]
				timer1_counter = timer1_MUL;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80023aa:	881a      	ldrh	r2, [r3, #0]
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80023ae:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer2_counter > 0)
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d010      	beq.n	80023da <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer2_counter--;
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023c2:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0)
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d106      	bne.n	80023da <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_timer2 = 1;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_TIM_PeriodElapsedCallback+0x88>)
 80023d4:	881a      	ldrh	r2, [r3, #0]
 80023d6:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80023d8:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80023da:	f7ff fe2d 	bl	8002038 <led7_Scan>
	}
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000094 	.word	0x20000094
 80023ec:	20000092 	.word	0x20000092
 80023f0:	20000096 	.word	0x20000096
 80023f4:	2000009a 	.word	0x2000009a
 80023f8:	20000098 	.word	0x20000098
 80023fc:	2000009c 	.word	0x2000009c

08002400 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_SPI1_Init+0x64>)
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <MX_SPI1_Init+0x68>)
 8002408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <MX_SPI1_Init+0x64>)
 800240c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_SPI1_Init+0x64>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_SPI1_Init+0x64>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_SPI1_Init+0x64>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_SPI1_Init+0x64>)
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <MX_SPI1_Init+0x64>)
 800242c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002430:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <MX_SPI1_Init+0x64>)
 8002434:	2200      	movs	r2, #0
 8002436:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <MX_SPI1_Init+0x64>)
 800243a:	2200      	movs	r2, #0
 800243c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800243e:	4b09      	ldr	r3, [pc, #36]	; (8002464 <MX_SPI1_Init+0x64>)
 8002440:	2200      	movs	r2, #0
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <MX_SPI1_Init+0x64>)
 8002446:	2200      	movs	r2, #0
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <MX_SPI1_Init+0x64>)
 800244c:	220a      	movs	r2, #10
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <MX_SPI1_Init+0x64>)
 8002452:	f002 fa89 	bl	8004968 <HAL_SPI_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800245c:	f7ff ff5e 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200001b0 	.word	0x200001b0
 8002468:	40013000 	.word	0x40013000

0800246c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	; (80024f0 <HAL_SPI_MspInit+0x84>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12b      	bne.n	80024e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_SPI_MspInit+0x88>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <HAL_SPI_MspInit+0x88>)
 8002498:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_SPI_MspInit+0x88>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_SPI_MspInit+0x88>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_SPI_MspInit+0x88>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_SPI_MspInit+0x88>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024c6:	2338      	movs	r3, #56	; 0x38
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024d6:	2305      	movs	r3, #5
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	; (80024f8 <HAL_SPI_MspInit+0x8c>)
 80024e2:	f000 fc3d 	bl	8002d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	; 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40013000 	.word	0x40013000
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020400 	.word	0x40020400

080024fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_MspInit+0x4c>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_MspInit+0x4c>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002550:	e7fe      	b.n	8002550 <NMI_Handler+0x4>

08002552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002556:	e7fe      	b.n	8002556 <HardFault_Handler+0x4>

08002558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255c:	e7fe      	b.n	800255c <MemManage_Handler+0x4>

0800255e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <UsageFault_Handler+0x4>

0800256a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002598:	f000 f9fa 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM2_IRQHandler+0x10>)
 80025a6:	f003 f88b 	bl	80056c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000208 	.word	0x20000208

080025b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <USART1_IRQHandler+0x10>)
 80025ba:	f003 fd53 	bl	8006064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000250 	.word	0x20000250

080025c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <SystemInit+0x20>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <SystemInit+0x20>)
 80025d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002600:	463b      	mov	r3, r7
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <MX_TIM2_Init+0x94>)
 800260a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800260e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <MX_TIM2_Init+0x94>)
 8002612:	f240 3247 	movw	r2, #839	; 0x347
 8002616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <MX_TIM2_Init+0x94>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800261e:	4b18      	ldr	r3, [pc, #96]	; (8002680 <MX_TIM2_Init+0x94>)
 8002620:	2263      	movs	r2, #99	; 0x63
 8002622:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <MX_TIM2_Init+0x94>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <MX_TIM2_Init+0x94>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002630:	4813      	ldr	r0, [pc, #76]	; (8002680 <MX_TIM2_Init+0x94>)
 8002632:	f002 ff85 	bl	8005540 <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800263c:	f7ff fe6e 	bl	800231c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002646:	f107 0308 	add.w	r3, r7, #8
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <MX_TIM2_Init+0x94>)
 800264e:	f003 f93f 	bl	80058d0 <HAL_TIM_ConfigClockSource>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002658:	f7ff fe60 	bl	800231c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265c:	2300      	movs	r3, #0
 800265e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002664:	463b      	mov	r3, r7
 8002666:	4619      	mov	r1, r3
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <MX_TIM2_Init+0x94>)
 800266a:	f003 fb5b 	bl	8005d24 <HAL_TIMEx_MasterConfigSynchronization>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002674:	f7ff fe52 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000208 	.word	0x20000208

08002684 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002694:	d115      	bne.n	80026c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_TIM_Base_MspInit+0x48>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <HAL_TIM_Base_MspInit+0x48>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_TIM_Base_MspInit+0x48>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	201c      	movs	r0, #28
 80026b8:	f000 fa89 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026bc:	201c      	movs	r0, #28
 80026be:	f000 faa2 	bl	8002c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026c2:	bf00      	nop
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80026d4:	2201      	movs	r2, #1
 80026d6:	4903      	ldr	r1, [pc, #12]	; (80026e4 <uart_init_rs232+0x14>)
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <uart_init_rs232+0x18>)
 80026da:	f003 fc92 	bl	8006002 <HAL_UART_Receive_IT>
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000009e 	.word	0x2000009e
 80026e8:	20000250 	.word	0x20000250

080026ec <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_UART_RxCpltCallback+0x30>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10a      	bne.n	8002714 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80026fe:	230a      	movs	r3, #10
 8002700:	2201      	movs	r2, #1
 8002702:	4907      	ldr	r1, [pc, #28]	; (8002720 <HAL_UART_RxCpltCallback+0x34>)
 8002704:	4807      	ldr	r0, [pc, #28]	; (8002724 <HAL_UART_RxCpltCallback+0x38>)
 8002706:	f003 fbea 	bl	8005ede <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800270a:	2201      	movs	r2, #1
 800270c:	4904      	ldr	r1, [pc, #16]	; (8002720 <HAL_UART_RxCpltCallback+0x34>)
 800270e:	4805      	ldr	r0, [pc, #20]	; (8002724 <HAL_UART_RxCpltCallback+0x38>)
 8002710:	f003 fc77 	bl	8006002 <HAL_UART_Receive_IT>
	}
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40011000 	.word	0x40011000
 8002720:	2000009e 	.word	0x2000009e
 8002724:	20000250 	.word	0x20000250

08002728 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800272e:	4a12      	ldr	r2, [pc, #72]	; (8002778 <MX_USART1_UART_Init+0x50>)
 8002730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002742:	2200      	movs	r2, #0
 8002744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800274e:	220c      	movs	r2, #12
 8002750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800275e:	4805      	ldr	r0, [pc, #20]	; (8002774 <MX_USART1_UART_Init+0x4c>)
 8002760:	f003 fb70 	bl	8005e44 <HAL_UART_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800276a:	f7ff fdd7 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000250 	.word	0x20000250
 8002778:	40011000 	.word	0x40011000

0800277c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1d      	ldr	r2, [pc, #116]	; (8002810 <HAL_UART_MspInit+0x94>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d134      	bne.n	8002808 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <HAL_UART_MspInit+0x98>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <HAL_UART_MspInit+0x98>)
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	6453      	str	r3, [r2, #68]	; 0x44
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <HAL_UART_MspInit+0x98>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_UART_MspInit+0x98>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_UART_MspInit+0x98>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ca:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_UART_MspInit+0x98>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027e8:	2307      	movs	r3, #7
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4809      	ldr	r0, [pc, #36]	; (8002818 <HAL_UART_MspInit+0x9c>)
 80027f4:	f000 fab4 	bl	8002d60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2100      	movs	r1, #0
 80027fc:	2025      	movs	r0, #37	; 0x25
 80027fe:	f000 f9e6 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002802:	2025      	movs	r0, #37	; 0x25
 8002804:	f000 f9ff 	bl	8002c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002808:	bf00      	nop
 800280a:	3728      	adds	r7, #40	; 0x28
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40011000 	.word	0x40011000
 8002814:	40023800 	.word	0x40023800
 8002818:	40020000 	.word	0x40020000

0800281c <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	b2db      	uxtb	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4413      	add	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	b2da      	uxtb	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	b2db      	uxtb	r3, r3
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <DEC2BCD+0x44>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	b258      	sxtb	r0, r3
 800286a:	79fa      	ldrb	r2, [r7, #7]
 800286c:	4b09      	ldr	r3, [pc, #36]	; (8002894 <DEC2BCD+0x44>)
 800286e:	fba3 1302 	umull	r1, r3, r3, r2
 8002872:	08d9      	lsrs	r1, r3, #3
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	b25b      	sxtb	r3, r3
 8002882:	4303      	orrs	r3, r0
 8002884:	b25b      	sxtb	r3, r3
 8002886:	b2db      	uxtb	r3, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	cccccccd 	.word	0xcccccccd

08002898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800289c:	480d      	ldr	r0, [pc, #52]	; (80028d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800289e:	490e      	ldr	r1, [pc, #56]	; (80028d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028a4:	e002      	b.n	80028ac <LoopCopyDataInit>

080028a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028aa:	3304      	adds	r3, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b0:	d3f9      	bcc.n	80028a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028b4:	4c0b      	ldr	r4, [pc, #44]	; (80028e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b8:	e001      	b.n	80028be <LoopFillZerobss>

080028ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028bc:	3204      	adds	r2, #4

080028be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c0:	d3fb      	bcc.n	80028ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028c2:	f7ff fe81 	bl	80025c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028c6:	f004 fb55 	bl	8006f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ca:	f7ff fc41 	bl	8002150 <main>
  bx  lr    
 80028ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80028dc:	08009fd4 	.word	0x08009fd4
  ldr r2, =_sbss
 80028e0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80028e4:	20000298 	.word	0x20000298

080028e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e8:	e7fe      	b.n	80028e8 <ADC_IRQHandler>
	...

080028ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0d      	ldr	r2, [pc, #52]	; (800292c <HAL_Init+0x40>)
 80028f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_Init+0x40>)
 8002902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <HAL_Init+0x40>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002914:	2003      	movs	r0, #3
 8002916:	f000 f94f 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291a:	200f      	movs	r0, #15
 800291c:	f000 f808 	bl	8002930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002920:	f7ff fdec 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023c00 	.word	0x40023c00

08002930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_InitTick+0x54>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_InitTick+0x58>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f967 	bl	8002c22 <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e00e      	b.n	800297c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d80a      	bhi.n	800297a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295
 800296c:	f000 f92f 	bl	8002bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <HAL_InitTick+0x5c>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000028 	.word	0x20000028
 8002988:	20000030 	.word	0x20000030
 800298c:	2000002c 	.word	0x2000002c

08002990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_IncTick+0x20>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_IncTick+0x24>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_IncTick+0x24>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000030 	.word	0x20000030
 80029b4:	20000294 	.word	0x20000294

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000294 	.word	0x20000294

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff ffee 	bl	80029b8 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_Delay+0x44>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000030 	.word	0x20000030

08002a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	60d3      	str	r3, [r2, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <__NVIC_GetPriorityGrouping+0x18>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 0307 	and.w	r3, r3, #7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db0b      	blt.n	8002aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <__NVIC_EnableIRQ+0x38>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff8e 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff29 	bl	8002a18 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff3e 	bl	8002a60 <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff8e 	bl	8002b0c <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5d 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff31 	bl	8002a7c <__NVIC_EnableIRQ>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ffa2 	bl	8002b74 <SysTick_Config>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff feb6 	bl	80029b8 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d008      	beq.n	8002c6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2280      	movs	r2, #128	; 0x80
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e052      	b.n	8002d12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0216 	bic.w	r2, r2, #22
 8002c7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <HAL_DMA_Abort+0x62>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0208 	bic.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0201 	bic.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cbc:	e013      	b.n	8002ce6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cbe:	f7ff fe7b 	bl	80029b8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d90c      	bls.n	8002ce6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e015      	b.n	8002d12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e4      	bne.n	8002cbe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	223f      	movs	r2, #63	; 0x3f
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d004      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e00c      	b.n	8002d52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2205      	movs	r2, #5
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0201 	bic.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e16b      	b.n	8003054 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	f040 815a 	bne.w	800304e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d005      	beq.n	8002db2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d130      	bne.n	8002e14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de8:	2201      	movs	r2, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 0201 	and.w	r2, r3, #1
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d017      	beq.n	8002e50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d123      	bne.n	8002ea4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	220f      	movs	r2, #15
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	08da      	lsrs	r2, r3, #3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3208      	adds	r2, #8
 8002e9e:	69b9      	ldr	r1, [r7, #24]
 8002ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	2203      	movs	r2, #3
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0203 	and.w	r2, r3, #3
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80b4 	beq.w	800304e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	4b60      	ldr	r3, [pc, #384]	; (800306c <HAL_GPIO_Init+0x30c>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	4a5f      	ldr	r2, [pc, #380]	; (800306c <HAL_GPIO_Init+0x30c>)
 8002ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_GPIO_Init+0x30c>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f02:	4a5b      	ldr	r2, [pc, #364]	; (8003070 <HAL_GPIO_Init+0x310>)
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	3302      	adds	r3, #2
 8002f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	220f      	movs	r2, #15
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_GPIO_Init+0x314>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02b      	beq.n	8002f86 <HAL_GPIO_Init+0x226>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a51      	ldr	r2, [pc, #324]	; (8003078 <HAL_GPIO_Init+0x318>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d025      	beq.n	8002f82 <HAL_GPIO_Init+0x222>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_GPIO_Init+0x31c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01f      	beq.n	8002f7e <HAL_GPIO_Init+0x21e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <HAL_GPIO_Init+0x320>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d019      	beq.n	8002f7a <HAL_GPIO_Init+0x21a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_GPIO_Init+0x324>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_GPIO_Init+0x216>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x328>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00d      	beq.n	8002f72 <HAL_GPIO_Init+0x212>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4c      	ldr	r2, [pc, #304]	; (800308c <HAL_GPIO_Init+0x32c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <HAL_GPIO_Init+0x20e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_GPIO_Init+0x330>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_GPIO_Init+0x20a>
 8002f66:	2307      	movs	r3, #7
 8002f68:	e00e      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	e00c      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00a      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f72:	2305      	movs	r3, #5
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f76:	2304      	movs	r3, #4
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x228>
 8002f86:	2300      	movs	r3, #0
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f002 0203 	and.w	r2, r2, #3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4093      	lsls	r3, r2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f98:	4935      	ldr	r1, [pc, #212]	; (8003070 <HAL_GPIO_Init+0x310>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <HAL_GPIO_Init+0x334>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fca:	4a32      	ldr	r2, [pc, #200]	; (8003094 <HAL_GPIO_Init+0x334>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_GPIO_Init+0x334>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_GPIO_Init+0x334>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_GPIO_Init+0x334>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301e:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_GPIO_Init+0x334>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <HAL_GPIO_Init+0x334>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003048:	4a12      	ldr	r2, [pc, #72]	; (8003094 <HAL_GPIO_Init+0x334>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	f67f ae90 	bls.w	8002d7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40013800 	.word	0x40013800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020400 	.word	0x40020400
 800307c:	40020800 	.word	0x40020800
 8003080:	40020c00 	.word	0x40020c00
 8003084:	40021000 	.word	0x40021000
 8003088:	40021400 	.word	0x40021400
 800308c:	40021800 	.word	0x40021800
 8003090:	40021c00 	.word	0x40021c00
 8003094:	40013c00 	.word	0x40013c00

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030dc:	887a      	ldrh	r2, [r7, #2]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	041a      	lsls	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43d9      	mvns	r1, r3
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	400b      	ands	r3, r1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e12b      	b.n	800336a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe faa8 	bl	800167c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003164:	f001 fbd8 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8003168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4a81      	ldr	r2, [pc, #516]	; (8003374 <HAL_I2C_Init+0x274>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d807      	bhi.n	8003184 <HAL_I2C_Init+0x84>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a80      	ldr	r2, [pc, #512]	; (8003378 <HAL_I2C_Init+0x278>)
 8003178:	4293      	cmp	r3, r2
 800317a:	bf94      	ite	ls
 800317c:	2301      	movls	r3, #1
 800317e:	2300      	movhi	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e006      	b.n	8003192 <HAL_I2C_Init+0x92>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a7d      	ldr	r2, [pc, #500]	; (800337c <HAL_I2C_Init+0x27c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0e7      	b.n	800336a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a78      	ldr	r2, [pc, #480]	; (8003380 <HAL_I2C_Init+0x280>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0c9b      	lsrs	r3, r3, #18
 80031a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a6a      	ldr	r2, [pc, #424]	; (8003374 <HAL_I2C_Init+0x274>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d802      	bhi.n	80031d4 <HAL_I2C_Init+0xd4>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3301      	adds	r3, #1
 80031d2:	e009      	b.n	80031e8 <HAL_I2C_Init+0xe8>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4a69      	ldr	r2, [pc, #420]	; (8003384 <HAL_I2C_Init+0x284>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	3301      	adds	r3, #1
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	495c      	ldr	r1, [pc, #368]	; (8003374 <HAL_I2C_Init+0x274>)
 8003204:	428b      	cmp	r3, r1
 8003206:	d819      	bhi.n	800323c <HAL_I2C_Init+0x13c>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e59      	subs	r1, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fbb1 f3f3 	udiv	r3, r1, r3
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	f640 73fc 	movw	r3, #4092	; 0xffc
 800321c:	400b      	ands	r3, r1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_I2C_Init+0x138>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1e59      	subs	r1, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	e051      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 8003238:	2304      	movs	r3, #4
 800323a:	e04f      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <HAL_I2C_Init+0x168>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e58      	subs	r0, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e012      	b.n	800328e <HAL_I2C_Init+0x18e>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	0099      	lsls	r1, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	fbb0 f3f3 	udiv	r3, r0, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Init+0x196>
 8003292:	2301      	movs	r3, #1
 8003294:	e022      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10e      	bne.n	80032bc <HAL_I2C_Init+0x1bc>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1e58      	subs	r0, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	440b      	add	r3, r1
 80032ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	e00f      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	0099      	lsls	r1, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	6809      	ldr	r1, [r1, #0]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800330a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6911      	ldr	r1, [r2, #16]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68d2      	ldr	r2, [r2, #12]
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	000186a0 	.word	0x000186a0
 8003378:	001e847f 	.word	0x001e847f
 800337c:	003d08ff 	.word	0x003d08ff
 8003380:	431bde83 	.word	0x431bde83
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a2:	f7ff fb09 	bl	80029b8 <HAL_GetTick>
 80033a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	f040 80d9 	bne.w	8003568 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2319      	movs	r3, #25
 80033bc:	2201      	movs	r2, #1
 80033be:	496d      	ldr	r1, [pc, #436]	; (8003574 <HAL_I2C_Mem_Write+0x1ec>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fc7f 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0cc      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Write+0x56>
 80033da:	2302      	movs	r3, #2
 80033dc:	e0c5      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2221      	movs	r2, #33	; 0x21
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_I2C_Mem_Write+0x1f0>)
 8003444:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003446:	88f8      	ldrh	r0, [r7, #6]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4603      	mov	r3, r0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fab6 	bl	80039c8 <I2C_RequestMemoryWrite>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d052      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e081      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fd00 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00d      	beq.n	8003492 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b04      	cmp	r3, #4
 800347c:	d107      	bne.n	800348e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800348c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e06b      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	781a      	ldrb	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b01      	subs	r3, #1
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d11b      	bne.n	8003508 <HAL_I2C_Mem_Write+0x180>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d017      	beq.n	8003508 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	781a      	ldrb	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1aa      	bne.n	8003466 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 fcec 	bl	8003ef2 <I2C_WaitOnBTFFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00d      	beq.n	800353c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	2b04      	cmp	r3, #4
 8003526:	d107      	bne.n	8003538 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003536:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e016      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	00100002 	.word	0x00100002
 8003578:	ffff0000 	.word	0xffff0000

0800357c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08c      	sub	sp, #48	; 0x30
 8003580:	af02      	add	r7, sp, #8
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	817b      	strh	r3, [r7, #10]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003596:	f7ff fa0f 	bl	80029b8 <HAL_GetTick>
 800359a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	f040 8208 	bne.w	80039ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2319      	movs	r3, #25
 80035b0:	2201      	movs	r2, #1
 80035b2:	497b      	ldr	r1, [pc, #492]	; (80037a0 <HAL_I2C_Mem_Read+0x224>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fb85 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035c0:	2302      	movs	r3, #2
 80035c2:	e1fb      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2C_Mem_Read+0x56>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e1f4      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d007      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2222      	movs	r2, #34	; 0x22
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a5b      	ldr	r2, [pc, #364]	; (80037a4 <HAL_I2C_Mem_Read+0x228>)
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800363a:	88f8      	ldrh	r0, [r7, #6]
 800363c:	893a      	ldrh	r2, [r7, #8]
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4603      	mov	r3, r0
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 fa52 	bl	8003af4 <I2C_RequestMemoryRead>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e1b0      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e184      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	2b01      	cmp	r3, #1
 8003690:	d11b      	bne.n	80036ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	e164      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d11b      	bne.n	800370a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	e144      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003720:	e138      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b03      	cmp	r3, #3
 8003728:	f200 80f1 	bhi.w	800390e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003730:	2b01      	cmp	r3, #1
 8003732:	d123      	bne.n	800377c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 fc1b 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e139      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29b      	uxth	r3, r3
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800377a:	e10b      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003780:	2b02      	cmp	r3, #2
 8003782:	d14e      	bne.n	8003822 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	2200      	movs	r2, #0
 800378c:	4906      	ldr	r1, [pc, #24]	; (80037a8 <HAL_I2C_Mem_Read+0x22c>)
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa98 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e10e      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
 800379e:	bf00      	nop
 80037a0:	00100002 	.word	0x00100002
 80037a4:	ffff0000 	.word	0xffff0000
 80037a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003820:	e0b8      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	2200      	movs	r2, #0
 800382a:	4966      	ldr	r1, [pc, #408]	; (80039c4 <HAL_I2C_Mem_Read+0x448>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fa49 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0bf      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003884:	2200      	movs	r2, #0
 8003886:	494f      	ldr	r1, [pc, #316]	; (80039c4 <HAL_I2C_Mem_Read+0x448>)
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fa1b 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e091      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800390c:	e042      	b.n	8003994 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fb2e 	bl	8003f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e04c      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d118      	bne.n	8003994 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	f47f aec2 	bne.w	8003722 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	e000      	b.n	80039bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039ba:	2302      	movs	r3, #2
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	00010004 	.word	0x00010004

080039c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	4608      	mov	r0, r1
 80039d2:	4611      	mov	r1, r2
 80039d4:	461a      	mov	r2, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	817b      	strh	r3, [r7, #10]
 80039da:	460b      	mov	r3, r1
 80039dc:	813b      	strh	r3, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 f960 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a18:	d103      	bne.n	8003a22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e05f      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	492d      	ldr	r1, [pc, #180]	; (8003af0 <I2C_RequestMemoryWrite+0x128>)
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f998 	bl	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e04c      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	6a39      	ldr	r1, [r7, #32]
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fa02 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d107      	bne.n	8003a8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e02b      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a94:	893b      	ldrh	r3, [r7, #8]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	611a      	str	r2, [r3, #16]
 8003a9e:	e021      	b.n	8003ae4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa0:	893b      	ldrh	r3, [r7, #8]
 8003aa2:	0a1b      	lsrs	r3, r3, #8
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f9dc 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d107      	bne.n	8003ad6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e005      	b.n	8003ae6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ada:	893b      	ldrh	r3, [r7, #8]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	00010002 	.word	0x00010002

08003af4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af02      	add	r7, sp, #8
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	461a      	mov	r2, r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	817b      	strh	r3, [r7, #10]
 8003b06:	460b      	mov	r3, r1
 8003b08:	813b      	strh	r3, [r7, #8]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f8c2 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b54:	d103      	bne.n	8003b5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0aa      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b62:	897b      	ldrh	r3, [r7, #10]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	6a3a      	ldr	r2, [r7, #32]
 8003b76:	4952      	ldr	r1, [pc, #328]	; (8003cc0 <I2C_RequestMemoryRead+0x1cc>)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f8fa 	bl	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e097      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba0:	6a39      	ldr	r1, [r7, #32]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f964 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00d      	beq.n	8003bca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d107      	bne.n	8003bc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e076      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	611a      	str	r2, [r3, #16]
 8003bda:	e021      	b.n	8003c20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	6a39      	ldr	r1, [r7, #32]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f93e 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00d      	beq.n	8003c16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d107      	bne.n	8003c12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e050      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c16:	893b      	ldrh	r3, [r7, #8]
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c22:	6a39      	ldr	r1, [r7, #32]
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f923 	bl	8003e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00d      	beq.n	8003c4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d107      	bne.n	8003c48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e035      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f82b 	bl	8003cc4 <I2C_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c82:	d103      	bne.n	8003c8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e013      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c90:	897b      	ldrh	r3, [r7, #10]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	6a3a      	ldr	r2, [r7, #32]
 8003ca4:	4906      	ldr	r1, [pc, #24]	; (8003cc0 <I2C_RequestMemoryRead+0x1cc>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f863 	bl	8003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	00010002 	.word	0x00010002

08003cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd4:	e025      	b.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d021      	beq.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fe6b 	bl	80029b8 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e023      	b.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10d      	bne.n	8003d48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4013      	ands	r3, r2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf0c      	ite	eq
 8003d3e:	2301      	moveq	r3, #1
 8003d40:	2300      	movne	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	e00c      	b.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bf0c      	ite	eq
 8003d5a:	2301      	moveq	r3, #1
 8003d5c:	2300      	movne	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d0b6      	beq.n	8003cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d80:	e051      	b.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d90:	d123      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003daa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e046      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de0:	d021      	beq.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fde9 	bl	80029b8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f043 0220 	orr.w	r2, r3, #32
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e020      	b.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d10c      	bne.n	8003e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	43da      	mvns	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	e00b      	b.n	8003e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	43da      	mvns	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4013      	ands	r3, r2
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d18d      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e7c:	e02d      	b.n	8003eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8ce 	bl	8004020 <I2C_IsAcknowledgeFailed>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e02d      	b.n	8003eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e94:	d021      	beq.n	8003eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e96:	f7fe fd8f 	bl	80029b8 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d116      	bne.n	8003eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e007      	b.n	8003eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d1ca      	bne.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	60f8      	str	r0, [r7, #12]
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003efe:	e02d      	b.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f88d 	bl	8004020 <I2C_IsAcknowledgeFailed>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e02d      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d021      	beq.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fe fd4e 	bl	80029b8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d116      	bne.n	8003f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e007      	b.n	8003f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d1ca      	bne.n	8003f00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f80:	e042      	b.n	8004008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d119      	bne.n	8003fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0210 	mvn.w	r2, #16
 8003f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e029      	b.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe fcf8 	bl	80029b8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d1b5      	bne.n	8003f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004036:	d11b      	bne.n	8004070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f043 0204 	orr.w	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e264      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	4ba3      	ldr	r3, [pc, #652]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040aa:	4ba0      	ldr	r3, [pc, #640]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d112      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b9d      	ldr	r3, [pc, #628]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b99      	ldr	r3, [pc, #612]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e23f      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b91      	ldr	r3, [pc, #580]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a90      	ldr	r2, [pc, #576]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b8b      	ldr	r3, [pc, #556]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a8a      	ldr	r2, [pc, #552]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b88      	ldr	r3, [pc, #544]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a87      	ldr	r2, [pc, #540]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b84      	ldr	r3, [pc, #528]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a83      	ldr	r2, [pc, #524]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b81      	ldr	r3, [pc, #516]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a80      	ldr	r2, [pc, #512]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe fc3e 	bl	80029b8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004140:	f7fe fc3a 	bl	80029b8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e204      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fe fc2a 	bl	80029b8 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe fc26 	bl	80029b8 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1f0      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b6c      	ldr	r3, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	4b65      	ldr	r3, [pc, #404]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b62      	ldr	r3, [pc, #392]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b5f      	ldr	r3, [pc, #380]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b5c      	ldr	r3, [pc, #368]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c4      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4952      	ldr	r1, [pc, #328]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe fbdf 	bl	80029b8 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe fbdb 	bl	80029b8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a5      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b46      	ldr	r3, [pc, #280]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b43      	ldr	r3, [pc, #268]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4940      	ldr	r1, [pc, #256]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b3f      	ldr	r3, [pc, #252]	; (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fe fbbe 	bl	80029b8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004240:	f7fe fbba 	bl	80029b8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e184      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b36      	ldr	r3, [pc, #216]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d030      	beq.n	80042cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b30      	ldr	r3, [pc, #192]	; (8004334 <HAL_RCC_OscConfig+0x2b4>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe fb9e 	bl	80029b8 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe fb9a 	bl	80029b8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e164      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b26      	ldr	r3, [pc, #152]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
 800429e:	e015      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b24      	ldr	r3, [pc, #144]	; (8004334 <HAL_RCC_OscConfig+0x2b4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fe fb87 	bl	80029b8 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fe fb83 	bl	80029b8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e14d      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80a0 	beq.w	800441a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10f      	bne.n	800430a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004306:	2301      	movs	r3, #1
 8004308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <HAL_RCC_OscConfig+0x2b8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d121      	bne.n	800435a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_OscConfig+0x2b8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a07      	ldr	r2, [pc, #28]	; (8004338 <HAL_RCC_OscConfig+0x2b8>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fe fb49 	bl	80029b8 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	e011      	b.n	800434e <HAL_RCC_OscConfig+0x2ce>
 800432a:	bf00      	nop
 800432c:	40023800 	.word	0x40023800
 8004330:	42470000 	.word	0x42470000
 8004334:	42470e80 	.word	0x42470e80
 8004338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433c:	f7fe fb3c 	bl	80029b8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e106      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	4b85      	ldr	r3, [pc, #532]	; (8004564 <HAL_RCC_OscConfig+0x4e4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d106      	bne.n	8004370 <HAL_RCC_OscConfig+0x2f0>
 8004362:	4b81      	ldr	r3, [pc, #516]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a80      	ldr	r2, [pc, #512]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	e01c      	b.n	80043aa <HAL_RCC_OscConfig+0x32a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b05      	cmp	r3, #5
 8004376:	d10c      	bne.n	8004392 <HAL_RCC_OscConfig+0x312>
 8004378:	4b7b      	ldr	r3, [pc, #492]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	4b78      	ldr	r3, [pc, #480]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
 8004390:	e00b      	b.n	80043aa <HAL_RCC_OscConfig+0x32a>
 8004392:	4b75      	ldr	r3, [pc, #468]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a74      	ldr	r2, [pc, #464]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
 800439e:	4b72      	ldr	r3, [pc, #456]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a71      	ldr	r2, [pc, #452]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 80043a4:	f023 0304 	bic.w	r3, r3, #4
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d015      	beq.n	80043de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fe fb01 	bl	80029b8 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ba:	f7fe fafd 	bl	80029b8 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e0c5      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	4b65      	ldr	r3, [pc, #404]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0ee      	beq.n	80043ba <HAL_RCC_OscConfig+0x33a>
 80043dc:	e014      	b.n	8004408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043de:	f7fe faeb 	bl	80029b8 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e4:	e00a      	b.n	80043fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fe fae7 	bl	80029b8 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0af      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fc:	4b5a      	ldr	r3, [pc, #360]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 80043fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1ee      	bne.n	80043e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d105      	bne.n	800441a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800440e:	4b56      	ldr	r3, [pc, #344]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a55      	ldr	r2, [pc, #340]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 809b 	beq.w	800455a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004424:	4b50      	ldr	r3, [pc, #320]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b08      	cmp	r3, #8
 800442e:	d05c      	beq.n	80044ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d141      	bne.n	80044bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_RCC_OscConfig+0x4ec>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fe fabb 	bl	80029b8 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004446:	f7fe fab7 	bl	80029b8 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e081      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004458:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	019b      	lsls	r3, r3, #6
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	3b01      	subs	r3, #1
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	4937      	ldr	r1, [pc, #220]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448e:	4b37      	ldr	r3, [pc, #220]	; (800456c <HAL_RCC_OscConfig+0x4ec>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fe fa90 	bl	80029b8 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449c:	f7fe fa8c 	bl	80029b8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e056      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	4b2e      	ldr	r3, [pc, #184]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x41c>
 80044ba:	e04e      	b.n	800455a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_RCC_OscConfig+0x4ec>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c2:	f7fe fa79 	bl	80029b8 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ca:	f7fe fa75 	bl	80029b8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e03f      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044dc:	4b22      	ldr	r3, [pc, #136]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x44a>
 80044e8:	e037      	b.n	800455a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e032      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044f6:	4b1c      	ldr	r3, [pc, #112]	; (8004568 <HAL_RCC_OscConfig+0x4e8>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d028      	beq.n	8004556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d121      	bne.n	8004556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d11a      	bne.n	8004556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004526:	4013      	ands	r3, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800452c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	3b01      	subs	r3, #1
 8004540:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d107      	bne.n	8004556 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004552:	429a      	cmp	r2, r3
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40007000 	.word	0x40007000
 8004568:	40023800 	.word	0x40023800
 800456c:	42470060 	.word	0x42470060

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0cc      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d90c      	bls.n	80045ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a58      	ldr	r2, [pc, #352]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d044      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d119      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e067      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4934      	ldr	r1, [pc, #208]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fe f9aa 	bl	80029b8 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fe f9a6 	bl	80029b8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d20c      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f90a 	bl	8002930 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023c00 	.word	0x40023c00
 800472c:	40023800 	.word	0x40023800
 8004730:	08009fac 	.word	0x08009fac
 8004734:	20000028 	.word	0x20000028
 8004738:	2000002c 	.word	0x2000002c

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	607b      	str	r3, [r7, #4]
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	2300      	movs	r3, #0
 800474e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004754:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 80bd 	bhi.w	80048e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 800476a:	2b04      	cmp	r3, #4
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3a>
 800476e:	e0b7      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b61      	ldr	r3, [pc, #388]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004772:	60bb      	str	r3, [r7, #8]
       break;
 8004774:	e0b7      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004776:	4b61      	ldr	r3, [pc, #388]	; (80048fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004778:	60bb      	str	r3, [r7, #8]
      break;
 800477a:	e0b4      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477c:	4b5d      	ldr	r3, [pc, #372]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004784:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004786:	4b5b      	ldr	r3, [pc, #364]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04d      	beq.n	800482e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	461a      	mov	r2, r3
 800479a:	f04f 0300 	mov.w	r3, #0
 800479e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	ea02 0800 	and.w	r8, r2, r0
 80047aa:	ea03 0901 	and.w	r9, r3, r1
 80047ae:	4640      	mov	r0, r8
 80047b0:	4649      	mov	r1, r9
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	014b      	lsls	r3, r1, #5
 80047bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047c0:	0142      	lsls	r2, r0, #5
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	ebb0 0008 	subs.w	r0, r0, r8
 80047ca:	eb61 0109 	sbc.w	r1, r1, r9
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	018b      	lsls	r3, r1, #6
 80047d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047dc:	0182      	lsls	r2, r0, #6
 80047de:	1a12      	subs	r2, r2, r0
 80047e0:	eb63 0301 	sbc.w	r3, r3, r1
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	00d9      	lsls	r1, r3, #3
 80047ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047f2:	00d0      	lsls	r0, r2, #3
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	eb12 0208 	adds.w	r2, r2, r8
 80047fc:	eb43 0309 	adc.w	r3, r3, r9
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	f04f 0100 	mov.w	r1, #0
 8004808:	0259      	lsls	r1, r3, #9
 800480a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800480e:	0250      	lsls	r0, r2, #9
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	461a      	mov	r2, r3
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	f7fb fcda 	bl	80001d8 <__aeabi_uldivmod>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4613      	mov	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e04a      	b.n	80048c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482e:	4b31      	ldr	r3, [pc, #196]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	099b      	lsrs	r3, r3, #6
 8004834:	461a      	mov	r2, r3
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800483e:	f04f 0100 	mov.w	r1, #0
 8004842:	ea02 0400 	and.w	r4, r2, r0
 8004846:	ea03 0501 	and.w	r5, r3, r1
 800484a:	4620      	mov	r0, r4
 800484c:	4629      	mov	r1, r5
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	014b      	lsls	r3, r1, #5
 8004858:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800485c:	0142      	lsls	r2, r0, #5
 800485e:	4610      	mov	r0, r2
 8004860:	4619      	mov	r1, r3
 8004862:	1b00      	subs	r0, r0, r4
 8004864:	eb61 0105 	sbc.w	r1, r1, r5
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	018b      	lsls	r3, r1, #6
 8004872:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004876:	0182      	lsls	r2, r0, #6
 8004878:	1a12      	subs	r2, r2, r0
 800487a:	eb63 0301 	sbc.w	r3, r3, r1
 800487e:	f04f 0000 	mov.w	r0, #0
 8004882:	f04f 0100 	mov.w	r1, #0
 8004886:	00d9      	lsls	r1, r3, #3
 8004888:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800488c:	00d0      	lsls	r0, r2, #3
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	1912      	adds	r2, r2, r4
 8004894:	eb45 0303 	adc.w	r3, r5, r3
 8004898:	f04f 0000 	mov.w	r0, #0
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	0299      	lsls	r1, r3, #10
 80048a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048a6:	0290      	lsls	r0, r2, #10
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f04f 0300 	mov.w	r3, #0
 80048b8:	f7fb fc8e 	bl	80001d8 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4613      	mov	r3, r2
 80048c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	3301      	adds	r3, #1
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048dc:	60bb      	str	r3, [r7, #8]
      break;
 80048de:	e002      	b.n	80048e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048e2:	60bb      	str	r3, [r7, #8]
      break;
 80048e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e6:	68bb      	ldr	r3, [r7, #8]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	007a1200 	.word	0x007a1200

08004900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000028 	.word	0x20000028

08004918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800491c:	f7ff fff0 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0a9b      	lsrs	r3, r3, #10
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4903      	ldr	r1, [pc, #12]	; (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40023800 	.word	0x40023800
 800493c:	08009fbc 	.word	0x08009fbc

08004940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004944:	f7ff ffdc 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0b5b      	lsrs	r3, r3, #13
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	08009fbc 	.word	0x08009fbc

08004968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e07b      	b.n	8004a72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498a:	d009      	beq.n	80049a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]
 8004992:	e005      	b.n	80049a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fd fd56 	bl	800246c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	ea42 0103 	orr.w	r1, r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	f003 0104 	and.w	r1, r3, #4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	f003 0210 	and.w	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b088      	sub	sp, #32
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_SPI_Transmit+0x22>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e126      	b.n	8004cea <HAL_SPI_Transmit+0x270>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa4:	f7fd ff88 	bl	80029b8 <HAL_GetTick>
 8004aa8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004abe:	e10b      	b.n	8004cd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Transmit+0x52>
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d102      	bne.n	8004ad2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ad0:	e102      	b.n	8004cd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b18:	d10f      	bne.n	8004b3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b40      	cmp	r3, #64	; 0x40
 8004b46:	d007      	beq.n	8004b58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b60:	d14b      	bne.n	8004bfa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_SPI_Transmit+0xf6>
 8004b6a:	8afb      	ldrh	r3, [r7, #22]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d13e      	bne.n	8004bee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	881a      	ldrh	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	1c9a      	adds	r2, r3, #2
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b94:	e02b      	b.n	8004bee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d112      	bne.n	8004bca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	881a      	ldrh	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	1c9a      	adds	r2, r3, #2
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc8:	e011      	b.n	8004bee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bca:	f7fd fef5 	bl	80029b8 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d803      	bhi.n	8004be2 <HAL_SPI_Transmit+0x168>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d102      	bne.n	8004be8 <HAL_SPI_Transmit+0x16e>
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bec:	e074      	b.n	8004cd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ce      	bne.n	8004b96 <HAL_SPI_Transmit+0x11c>
 8004bf8:	e04c      	b.n	8004c94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Transmit+0x18e>
 8004c02:	8afb      	ldrh	r3, [r7, #22]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d140      	bne.n	8004c8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c2e:	e02c      	b.n	8004c8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d113      	bne.n	8004c66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	330c      	adds	r3, #12
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c64:	e011      	b.n	8004c8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c66:	f7fd fea7 	bl	80029b8 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d803      	bhi.n	8004c7e <HAL_SPI_Transmit+0x204>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d102      	bne.n	8004c84 <HAL_SPI_Transmit+0x20a>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d102      	bne.n	8004c8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c88:	e026      	b.n	8004cd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1cd      	bne.n	8004c30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 fbcb 	bl	8005434 <SPI_EndRxTxTransaction>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e000      	b.n	8004cd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3720      	adds	r7, #32
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af02      	add	r7, sp, #8
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0e:	d112      	bne.n	8004d36 <HAL_SPI_Receive+0x44>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10e      	bne.n	8004d36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2204      	movs	r2, #4
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d20:	88fa      	ldrh	r2, [r7, #6]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	68b9      	ldr	r1, [r7, #8]
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f8f1 	bl	8004f14 <HAL_SPI_TransmitReceive>
 8004d32:	4603      	mov	r3, r0
 8004d34:	e0ea      	b.n	8004f0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_SPI_Receive+0x52>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e0e3      	b.n	8004f0c <HAL_SPI_Receive+0x21a>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d4c:	f7fd fe34 	bl	80029b8 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d62:	e0ca      	b.n	8004efa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Receive+0x7e>
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d74:	e0c1      	b.n	8004efa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	88fa      	ldrh	r2, [r7, #6]
 8004d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbc:	d10f      	bne.n	8004dde <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d007      	beq.n	8004dfc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d162      	bne.n	8004eca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e04:	e02e      	b.n	8004e64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d115      	bne.n	8004e40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f103 020c 	add.w	r2, r3, #12
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	7812      	ldrb	r2, [r2, #0]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e3e:	e011      	b.n	8004e64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e40:	f7fd fdba 	bl	80029b8 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d803      	bhi.n	8004e58 <HAL_SPI_Receive+0x166>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d102      	bne.n	8004e5e <HAL_SPI_Receive+0x16c>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d102      	bne.n	8004e64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e62:	e04a      	b.n	8004efa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cb      	bne.n	8004e06 <HAL_SPI_Receive+0x114>
 8004e6e:	e031      	b.n	8004ed4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d113      	bne.n	8004ea6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e88:	b292      	uxth	r2, r2
 8004e8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ea4:	e011      	b.n	8004eca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea6:	f7fd fd87 	bl	80029b8 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d803      	bhi.n	8004ebe <HAL_SPI_Receive+0x1cc>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d102      	bne.n	8004ec4 <HAL_SPI_Receive+0x1d2>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ec8:	e017      	b.n	8004efa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1cd      	bne.n	8004e70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fa45 	bl	8005368 <SPI_EndRxTransaction>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
 8004ef6:	e000      	b.n	8004efa <HAL_SPI_Receive+0x208>
  }

error :
 8004ef8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08c      	sub	sp, #48	; 0x30
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f22:	2301      	movs	r3, #1
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_SPI_TransmitReceive+0x26>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e18a      	b.n	8005250 <HAL_SPI_TransmitReceive+0x33c>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f42:	f7fd fd39 	bl	80029b8 <HAL_GetTick>
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f58:	887b      	ldrh	r3, [r7, #2]
 8004f5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d00f      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x70>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f6a:	d107      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d103      	bne.n	8004f7c <HAL_SPI_TransmitReceive+0x68>
 8004f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d003      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f82:	e15b      	b.n	800523c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d005      	beq.n	8004f96 <HAL_SPI_TransmitReceive+0x82>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_SPI_TransmitReceive+0x82>
 8004f90:	887b      	ldrh	r3, [r7, #2]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f9c:	e14e      	b.n	800523c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d003      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2205      	movs	r2, #5
 8004fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	887a      	ldrh	r2, [r7, #2]
 8004fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	887a      	ldrh	r2, [r7, #2]
 8004fc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	887a      	ldrh	r2, [r7, #2]
 8004fda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d007      	beq.n	8005006 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005004:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800500e:	d178      	bne.n	8005102 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_SPI_TransmitReceive+0x10a>
 8005018:	8b7b      	ldrh	r3, [r7, #26]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d166      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	881a      	ldrh	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	1c9a      	adds	r2, r3, #2
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005042:	e053      	b.n	80050ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b02      	cmp	r3, #2
 8005050:	d11b      	bne.n	800508a <HAL_SPI_TransmitReceive+0x176>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d016      	beq.n	800508a <HAL_SPI_TransmitReceive+0x176>
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505e:	2b01      	cmp	r3, #1
 8005060:	d113      	bne.n	800508a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	881a      	ldrh	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	1c9a      	adds	r2, r3, #2
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d119      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x1b8>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d014      	beq.n	80050cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	b292      	uxth	r2, r2
 80050ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050c8:	2301      	movs	r3, #1
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050cc:	f7fd fc74 	bl	80029b8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050d8:	429a      	cmp	r2, r3
 80050da:	d807      	bhi.n	80050ec <HAL_SPI_TransmitReceive+0x1d8>
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d003      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050ea:	e0a7      	b.n	800523c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1a6      	bne.n	8005044 <HAL_SPI_TransmitReceive+0x130>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1a1      	bne.n	8005044 <HAL_SPI_TransmitReceive+0x130>
 8005100:	e07c      	b.n	80051fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x1fc>
 800510a:	8b7b      	ldrh	r3, [r7, #26]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d16b      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	7812      	ldrb	r2, [r2, #0]
 800511c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005136:	e057      	b.n	80051e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b02      	cmp	r3, #2
 8005144:	d11c      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x26c>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d017      	beq.n	8005180 <HAL_SPI_TransmitReceive+0x26c>
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2b01      	cmp	r3, #1
 8005154:	d114      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005172:	b29b      	uxth	r3, r3
 8005174:	3b01      	subs	r3, #1
 8005176:	b29a      	uxth	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b01      	cmp	r3, #1
 800518c:	d119      	bne.n	80051c2 <HAL_SPI_TransmitReceive+0x2ae>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d014      	beq.n	80051c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051be:	2301      	movs	r3, #1
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051c2:	f7fd fbf9 	bl	80029b8 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d803      	bhi.n	80051da <HAL_SPI_TransmitReceive+0x2c6>
 80051d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d102      	bne.n	80051e0 <HAL_SPI_TransmitReceive+0x2cc>
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d103      	bne.n	80051e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051e6:	e029      	b.n	800523c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1a2      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x224>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d19d      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f917 	bl	8005434 <SPI_EndRxTxTransaction>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d006      	beq.n	800521a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005218:	e010      	b.n	800523c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10b      	bne.n	800523a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	e000      	b.n	800523c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800523a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800524c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005250:	4618      	mov	r0, r3
 8005252:	3730      	adds	r7, #48	; 0x30
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005268:	f7fd fba6 	bl	80029b8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	4413      	add	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005278:	f7fd fb9e 	bl	80029b8 <HAL_GetTick>
 800527c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800527e:	4b39      	ldr	r3, [pc, #228]	; (8005364 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	015b      	lsls	r3, r3, #5
 8005284:	0d1b      	lsrs	r3, r3, #20
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	fb02 f303 	mul.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800528e:	e054      	b.n	800533a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d050      	beq.n	800533a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005298:	f7fd fb8e 	bl	80029b8 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d902      	bls.n	80052ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d13d      	bne.n	800532a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c6:	d111      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d0:	d004      	beq.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052da:	d107      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052f4:	d10f      	bne.n	8005316 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e017      	b.n	800535a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3b01      	subs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4013      	ands	r3, r2
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	bf0c      	ite	eq
 800534a:	2301      	moveq	r3, #1
 800534c:	2300      	movne	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	429a      	cmp	r2, r3
 8005356:	d19b      	bne.n	8005290 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000028 	.word	0x20000028

08005368 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537c:	d111      	bne.n	80053a2 <SPI_EndRxTransaction+0x3a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005386:	d004      	beq.n	8005392 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	d107      	bne.n	80053a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d12a      	bne.n	8005402 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b4:	d012      	beq.n	80053dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	2180      	movs	r1, #128	; 0x80
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ff49 	bl	8005258 <SPI_WaitFlagStateUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02d      	beq.n	8005428 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	f043 0220 	orr.w	r2, r3, #32
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e026      	b.n	800542a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2200      	movs	r2, #0
 80053e4:	2101      	movs	r1, #1
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f7ff ff36 	bl	8005258 <SPI_WaitFlagStateUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01a      	beq.n	8005428 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	f043 0220 	orr.w	r2, r3, #32
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e013      	b.n	800542a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2200      	movs	r2, #0
 800540a:	2101      	movs	r1, #1
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff ff23 	bl	8005258 <SPI_WaitFlagStateUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	f043 0220 	orr.w	r2, r3, #32
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e000      	b.n	800542a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <SPI_EndRxTxTransaction+0x7c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <SPI_EndRxTxTransaction+0x80>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0d5b      	lsrs	r3, r3, #21
 800544c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005450:	fb02 f303 	mul.w	r3, r2, r3
 8005454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545e:	d112      	bne.n	8005486 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2200      	movs	r2, #0
 8005468:	2180      	movs	r1, #128	; 0x80
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff fef4 	bl	8005258 <SPI_WaitFlagStateUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d016      	beq.n	80054a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	f043 0220 	orr.w	r2, r3, #32
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e00f      	b.n	80054a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	3b01      	subs	r3, #1
 8005490:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	2b80      	cmp	r3, #128	; 0x80
 800549e:	d0f2      	beq.n	8005486 <SPI_EndRxTxTransaction+0x52>
 80054a0:	e000      	b.n	80054a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80054a2:	bf00      	nop
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000028 	.word	0x20000028
 80054b4:	165e9f81 	.word	0x165e9f81

080054b8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e034      	b.n	8005538 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d106      	bne.n	80054e8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f7fb ff9a 	bl	800141c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3308      	adds	r3, #8
 80054f0:	4619      	mov	r1, r3
 80054f2:	4610      	mov	r0, r2
 80054f4:	f001 fc6e 	bl	8006dd4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	461a      	mov	r2, r3
 8005502:	68b9      	ldr	r1, [r7, #8]
 8005504:	f001 fcb8 	bl	8006e78 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6858      	ldr	r0, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	f001 fced 	bl	8006ef4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	6892      	ldr	r2, [r2, #8]
 8005522:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	6892      	ldr	r2, [r2, #8]
 800552e:	f041 0101 	orr.w	r1, r1, #1
 8005532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e041      	b.n	80055d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fd f88c 	bl	8002684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fa96 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d001      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e04e      	b.n	8005696 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a23      	ldr	r2, [pc, #140]	; (80056a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d022      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005622:	d01d      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d018      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00e      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1b      	ldr	r2, [pc, #108]	; (80056b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d009      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d004      	beq.n	8005660 <HAL_TIM_Base_Start_IT+0x80>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a18      	ldr	r2, [pc, #96]	; (80056bc <HAL_TIM_Base_Start_IT+0xdc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d111      	bne.n	8005684 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2b06      	cmp	r3, #6
 8005670:	d010      	beq.n	8005694 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005682:	e007      	b.n	8005694 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40000c00 	.word	0x40000c00
 80056b4:	40010400 	.word	0x40010400
 80056b8:	40014000 	.word	0x40014000
 80056bc:	40001800 	.word	0x40001800

080056c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d122      	bne.n	800571c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d11b      	bne.n	800571c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0202 	mvn.w	r2, #2
 80056ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f9b5 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9a7 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f9b8 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d122      	bne.n	8005770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b04      	cmp	r3, #4
 8005736:	d11b      	bne.n	8005770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0204 	mvn.w	r2, #4
 8005740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2202      	movs	r2, #2
 8005746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f98b 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 800575c:	e005      	b.n	800576a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f97d 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f98e 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b08      	cmp	r3, #8
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b08      	cmp	r3, #8
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0208 	mvn.w	r2, #8
 8005794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2204      	movs	r2, #4
 800579a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f961 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f953 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f964 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0210 	mvn.w	r2, #16
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2208      	movs	r2, #8
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f937 	bl	8005a72 <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f929 	bl	8005a5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f93a 	bl	8005a86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d10e      	bne.n	8005844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d107      	bne.n	8005844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0201 	mvn.w	r2, #1
 800583c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fc fd98 	bl	8002374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800584e:	2b80      	cmp	r3, #128	; 0x80
 8005850:	d10e      	bne.n	8005870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d107      	bne.n	8005870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fae0 	bl	8005e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b40      	cmp	r3, #64	; 0x40
 800587c:	d10e      	bne.n	800589c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d107      	bne.n	800589c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8ff 	bl	8005a9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d10e      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0320 	and.w	r3, r3, #32
 80058b4:	2b20      	cmp	r3, #32
 80058b6:	d107      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0220 	mvn.w	r2, #32
 80058c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 faaa 	bl	8005e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIM_ConfigClockSource+0x1c>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e0b4      	b.n	8005a56 <HAL_TIM_ConfigClockSource+0x186>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800590a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005912:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005924:	d03e      	beq.n	80059a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800592a:	f200 8087 	bhi.w	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	f000 8086 	beq.w	8005a42 <HAL_TIM_ConfigClockSource+0x172>
 8005936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593a:	d87f      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800593c:	2b70      	cmp	r3, #112	; 0x70
 800593e:	d01a      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0xa6>
 8005940:	2b70      	cmp	r3, #112	; 0x70
 8005942:	d87b      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 8005944:	2b60      	cmp	r3, #96	; 0x60
 8005946:	d050      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0x11a>
 8005948:	2b60      	cmp	r3, #96	; 0x60
 800594a:	d877      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800594c:	2b50      	cmp	r3, #80	; 0x50
 800594e:	d03c      	beq.n	80059ca <HAL_TIM_ConfigClockSource+0xfa>
 8005950:	2b50      	cmp	r3, #80	; 0x50
 8005952:	d873      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d058      	beq.n	8005a0a <HAL_TIM_ConfigClockSource+0x13a>
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d86f      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800595c:	2b30      	cmp	r3, #48	; 0x30
 800595e:	d064      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005960:	2b30      	cmp	r3, #48	; 0x30
 8005962:	d86b      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 8005964:	2b20      	cmp	r3, #32
 8005966:	d060      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005968:	2b20      	cmp	r3, #32
 800596a:	d867      	bhi.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05c      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005970:	2b10      	cmp	r3, #16
 8005972:	d05a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0x15a>
 8005974:	e062      	b.n	8005a3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6899      	ldr	r1, [r3, #8]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f000 f9ad 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005998:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	609a      	str	r2, [r3, #8]
      break;
 80059a2:	e04f      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6818      	ldr	r0, [r3, #0]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	6899      	ldr	r1, [r3, #8]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f000 f996 	bl	8005ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059c6:	609a      	str	r2, [r3, #8]
      break;
 80059c8:	e03c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6818      	ldr	r0, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	6859      	ldr	r1, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	461a      	mov	r2, r3
 80059d8:	f000 f90a 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2150      	movs	r1, #80	; 0x50
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f963 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 80059e8:	e02c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f000 f929 	bl	8005c4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2160      	movs	r1, #96	; 0x60
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f953 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005a08:	e01c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	6859      	ldr	r1, [r3, #4]
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	461a      	mov	r2, r3
 8005a18:	f000 f8ea 	bl	8005bf0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2140      	movs	r1, #64	; 0x40
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f943 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005a28:	e00c      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f000 f93a 	bl	8005cae <TIM_ITRx_SetConfig>
      break;
 8005a3a:	e003      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	e000      	b.n	8005a44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
	...

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a40      	ldr	r2, [pc, #256]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d00f      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3b      	ldr	r2, [pc, #236]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3a      	ldr	r2, [pc, #232]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d108      	bne.n	8005b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d02b      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d027      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d023      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01f      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01b      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d017      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a28      	ldr	r2, [pc, #160]	; (8005bd8 <TIM_Base_SetConfig+0x128>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00f      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00b      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <TIM_Base_SetConfig+0x134>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d007      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a24      	ldr	r2, [pc, #144]	; (8005be8 <TIM_Base_SetConfig+0x138>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a23      	ldr	r2, [pc, #140]	; (8005bec <TIM_Base_SetConfig+0x13c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d108      	bne.n	8005b74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40010400 	.word	0x40010400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800
 8005be4:	40001800 	.word	0x40001800
 8005be8:	40001c00 	.word	0x40001c00
 8005bec:	40002000 	.word	0x40002000

08005bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	f023 0201 	bic.w	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f023 030a 	bic.w	r3, r3, #10
 8005c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	621a      	str	r2, [r3, #32]
}
 8005c42:	bf00      	nop
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b087      	sub	sp, #28
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	60b9      	str	r1, [r7, #8]
 8005c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	031b      	lsls	r3, r3, #12
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	621a      	str	r2, [r3, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f043 0307 	orr.w	r3, r3, #7
 8005cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	609a      	str	r2, [r3, #8]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	021a      	lsls	r2, r3, #8
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	609a      	str	r2, [r3, #8]
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e05a      	b.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a21      	ldr	r2, [pc, #132]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d022      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d88:	d01d      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d018      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d013      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1a      	ldr	r2, [pc, #104]	; (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00e      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a18      	ldr	r2, [pc, #96]	; (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a17      	ldr	r2, [pc, #92]	; (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d004      	beq.n	8005dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a15      	ldr	r2, [pc, #84]	; (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10c      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	68ba      	ldr	r2, [r7, #8]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40000c00 	.word	0x40000c00
 8005e10:	40010400 	.word	0x40010400
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40001800 	.word	0x40001800

08005e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e03f      	b.n	8005ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d106      	bne.n	8005e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fc fc86 	bl	800277c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2224      	movs	r2, #36	; 0x24
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fddb 	bl	8006a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68da      	ldr	r2, [r3, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b08a      	sub	sp, #40	; 0x28
 8005ee2:	af02      	add	r7, sp, #8
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	603b      	str	r3, [r7, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	d17c      	bne.n	8005ff8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_UART_Transmit+0x2c>
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e075      	b.n	8005ffa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UART_Transmit+0x3e>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e06e      	b.n	8005ffa <HAL_UART_Transmit+0x11c>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2221      	movs	r2, #33	; 0x21
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f32:	f7fc fd41 	bl	80029b8 <HAL_GetTick>
 8005f36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	88fa      	ldrh	r2, [r7, #6]
 8005f3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	88fa      	ldrh	r2, [r7, #6]
 8005f42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4c:	d108      	bne.n	8005f60 <HAL_UART_Transmit+0x82>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d104      	bne.n	8005f60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	61bb      	str	r3, [r7, #24]
 8005f5e:	e003      	b.n	8005f68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005f70:	e02a      	b.n	8005fc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2180      	movs	r1, #128	; 0x80
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fb1f 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e036      	b.n	8005ffa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fa0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	3302      	adds	r3, #2
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	e007      	b.n	8005fba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1cf      	bne.n	8005f72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2140      	movs	r1, #64	; 0x40
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 faef 	bl	80065c0 <UART_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e006      	b.n	8005ffa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e000      	b.n	8005ffa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ff8:	2302      	movs	r3, #2
  }
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	4613      	mov	r3, r2
 800600e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b20      	cmp	r3, #32
 800601a:	d11d      	bne.n	8006058 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_UART_Receive_IT+0x26>
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e016      	b.n	800605a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_UART_Receive_IT+0x38>
 8006036:	2302      	movs	r3, #2
 8006038:	e00f      	b.n	800605a <HAL_UART_Receive_IT+0x58>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	461a      	mov	r2, r3
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fb24 	bl	800669c <UART_Start_Receive_IT>
 8006054:	4603      	mov	r3, r0
 8006056:	e000      	b.n	800605a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b0ba      	sub	sp, #232	; 0xe8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800608a:	2300      	movs	r3, #0
 800608c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006090:	2300      	movs	r3, #0
 8006092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_UART_IRQHandler+0x66>
 80060b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ba:	f003 0320 	and.w	r3, r3, #32
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fc03 	bl	80068ce <UART_Receive_IT>
      return;
 80060c8:	e256      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 80de 	beq.w	8006290 <HAL_UART_IRQHandler+0x22c>
 80060d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d106      	bne.n	80060ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80d1 	beq.w	8006290 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00b      	beq.n	8006112 <HAL_UART_IRQHandler+0xae>
 80060fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0201 	orr.w	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_UART_IRQHandler+0xd2>
 800611e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f043 0202 	orr.w	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <HAL_UART_IRQHandler+0xf6>
 8006142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f043 0204 	orr.w	r2, r3, #4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800615a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d011      	beq.n	800618a <HAL_UART_IRQHandler+0x126>
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b00      	cmp	r3, #0
 8006170:	d105      	bne.n	800617e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f043 0208 	orr.w	r2, r3, #8
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 81ed 	beq.w	800656e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006198:	f003 0320 	and.w	r3, r3, #32
 800619c:	2b00      	cmp	r3, #0
 800619e:	d008      	beq.n	80061b2 <HAL_UART_IRQHandler+0x14e>
 80061a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a4:	f003 0320 	and.w	r3, r3, #32
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fb8e 	bl	80068ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	bf0c      	ite	eq
 80061c0:	2301      	moveq	r3, #1
 80061c2:	2300      	movne	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d103      	bne.n	80061de <HAL_UART_IRQHandler+0x17a>
 80061d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d04f      	beq.n	800627e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa96 	bl	8006710 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ee:	2b40      	cmp	r3, #64	; 0x40
 80061f0:	d141      	bne.n	8006276 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3314      	adds	r3, #20
 80061f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800620c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800621e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800622a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1d9      	bne.n	80061f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d013      	beq.n	800626e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624a:	4a7d      	ldr	r2, [pc, #500]	; (8006440 <HAL_UART_IRQHandler+0x3dc>)
 800624c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006252:	4618      	mov	r0, r3
 8006254:	f7fc fd61 	bl	8002d1a <HAL_DMA_Abort_IT>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d016      	beq.n	800628c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006268:	4610      	mov	r0, r2
 800626a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800626c:	e00e      	b.n	800628c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f990 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006274:	e00a      	b.n	800628c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f98c 	bl	8006594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800627c:	e006      	b.n	800628c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f988 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800628a:	e170      	b.n	800656e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	bf00      	nop
    return;
 800628e:	e16e      	b.n	800656e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	2b01      	cmp	r3, #1
 8006296:	f040 814a 	bne.w	800652e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8143 	beq.w	800652e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 813c 	beq.w	800652e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	60bb      	str	r3, [r7, #8]
 80062ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	f040 80b4 	bne.w	8006444 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8140 	beq.w	8006572 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062fa:	429a      	cmp	r2, r3
 80062fc:	f080 8139 	bcs.w	8006572 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006306:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006312:	f000 8088 	beq.w	8006426 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	330c      	adds	r3, #12
 800631c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006320:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006324:	e853 3f00 	ldrex	r3, [r3]
 8006328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800632c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006342:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800634e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800635a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1d9      	bne.n	8006316 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006386:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800638a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800638e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e1      	bne.n	8006362 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3314      	adds	r3, #20
 80063a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3314      	adds	r3, #20
 80063be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1e3      	bne.n	800639e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ee:	e853 3f00 	ldrex	r3, [r3]
 80063f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063f6:	f023 0310 	bic.w	r3, r3, #16
 80063fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006408:	65ba      	str	r2, [r7, #88]	; 0x58
 800640a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800640e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e3      	bne.n	80063e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	4618      	mov	r0, r3
 8006422:	f7fc fc0a 	bl	8002c3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800642e:	b29b      	uxth	r3, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8b6 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800643c:	e099      	b.n	8006572 <HAL_UART_IRQHandler+0x50e>
 800643e:	bf00      	nop
 8006440:	080067d7 	.word	0x080067d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644c:	b29b      	uxth	r3, r3
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 808b 	beq.w	8006576 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8086 	beq.w	8006576 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006480:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	330c      	adds	r3, #12
 800648a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800648e:	647a      	str	r2, [r7, #68]	; 0x44
 8006490:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e3      	bne.n	800646a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	623b      	str	r3, [r7, #32]
   return(result);
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064c6:	633a      	str	r2, [r7, #48]	; 0x30
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e3      	bne.n	80064a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	330c      	adds	r3, #12
 80064ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0310 	bic.w	r3, r3, #16
 80064fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	330c      	adds	r3, #12
 8006508:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800650c:	61fa      	str	r2, [r7, #28]
 800650e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	69b9      	ldr	r1, [r7, #24]
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	617b      	str	r3, [r7, #20]
   return(result);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e3      	bne.n	80064e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006524:	4619      	mov	r1, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f83e 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800652c:	e023      	b.n	8006576 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800652e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006536:	2b00      	cmp	r3, #0
 8006538:	d009      	beq.n	800654e <HAL_UART_IRQHandler+0x4ea>
 800653a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f959 	bl	80067fe <UART_Transmit_IT>
    return;
 800654c:	e014      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <HAL_UART_IRQHandler+0x514>
 800655a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d008      	beq.n	8006578 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f999 	bl	800689e <UART_EndTransmit_IT>
    return;
 800656c:	e004      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
    return;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
      return;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <HAL_UART_IRQHandler+0x514>
      return;
 8006576:	bf00      	nop
  }
}
 8006578:	37e8      	adds	r7, #232	; 0xe8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop

08006580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b090      	sub	sp, #64	; 0x40
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d0:	e050      	b.n	8006674 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d04c      	beq.n	8006674 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d007      	beq.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065e0:	f7fc f9ea 	bl	80029b8 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d241      	bcs.n	8006674 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	330c      	adds	r3, #12
 80065f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	330c      	adds	r3, #12
 800660e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006610:	637a      	str	r2, [r7, #52]	; 0x34
 8006612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800661e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3314      	adds	r3, #20
 800662a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	613b      	str	r3, [r7, #16]
   return(result);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f023 0301 	bic.w	r3, r3, #1
 800663a:	63bb      	str	r3, [r7, #56]	; 0x38
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3314      	adds	r3, #20
 8006642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006644:	623a      	str	r2, [r7, #32]
 8006646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69f9      	ldr	r1, [r7, #28]
 800664a:	6a3a      	ldr	r2, [r7, #32]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	61bb      	str	r3, [r7, #24]
   return(result);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e00f      	b.n	8006694 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	429a      	cmp	r2, r3
 8006690:	d09f      	beq.n	80065d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3740      	adds	r7, #64	; 0x40
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2222      	movs	r2, #34	; 0x22
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f042 0220 	orr.w	r2, r2, #32
 8006700:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b095      	sub	sp, #84	; 0x54
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006738:	643a      	str	r2, [r7, #64]	; 0x40
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800673e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	3314      	adds	r3, #20
 8006752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	e853 3f00 	ldrex	r3, [r3]
 800675a:	61fb      	str	r3, [r7, #28]
   return(result);
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	f023 0301 	bic.w	r3, r3, #1
 8006762:	64bb      	str	r3, [r7, #72]	; 0x48
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3314      	adds	r3, #20
 800676a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e5      	bne.n	800674c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	2b01      	cmp	r3, #1
 8006786:	d119      	bne.n	80067bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	330c      	adds	r3, #12
 800678e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	60bb      	str	r3, [r7, #8]
   return(result);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0310 	bic.w	r3, r3, #16
 800679e:	647b      	str	r3, [r7, #68]	; 0x44
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	330c      	adds	r3, #12
 80067a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067a8:	61ba      	str	r2, [r7, #24]
 80067aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6979      	ldr	r1, [r7, #20]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	613b      	str	r3, [r7, #16]
   return(result);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e5      	bne.n	8006788 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067ca:	bf00      	nop
 80067cc:	3754      	adds	r7, #84	; 0x54
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fecf 	bl	8006594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067fe:	b480      	push	{r7}
 8006800:	b085      	sub	sp, #20
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b21      	cmp	r3, #33	; 0x21
 8006810:	d13e      	bne.n	8006890 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681a:	d114      	bne.n	8006846 <UART_Transmit_IT+0x48>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d110      	bne.n	8006846 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	881b      	ldrh	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006838:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	1c9a      	adds	r2, r3, #2
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	621a      	str	r2, [r3, #32]
 8006844:	e008      	b.n	8006858 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	1c59      	adds	r1, r3, #1
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6211      	str	r1, [r2, #32]
 8006850:	781a      	ldrb	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29b      	uxth	r3, r3
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	4619      	mov	r1, r3
 8006866:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10f      	bne.n	800688c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800687a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800688c:	2300      	movs	r3, #0
 800688e:	e000      	b.n	8006892 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006890:	2302      	movs	r3, #2
  }
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7ff fe5e 	bl	8006580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b08c      	sub	sp, #48	; 0x30
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b22      	cmp	r3, #34	; 0x22
 80068e0:	f040 80ab 	bne.w	8006a3a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ec:	d117      	bne.n	800691e <UART_Receive_IT+0x50>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d113      	bne.n	800691e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b29b      	uxth	r3, r3
 8006908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800690c:	b29a      	uxth	r2, r3
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28
 800691c:	e026      	b.n	800696c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006930:	d007      	beq.n	8006942 <UART_Receive_IT+0x74>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <UART_Receive_IT+0x82>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	b2da      	uxtb	r2, r3
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	e008      	b.n	8006962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800695c:	b2da      	uxtb	r2, r3
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29b      	uxth	r3, r3
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4619      	mov	r1, r3
 800697a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800697c:	2b00      	cmp	r3, #0
 800697e:	d15a      	bne.n	8006a36 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0220 	bic.w	r2, r2, #32
 800698e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800699e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695a      	ldr	r2, [r3, #20]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f022 0201 	bic.w	r2, r2, #1
 80069ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d135      	bne.n	8006a2c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	613b      	str	r3, [r7, #16]
   return(result);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f023 0310 	bic.w	r3, r3, #16
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e6:	623a      	str	r2, [r7, #32]
 80069e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	69f9      	ldr	r1, [r7, #28]
 80069ec:	6a3a      	ldr	r2, [r7, #32]
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d10a      	bne.n	8006a1e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fdbf 	bl	80065a8 <HAL_UARTEx_RxEventCallback>
 8006a2a:	e002      	b.n	8006a32 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fb fe5d 	bl	80026ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e002      	b.n	8006a3c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	e000      	b.n	8006a3c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a3a:	2302      	movs	r3, #2
  }
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3730      	adds	r7, #48	; 0x30
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a48:	b09f      	sub	sp, #124	; 0x7c
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5a:	68d9      	ldr	r1, [r3, #12]
 8006a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	ea40 0301 	orr.w	r3, r0, r1
 8006a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a68:	689a      	ldr	r2, [r3, #8]
 8006a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a88:	f021 010c 	bic.w	r1, r1, #12
 8006a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a92:	430b      	orrs	r3, r1
 8006a94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa2:	6999      	ldr	r1, [r3, #24]
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	ea40 0301 	orr.w	r3, r0, r1
 8006aac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4bc5      	ldr	r3, [pc, #788]	; (8006dc8 <UART_SetConfig+0x384>)
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d004      	beq.n	8006ac2 <UART_SetConfig+0x7e>
 8006ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	4bc3      	ldr	r3, [pc, #780]	; (8006dcc <UART_SetConfig+0x388>)
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d103      	bne.n	8006aca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ac2:	f7fd ff3d 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8006ac6:	6778      	str	r0, [r7, #116]	; 0x74
 8006ac8:	e002      	b.n	8006ad0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aca:	f7fd ff25 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8006ace:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad8:	f040 80b6 	bne.w	8006c48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ade:	461c      	mov	r4, r3
 8006ae0:	f04f 0500 	mov.w	r5, #0
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	1891      	adds	r1, r2, r2
 8006aea:	6439      	str	r1, [r7, #64]	; 0x40
 8006aec:	415b      	adcs	r3, r3
 8006aee:	647b      	str	r3, [r7, #68]	; 0x44
 8006af0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006af4:	1912      	adds	r2, r2, r4
 8006af6:	eb45 0303 	adc.w	r3, r5, r3
 8006afa:	f04f 0000 	mov.w	r0, #0
 8006afe:	f04f 0100 	mov.w	r1, #0
 8006b02:	00d9      	lsls	r1, r3, #3
 8006b04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b08:	00d0      	lsls	r0, r2, #3
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	1911      	adds	r1, r2, r4
 8006b10:	6639      	str	r1, [r7, #96]	; 0x60
 8006b12:	416b      	adcs	r3, r5
 8006b14:	667b      	str	r3, [r7, #100]	; 0x64
 8006b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f04f 0300 	mov.w	r3, #0
 8006b20:	1891      	adds	r1, r2, r2
 8006b22:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b24:	415b      	adcs	r3, r3
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b30:	f7f9 fb52 	bl	80001d8 <__aeabi_uldivmod>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4ba5      	ldr	r3, [pc, #660]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	011e      	lsls	r6, r3, #4
 8006b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b44:	461c      	mov	r4, r3
 8006b46:	f04f 0500 	mov.w	r5, #0
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	1891      	adds	r1, r2, r2
 8006b50:	6339      	str	r1, [r7, #48]	; 0x30
 8006b52:	415b      	adcs	r3, r3
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
 8006b56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b5a:	1912      	adds	r2, r2, r4
 8006b5c:	eb45 0303 	adc.w	r3, r5, r3
 8006b60:	f04f 0000 	mov.w	r0, #0
 8006b64:	f04f 0100 	mov.w	r1, #0
 8006b68:	00d9      	lsls	r1, r3, #3
 8006b6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b6e:	00d0      	lsls	r0, r2, #3
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	1911      	adds	r1, r2, r4
 8006b76:	65b9      	str	r1, [r7, #88]	; 0x58
 8006b78:	416b      	adcs	r3, r5
 8006b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	461a      	mov	r2, r3
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	1891      	adds	r1, r2, r2
 8006b88:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b8a:	415b      	adcs	r3, r3
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b96:	f7f9 fb1f 	bl	80001d8 <__aeabi_uldivmod>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4b8c      	ldr	r3, [pc, #560]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	2164      	movs	r1, #100	; 0x64
 8006ba8:	fb01 f303 	mul.w	r3, r1, r3
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	3332      	adds	r3, #50	; 0x32
 8006bb2:	4a87      	ldr	r2, [pc, #540]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb8:	095b      	lsrs	r3, r3, #5
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bc0:	441e      	add	r6, r3
 8006bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f04f 0100 	mov.w	r1, #0
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	1894      	adds	r4, r2, r2
 8006bd0:	623c      	str	r4, [r7, #32]
 8006bd2:	415b      	adcs	r3, r3
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bda:	1812      	adds	r2, r2, r0
 8006bdc:	eb41 0303 	adc.w	r3, r1, r3
 8006be0:	f04f 0400 	mov.w	r4, #0
 8006be4:	f04f 0500 	mov.w	r5, #0
 8006be8:	00dd      	lsls	r5, r3, #3
 8006bea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bee:	00d4      	lsls	r4, r2, #3
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	1814      	adds	r4, r2, r0
 8006bf6:	653c      	str	r4, [r7, #80]	; 0x50
 8006bf8:	414b      	adcs	r3, r1
 8006bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8006bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	461a      	mov	r2, r3
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	1891      	adds	r1, r2, r2
 8006c08:	61b9      	str	r1, [r7, #24]
 8006c0a:	415b      	adcs	r3, r3
 8006c0c:	61fb      	str	r3, [r7, #28]
 8006c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c16:	f7f9 fadf 	bl	80001d8 <__aeabi_uldivmod>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4b6c      	ldr	r3, [pc, #432]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006c20:	fba3 1302 	umull	r1, r3, r3, r2
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	2164      	movs	r1, #100	; 0x64
 8006c28:	fb01 f303 	mul.w	r3, r1, r3
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	3332      	adds	r3, #50	; 0x32
 8006c32:	4a67      	ldr	r2, [pc, #412]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	095b      	lsrs	r3, r3, #5
 8006c3a:	f003 0207 	and.w	r2, r3, #7
 8006c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4432      	add	r2, r6
 8006c44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c46:	e0b9      	b.n	8006dbc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c4a:	461c      	mov	r4, r3
 8006c4c:	f04f 0500 	mov.w	r5, #0
 8006c50:	4622      	mov	r2, r4
 8006c52:	462b      	mov	r3, r5
 8006c54:	1891      	adds	r1, r2, r2
 8006c56:	6139      	str	r1, [r7, #16]
 8006c58:	415b      	adcs	r3, r3
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c60:	1912      	adds	r2, r2, r4
 8006c62:	eb45 0303 	adc.w	r3, r5, r3
 8006c66:	f04f 0000 	mov.w	r0, #0
 8006c6a:	f04f 0100 	mov.w	r1, #0
 8006c6e:	00d9      	lsls	r1, r3, #3
 8006c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c74:	00d0      	lsls	r0, r2, #3
 8006c76:	4602      	mov	r2, r0
 8006c78:	460b      	mov	r3, r1
 8006c7a:	eb12 0804 	adds.w	r8, r2, r4
 8006c7e:	eb43 0905 	adc.w	r9, r3, r5
 8006c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f04f 0100 	mov.w	r1, #0
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	008b      	lsls	r3, r1, #2
 8006c96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c9a:	0082      	lsls	r2, r0, #2
 8006c9c:	4640      	mov	r0, r8
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	f7f9 fa9a 	bl	80001d8 <__aeabi_uldivmod>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4b49      	ldr	r3, [pc, #292]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006caa:	fba3 2302 	umull	r2, r3, r3, r2
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	011e      	lsls	r6, r3, #4
 8006cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f04f 0100 	mov.w	r1, #0
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	1894      	adds	r4, r2, r2
 8006cc0:	60bc      	str	r4, [r7, #8]
 8006cc2:	415b      	adcs	r3, r3
 8006cc4:	60fb      	str	r3, [r7, #12]
 8006cc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cca:	1812      	adds	r2, r2, r0
 8006ccc:	eb41 0303 	adc.w	r3, r1, r3
 8006cd0:	f04f 0400 	mov.w	r4, #0
 8006cd4:	f04f 0500 	mov.w	r5, #0
 8006cd8:	00dd      	lsls	r5, r3, #3
 8006cda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cde:	00d4      	lsls	r4, r2, #3
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	1814      	adds	r4, r2, r0
 8006ce6:	64bc      	str	r4, [r7, #72]	; 0x48
 8006ce8:	414b      	adcs	r3, r1
 8006cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f04f 0100 	mov.w	r1, #0
 8006cf6:	f04f 0200 	mov.w	r2, #0
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	008b      	lsls	r3, r1, #2
 8006d00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d04:	0082      	lsls	r2, r0, #2
 8006d06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d0a:	f7f9 fa65 	bl	80001d8 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006d14:	fba3 1302 	umull	r1, r3, r3, r2
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	2164      	movs	r1, #100	; 0x64
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	3332      	adds	r3, #50	; 0x32
 8006d26:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006d28:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2c:	095b      	lsrs	r3, r3, #5
 8006d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d32:	441e      	add	r6, r3
 8006d34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d36:	4618      	mov	r0, r3
 8006d38:	f04f 0100 	mov.w	r1, #0
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	1894      	adds	r4, r2, r2
 8006d42:	603c      	str	r4, [r7, #0]
 8006d44:	415b      	adcs	r3, r3
 8006d46:	607b      	str	r3, [r7, #4]
 8006d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4c:	1812      	adds	r2, r2, r0
 8006d4e:	eb41 0303 	adc.w	r3, r1, r3
 8006d52:	f04f 0400 	mov.w	r4, #0
 8006d56:	f04f 0500 	mov.w	r5, #0
 8006d5a:	00dd      	lsls	r5, r3, #3
 8006d5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d60:	00d4      	lsls	r4, r2, #3
 8006d62:	4622      	mov	r2, r4
 8006d64:	462b      	mov	r3, r5
 8006d66:	eb12 0a00 	adds.w	sl, r2, r0
 8006d6a:	eb43 0b01 	adc.w	fp, r3, r1
 8006d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	008b      	lsls	r3, r1, #2
 8006d82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d86:	0082      	lsls	r2, r0, #2
 8006d88:	4650      	mov	r0, sl
 8006d8a:	4659      	mov	r1, fp
 8006d8c:	f7f9 fa24 	bl	80001d8 <__aeabi_uldivmod>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4b0e      	ldr	r3, [pc, #56]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006d96:	fba3 1302 	umull	r1, r3, r3, r2
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2164      	movs	r1, #100	; 0x64
 8006d9e:	fb01 f303 	mul.w	r3, r1, r3
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	011b      	lsls	r3, r3, #4
 8006da6:	3332      	adds	r3, #50	; 0x32
 8006da8:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <UART_SetConfig+0x38c>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4432      	add	r2, r6
 8006dba:	609a      	str	r2, [r3, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	377c      	adds	r7, #124	; 0x7c
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40011000 	.word	0x40011000
 8006dcc:	40011400 	.word	0x40011400
 8006dd0:	51eb851f 	.word	0x51eb851f

08006dd4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dec:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4b20      	ldr	r3, [pc, #128]	; (8006e74 <FSMC_NORSRAM_Init+0xa0>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006dfe:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006e04:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006e0a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006e10:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006e16:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006e1c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e22:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006e28:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006e2e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006e34:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006e3a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006e40:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d103      	bne.n	8006e58 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e56:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	fff00080 	.word	0xfff00080

08006e78 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e92:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e9a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ea6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006eae:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006eb6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ec0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	3b02      	subs	r3, #2
 8006ec8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006eca:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6979      	ldr	r1, [r7, #20]
 8006ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f0c:	d122      	bne.n	8006f54 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	4b15      	ldr	r3, [pc, #84]	; (8006f70 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f2a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f32:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006f3a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f40:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6979      	ldr	r1, [r7, #20]
 8006f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006f52:	e005      	b.n	8006f60 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	cff00000 	.word	0xcff00000

08006f74 <__libc_init_array>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	4d0d      	ldr	r5, [pc, #52]	; (8006fac <__libc_init_array+0x38>)
 8006f78:	4c0d      	ldr	r4, [pc, #52]	; (8006fb0 <__libc_init_array+0x3c>)
 8006f7a:	1b64      	subs	r4, r4, r5
 8006f7c:	10a4      	asrs	r4, r4, #2
 8006f7e:	2600      	movs	r6, #0
 8006f80:	42a6      	cmp	r6, r4
 8006f82:	d109      	bne.n	8006f98 <__libc_init_array+0x24>
 8006f84:	4d0b      	ldr	r5, [pc, #44]	; (8006fb4 <__libc_init_array+0x40>)
 8006f86:	4c0c      	ldr	r4, [pc, #48]	; (8006fb8 <__libc_init_array+0x44>)
 8006f88:	f000 f820 	bl	8006fcc <_init>
 8006f8c:	1b64      	subs	r4, r4, r5
 8006f8e:	10a4      	asrs	r4, r4, #2
 8006f90:	2600      	movs	r6, #0
 8006f92:	42a6      	cmp	r6, r4
 8006f94:	d105      	bne.n	8006fa2 <__libc_init_array+0x2e>
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9c:	4798      	blx	r3
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7ee      	b.n	8006f80 <__libc_init_array+0xc>
 8006fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa6:	4798      	blx	r3
 8006fa8:	3601      	adds	r6, #1
 8006faa:	e7f2      	b.n	8006f92 <__libc_init_array+0x1e>
 8006fac:	08009fcc 	.word	0x08009fcc
 8006fb0:	08009fcc 	.word	0x08009fcc
 8006fb4:	08009fcc 	.word	0x08009fcc
 8006fb8:	08009fd0 	.word	0x08009fd0

08006fbc <memset>:
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d100      	bne.n	8006fc6 <memset+0xa>
 8006fc4:	4770      	bx	lr
 8006fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006fca:	e7f9      	b.n	8006fc0 <memset+0x4>

08006fcc <_init>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	bf00      	nop
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr

08006fd8 <_fini>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	bf00      	nop
 8006fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fde:	bc08      	pop	{r3}
 8006fe0:	469e      	mov	lr, r3
 8006fe2:	4770      	bx	lr
